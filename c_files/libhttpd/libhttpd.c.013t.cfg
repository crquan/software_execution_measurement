
;; Function httpd_logstats (httpd_logstats)

httpd_logstats (secs)
{
  double D.8159;
  float D.8158;
  float D.8157;
  float D.8156;
  long unsigned int str_alloc_size.274;
  int str_alloc_count.273;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  str_alloc_count.273 = str_alloc_count;
  if (str_alloc_count.273 > 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  str_alloc_size.274 = str_alloc_size;
  D.8156 = (float) str_alloc_size.274;
  str_alloc_count.273 = str_alloc_count;
  D.8157 = (float) str_alloc_count.273;
  D.8158 = D.8156 / D.8157;
  D.8159 = (double) D.8158;
  str_alloc_size.274 = str_alloc_size;
  str_alloc_count.273 = str_alloc_count;
  syslog (6, &"  libhttpd - %d strings allocated, %lu bytes (%g bytes/str)"[0], str_alloc_count.273, str_alloc_size.274, D.8159);
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (false) 3 (fallthru)
  return;
  # SUCC: EXIT

}



;; Function httpd_write_fully (httpd_write_fully)

httpd_write_fully (fd, buf, nbytes)
{
  int r;
  int nwritten;
  int D.8150;
  _Bool D.8149;
  _Bool D.8148;
  _Bool D.8147;
  int D.8146;
  int * D.8145;
  long int D.8144;
  const void * D.8143;
  long unsigned int D.8142;
  long unsigned int D.8141;
  long unsigned int D.8140;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  nwritten = 0;
  goto <bb 10>;
  # SUCC: 10 (fallthru)

  # BLOCK 3
  # PRED: 10 (true)
  D.8140 = (size_t) nwritten;
  D.8141 = nbytes - D.8140;
  D.8142 = (long unsigned int) nwritten;
  D.8143 = buf + D.8142;
  D.8144 = write (fd, D.8143, D.8141);
  r = (int) D.8144;
  if (r < 0)
    goto <bb 4>;
  else
    goto <bb 6>;
  # SUCC: 4 (true) 6 (false)

  # BLOCK 4
  # PRED: 3 (true)
  D.8145 = __errno_location ();
  D.8146 = *D.8145;
  D.8147 = D.8146 == 4;
  D.8148 = D.8146 == 11;
  D.8149 = D.8147 || D.8148;
  if (D.8149)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  sleep (1);
  goto <bb 10>;
  # SUCC: 10 (fallthru)

  # BLOCK 6
  # PRED: 3 (false) 4 (false)
  if (r < 0)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  D.8150 = r;
  goto <bb 12>;
  # SUCC: 12 (fallthru)

  # BLOCK 8
  # PRED: 6 (false)
  if (r == 0)
    goto <bb 11>;
  else
    goto <bb 9>;
  # SUCC: 11 (true) 9 (false)

  # BLOCK 9
  # PRED: 8 (false)
  nwritten = nwritten + r;
  # SUCC: 10 (fallthru)

  # BLOCK 10
  # PRED: 2 (fallthru) 5 (fallthru) 9 (fallthru)
  D.8140 = (size_t) nwritten;
  if (D.8140 < nbytes)
    goto <bb 3>;
  else
    goto <bb 11>;
  # SUCC: 3 (true) 11 (false)

  # BLOCK 11
  # PRED: 8 (true) 10 (false)
  D.8150 = nwritten;
  # SUCC: 12 (fallthru)

  # BLOCK 12
  # PRED: 7 (fallthru) 11 (fallthru)
  return D.8150;
  # SUCC: EXIT

}



;; Function httpd_read_fully (httpd_read_fully)

httpd_read_fully (fd, buf, nbytes)
{
  int r;
  int nread;
  int D.8129;
  _Bool D.8128;
  _Bool D.8127;
  _Bool D.8126;
  int D.8125;
  int * D.8124;
  long int D.8123;
  void * D.8122;
  long unsigned int D.8121;
  long unsigned int D.8120;
  long unsigned int D.8119;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  nread = 0;
  goto <bb 10>;
  # SUCC: 10 (fallthru)

  # BLOCK 3
  # PRED: 10 (true)
  D.8119 = (size_t) nread;
  D.8120 = nbytes - D.8119;
  D.8121 = (long unsigned int) nread;
  D.8122 = buf + D.8121;
  D.8123 = read (fd, D.8122, D.8120);
  r = (int) D.8123;
  if (r < 0)
    goto <bb 4>;
  else
    goto <bb 6>;
  # SUCC: 4 (true) 6 (false)

  # BLOCK 4
  # PRED: 3 (true)
  D.8124 = __errno_location ();
  D.8125 = *D.8124;
  D.8126 = D.8125 == 4;
  D.8127 = D.8125 == 11;
  D.8128 = D.8126 || D.8127;
  if (D.8128)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  sleep (1);
  goto <bb 10>;
  # SUCC: 10 (fallthru)

  # BLOCK 6
  # PRED: 3 (false) 4 (false)
  if (r < 0)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  D.8129 = r;
  goto <bb 12>;
  # SUCC: 12 (fallthru)

  # BLOCK 8
  # PRED: 6 (false)
  if (r == 0)
    goto <bb 11>;
  else
    goto <bb 9>;
  # SUCC: 11 (true) 9 (false)

  # BLOCK 9
  # PRED: 8 (false)
  nread = nread + r;
  # SUCC: 10 (fallthru)

  # BLOCK 10
  # PRED: 2 (fallthru) 5 (fallthru) 9 (fallthru)
  D.8119 = (size_t) nread;
  if (D.8119 < nbytes)
    goto <bb 3>;
  else
    goto <bb 11>;
  # SUCC: 3 (true) 11 (false)

  # BLOCK 11
  # PRED: 8 (true) 10 (false)
  D.8129 = nread;
  # SUCC: 12 (fallthru)

  # BLOCK 12
  # PRED: 7 (fallthru) 11 (fallthru)
  return D.8129;
  # SUCC: EXIT

}



;; Function httpd_ntoa (httpd_ntoa)

httpd_ntoa (saP)
{
  register unsigned int __x;
  register unsigned int __v;
  static char str[200];
  char * D.8081;
  int D.8080;
  unsigned int D.8079;
  unsigned int D.8078;
  unsigned int D.8077;
  unsigned int D.8076;
  unsigned int D.8075;
  unsigned int D.8074;
  unsigned int D.8073;
  unsigned int D.8072;
  int D.8071;
  unsigned int D.8051;
  unsigned int D.8070;
  uint32_t * D.8069;
  unsigned int D.8068;
  uint32_t * D.8067;
  unsigned int D.8066;
  uint32_t * D.8065;
  int D.8064;
  struct sockaddr * D.8063;
  unsigned int D.8062;
  long unsigned int D.8061;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.8061 = sockaddr_len (saP);
  D.8062 = (socklen_t) D.8061;
  D.8063 = &saP->sa;
  D.8064 = getnameinfo (D.8063, D.8062, &str, 200, 0B, 0, 1);
  if (D.8064 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  str[0] = 63;
  str[1] = 0;
  goto <bb 12>;
  # SUCC: 12 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  D.8065 = &saP->sa_in6.sin6_addr.__in6_u.__u6_addr32[0];
  D.8066 = *D.8065;
  if (D.8066 == 0)
    goto <bb 5>;
  else
    goto <bb 12>;
  # SUCC: 5 (true) 12 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.8067 = &saP->sa_in6.sin6_addr.__in6_u.__u6_addr32[1];
  D.8068 = *D.8067;
  if (D.8068 == 0)
    goto <bb 6>;
  else
    goto <bb 12>;
  # SUCC: 6 (true) 12 (false)

  # BLOCK 6
  # PRED: 5 (true)
  D.8069 = &saP->sa_in6.sin6_addr.__in6_u.__u6_addr32[2];
  D.8070 = *D.8069;
  __x = 65535;
  D.8071 = __builtin_constant_p (__x);
  if (D.8071 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  D.8072 = __x >> 24;
  D.8073 = __x & 16711680;
  D.8074 = D.8073 >> 8;
  D.8075 = D.8072 | D.8074;
  D.8076 = __x & 65280;
  D.8077 = D.8076 << 8;
  D.8078 = D.8075 | D.8077;
  D.8079 = __x << 24;
  __v = D.8078 | D.8079;
  goto <bb 9>;
  # SUCC: 9 (fallthru)

  # BLOCK 8
  # PRED: 6 (false)
  __asm__("bswap %0":"=r" __v:"0" __x);
  # SUCC: 9 (fallthru)

  # BLOCK 9
  # PRED: 7 (fallthru) 8 (fallthru)
  D.8051 = __v;
  if (D.8070 == D.8051)
    goto <bb 10>;
  else
    goto <bb 12>;
  # SUCC: 10 (true) 12 (false)

  # BLOCK 10
  # PRED: 9 (true)
  D.8080 = strncmp (&str, &"::ffff:"[0], 7);
  if (D.8080 == 0)
    goto <bb 11>;
  else
    goto <bb 12>;
  # SUCC: 11 (true) 12 (false)

  # BLOCK 11
  # PRED: 10 (true)
  strcpy (&str, &str[7]);
  # SUCC: 12 (fallthru)

  # BLOCK 12
  # PRED: 3 (fallthru) 4 (false) 5 (false) 9 (false) 10 (false) 11 (fallthru)
  D.8081 = &str;
  # SUCC: 13 (fallthru)

  # BLOCK 13
  # PRED: 12 (fallthru)
  return D.8081;
  # SUCC: EXIT

}


Merging blocks 12 and 13

;; Function sockaddr_len (sockaddr_len)

sockaddr_len (saP)
{
  size_t D.8099;
  int D.8098;
  short unsigned int D.8097;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.8097 = saP->sa.sa_family;
  D.8098 = (int) D.8097;
  switch (D.8098)
    {
      case 2: goto <L0>;
      case 10: goto <L1>;
      default : goto <L2>;
    }
  # SUCC: 3 4 5

  # BLOCK 3
  # PRED: 2
<L0>:;
  D.8099 = 16;
  goto <bb 6>;
  # SUCC: 6 (fallthru)

  # BLOCK 4
  # PRED: 2
<L1>:;
  D.8099 = 28;
  goto <bb 6>;
  # SUCC: 6 (fallthru)

  # BLOCK 5
  # PRED: 2
<L2>:;
  D.8099 = 0;
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 3 (fallthru) 4 (fallthru) 5 (fallthru)
  return D.8099;
  # SUCC: EXIT

}



;; Function httpd_start_request (httpd_start_request)

httpd_start_request (hc, nowP)
{
  int r;
  int D.7914;
  int r.260;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  r.260 = really_start_request (hc, nowP);
  r = r.260;
  D.7914 = r;
  # SUCC: 3 (fallthru)

  # BLOCK 3
  # PRED: 2 (fallthru)
  return D.7914;
  # SUCC: EXIT

}


Merging blocks 2 and 3

;; Function really_start_request (really_start_request)

really_start_request (hc, nowP)
{
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  size_t __s1_len;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  size_t __s1_len;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  size_t __s1_len;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  size_t __s1_len;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  size_t __s1_len;
  char * pi;
  char * cp;
  size_t indxlen;
  size_t expnlen;
  static size_t maxdirname = 0;
  static char * dirname;
  int i;
  static const char * index_names[6] = {(const char *) (char *) "index.html", (const char *) (char *) "index.htm", (const char *) (char *) "index.xhtml", (const char *) (char *) "index.xht", (const char *) (char *) "Default.htm", (const char *) (char *) "index.cgi"};
  static size_t maxindexname = 0;
  static char * indexname;
  char * D.7907;
  char * D.7906;
  void * D.7905;
  char * err304title.259;
  long int D.7903;
  char * ok200title.258;
  char * D.7899;
  char * D.7898;
  long int D.7897;
  long int D.7896;
  long int D.7895;
  long int D.7894;
  int D.7893;
  char * D.7890;
  char * D.7889;
  int D.7888;
  int D.7887;
  _Bool D.7886;
  int D.7885;
  int D.7884;
  char * D.7883;
  int D.7882;
  char * D.7881;
  char D.7880;
  char * D.7879;
  long unsigned int D.7878;
  int D.7877;
  unsigned char D.7876;
  const unsigned char * D.7875;
  _Bool D.7874;
  _Bool D.7873;
  int D.7872;
  unsigned char D.7871;
  const unsigned char * D.7870;
  _Bool D.7869;
  _Bool D.7868;
  int D.7867;
  unsigned char D.7866;
  const unsigned char * D.7865;
  _Bool D.7864;
  _Bool D.7863;
  _Bool D.7862;
  int D.7861;
  unsigned char D.7860;
  char * D.7859;
  long unsigned int D.7858;
  int D.7669;
  int iftmp.257;
  int D.7670;
  char * D.7856;
  int D.7855;
  unsigned char D.7854;
  const unsigned char * D.7853;
  int D.7852;
  unsigned char D.7851;
  const unsigned char * D.7850;
  _Bool D.7849;
  _Bool D.7848;
  int D.7847;
  unsigned char D.7846;
  const unsigned char * D.7845;
  int D.7844;
  unsigned char D.7843;
  const unsigned char * D.7842;
  _Bool D.7841;
  _Bool D.7840;
  int D.7839;
  unsigned char D.7838;
  const unsigned char * D.7837;
  int D.7836;
  unsigned char D.7835;
  const unsigned char * D.7834;
  _Bool D.7833;
  _Bool D.7832;
  _Bool D.7831;
  int D.7830;
  unsigned char D.7829;
  const unsigned char * D.7828;
  int D.7827;
  unsigned char D.7826;
  int D.7660;
  int iftmp.256;
  int D.7661;
  int D.7824;
  char * dirname.255;
  char * D.7822;
  char * * D.7821;
  size_t * D.7820;
  char D.7819;
  char * pi.254;
  char * cp.253;
  int D.7814;
  struct httpd_server * D.7813;
  int D.7812;
  int D.7811;
  int D.7810;
  int D.7809;
  char * D.7808;
  unsigned int D.7807;
  unsigned int i.252;
  int D.7805;
  int D.7804;
  unsigned char D.7803;
  const unsigned char * D.7802;
  int D.7801;
  unsigned char D.7800;
  const unsigned char * D.7799;
  _Bool D.7798;
  _Bool D.7797;
  int D.7796;
  unsigned char D.7795;
  const unsigned char * D.7794;
  int D.7793;
  unsigned char D.7792;
  const unsigned char * D.7791;
  _Bool D.7790;
  _Bool D.7789;
  int D.7788;
  unsigned char D.7787;
  const unsigned char * D.7786;
  int D.7785;
  unsigned char D.7784;
  const unsigned char * D.7783;
  _Bool D.7782;
  _Bool D.7781;
  _Bool D.7780;
  int D.7779;
  unsigned char D.7778;
  const unsigned char * D.7777;
  int D.7776;
  unsigned char D.7775;
  int D.7647;
  int iftmp.251;
  int D.7648;
  char D.7773;
  char * D.7772;
  long unsigned int D.7771;
  char * indexname.250;
  long unsigned int D.7767;
  long unsigned int D.7766;
  long unsigned int D.7765;
  const char * D.7764;
  int i.249;
  char D.7762;
  char * D.7761;
  long unsigned int D.7760;
  long unsigned int D.7759;
  int D.7758;
  unsigned char D.7757;
  const unsigned char * D.7756;
  int D.7755;
  unsigned char D.7754;
  const unsigned char * D.7753;
  _Bool D.7752;
  _Bool D.7751;
  int D.7750;
  unsigned char D.7749;
  const unsigned char * D.7748;
  int D.7747;
  unsigned char D.7746;
  const unsigned char * D.7745;
  _Bool D.7744;
  _Bool D.7743;
  int D.7742;
  unsigned char D.7741;
  const unsigned char * D.7740;
  int D.7739;
  unsigned char D.7738;
  const unsigned char * D.7737;
  _Bool D.7736;
  _Bool D.7735;
  _Bool D.7734;
  int D.7733;
  unsigned char D.7732;
  const unsigned char * D.7731;
  int D.7730;
  unsigned char D.7729;
  int D.7638;
  int iftmp.248;
  int D.7639;
  unsigned char D.7727;
  const unsigned char * {ref-all} D.7726;
  int D.7725;
  unsigned char D.7724;
  const unsigned char * D.7723;
  int D.7722;
  unsigned char D.7721;
  const unsigned char * D.7720;
  _Bool D.7719;
  _Bool D.7718;
  int D.7717;
  unsigned char D.7716;
  const unsigned char * D.7715;
  int D.7714;
  unsigned char D.7713;
  const unsigned char * D.7712;
  _Bool D.7711;
  _Bool D.7710;
  int D.7709;
  unsigned char D.7708;
  const unsigned char * D.7707;
  int D.7706;
  unsigned char D.7705;
  const unsigned char * D.7704;
  _Bool D.7703;
  _Bool D.7702;
  _Bool D.7701;
  int D.7700;
  unsigned char D.7699;
  const unsigned char * D.7698;
  int D.7697;
  unsigned char D.7696;
  char * D.7695;
  int D.7629;
  int iftmp.247;
  int D.7630;
  char * err404title.246;
  char * err404form.245;
  char D.7691;
  char * D.7690;
  unsigned int D.7689;
  char * err403title.244;
  char * D.7687;
  union httpd_sockaddr * D.7686;
  unsigned int D.7685;
  unsigned int D.7684;
  char * err500title.243;
  char * err500form.242;
  char * D.7681;
  int D.7680;
  struct stat * D.7679;
  int D.7678;
  char * err501title.241;
  char * err501form.240;
  char * D.7675;
  unsigned int D.7674;
  unsigned int D.7673;
  int D.7672;
  char * D.7671;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.7671 = hc->expnfilename;
  expnlen = strlen (D.7671);
  D.7672 = hc->method;
  D.7673 = (unsigned int) D.7672;
  D.7674 = D.7673 + 4294967295;
  if (D.7674 > 2)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.7672 = hc->method;
  D.7675 = httpd_method_str (D.7672);
  err501form.240 = err501form;
  err501title.241 = err501title;
  httpd_send_err (hc, 501, err501title.241, &""[0], err501form.240, D.7675);
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  D.7679 = &hc->sb;
  D.7671 = hc->expnfilename;
  D.7680 = stat (D.7671, D.7679);
  if (D.7680 < 0)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.7681 = hc->encodedurl;
  err500form.242 = err500form;
  err500title.243 = err500title;
  httpd_send_err (hc, 500, err500title.243, &""[0], err500form.242, D.7681);
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 6
  # PRED: 4 (false)
  D.7684 = hc->sb.st_mode;
  D.7685 = D.7684 & 5;
  if (D.7685 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  D.7681 = hc->encodedurl;
  D.7686 = &hc->client_addr;
  D.7687 = httpd_ntoa (D.7686);
  syslog (6, &"%.80s URL \"%.80s\" resolves to a non world-readable file"[0], D.7687, D.7681);
  D.7681 = hc->encodedurl;
  err403title.244 = err403title;
  httpd_send_err (hc, 403, err403title.244, &""[0], &"The requested URL \'%.80s\' resolves to a file that is not world-readable.\n"[0], D.7681);
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 8
  # PRED: 6 (false)
  D.7684 = hc->sb.st_mode;
  D.7689 = D.7684 & 61440;
  if (D.7689 == 16384)
    goto <bb 9>;
  else
    goto <bb 57>;
  # SUCC: 9 (true) 57 (false)

  # BLOCK 9
  # PRED: 8 (true)
  D.7690 = hc->pathinfo;
  D.7691 = *D.7690;
  if (D.7691 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;
  # SUCC: 10 (true) 11 (false)

  # BLOCK 10
  # PRED: 9 (true)
  D.7681 = hc->encodedurl;
  err404form.245 = err404form;
  err404title.246 = err404title;
  httpd_send_err (hc, 404, err404title.246, &""[0], err404form.245, D.7681);
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 11
  # PRED: 9 (false)
  __s2_len = 0;
  if (__s2_len <= 3)
    goto <bb 12>;
  else
    goto <bb 17>;
  # SUCC: 12 (true) 17 (false)

  # BLOCK 12
  # PRED: 11 (true)
  D.7695 = hc->origfilename;
  __s1 = (const unsigned char *) D.7695;
  D.7696 = *__s1;
  D.7697 = (int) D.7696;
  D.7698 = (const unsigned char *) "";
  D.7699 = *D.7698;
  D.7700 = (int) D.7699;
  __result = D.7697 - D.7700;
  D.7701 = __s2_len != 0;
  D.7702 = __result == 0;
  D.7703 = D.7701 && D.7702;
  if (D.7703)
    goto <bb 13>;
  else
    goto <bb 16>;
  # SUCC: 13 (true) 16 (false)

  # BLOCK 13
  # PRED: 12 (true)
  D.7704 = __s1 + 1;
  D.7705 = *D.7704;
  D.7706 = (int) D.7705;
  D.7707 = (const unsigned char *) &""[1];
  D.7708 = *D.7707;
  D.7709 = (int) D.7708;
  __result = D.7706 - D.7709;
  D.7710 = __s2_len > 1;
  D.7702 = __result == 0;
  D.7711 = D.7710 && D.7702;
  if (D.7711)
    goto <bb 14>;
  else
    goto <bb 16>;
  # SUCC: 14 (true) 16 (false)

  # BLOCK 14
  # PRED: 13 (true)
  D.7712 = __s1 + 2;
  D.7713 = *D.7712;
  D.7714 = (int) D.7713;
  D.7715 = (const unsigned char *) &""[2];
  D.7716 = *D.7715;
  D.7717 = (int) D.7716;
  __result = D.7714 - D.7717;
  D.7718 = __s2_len > 2;
  D.7702 = __result == 0;
  D.7719 = D.7718 && D.7702;
  if (D.7719)
    goto <bb 15>;
  else
    goto <bb 16>;
  # SUCC: 15 (true) 16 (false)

  # BLOCK 15
  # PRED: 14 (true)
  D.7720 = __s1 + 3;
  D.7721 = *D.7720;
  D.7722 = (int) D.7721;
  D.7723 = (const unsigned char *) &""[3];
  D.7724 = *D.7723;
  D.7725 = (int) D.7724;
  __result = D.7722 - D.7725;
  # SUCC: 16 (fallthru)

  # BLOCK 16
  # PRED: 12 (false) 13 (false) 14 (false) 15 (fallthru)
  D.7629 = __result;
  iftmp.247 = D.7629;
  goto <bb 18>;
  # SUCC: 18 (fallthru)

  # BLOCK 17
  # PRED: 11 (false)
  D.7695 = hc->origfilename;
  D.7726 = (const unsigned char * {ref-all}) D.7695;
  D.7727 = *D.7726;
  iftmp.247 = (int) D.7727;
  # SUCC: 18 (fallthru)

  # BLOCK 18
  # PRED: 16 (fallthru) 17 (fallthru)
  D.7630 = iftmp.247;
  if (D.7630 != 0)
    goto <bb 19>;
  else
    goto <bb 29>;
  # SUCC: 19 (true) 29 (false)

  # BLOCK 19
  # PRED: 18 (true)
  __s2_len = 1;
  if (__s2_len <= 3)
    goto <bb 20>;
  else
    goto <bb 25>;
  # SUCC: 20 (true) 25 (false)

  # BLOCK 20
  # PRED: 19 (true)
  D.7695 = hc->origfilename;
  __s1 = (const unsigned char *) D.7695;
  D.7729 = *__s1;
  D.7730 = (int) D.7729;
  D.7731 = (const unsigned char *) ".";
  D.7732 = *D.7731;
  D.7733 = (int) D.7732;
  __result = D.7730 - D.7733;
  D.7734 = __s2_len != 0;
  D.7735 = __result == 0;
  D.7736 = D.7734 && D.7735;
  if (D.7736)
    goto <bb 21>;
  else
    goto <bb 24>;
  # SUCC: 21 (true) 24 (false)

  # BLOCK 21
  # PRED: 20 (true)
  D.7737 = __s1 + 1;
  D.7738 = *D.7737;
  D.7739 = (int) D.7738;
  D.7740 = (const unsigned char *) &"."[1];
  D.7741 = *D.7740;
  D.7742 = (int) D.7741;
  __result = D.7739 - D.7742;
  D.7743 = __s2_len > 1;
  D.7735 = __result == 0;
  D.7744 = D.7743 && D.7735;
  if (D.7744)
    goto <bb 22>;
  else
    goto <bb 24>;
  # SUCC: 22 (true) 24 (false)

  # BLOCK 22
  # PRED: 21 (true)
  D.7745 = __s1 + 2;
  D.7746 = *D.7745;
  D.7747 = (int) D.7746;
  D.7748 = (const unsigned char *) &"."[2];
  D.7749 = *D.7748;
  D.7750 = (int) D.7749;
  __result = D.7747 - D.7750;
  D.7751 = __s2_len > 2;
  D.7735 = __result == 0;
  D.7752 = D.7751 && D.7735;
  if (D.7752)
    goto <bb 23>;
  else
    goto <bb 24>;
  # SUCC: 23 (true) 24 (false)

  # BLOCK 23
  # PRED: 22 (true)
  D.7753 = __s1 + 3;
  D.7754 = *D.7753;
  D.7755 = (int) D.7754;
  D.7756 = (const unsigned char *) &"."[3];
  D.7757 = *D.7756;
  D.7758 = (int) D.7757;
  __result = D.7755 - D.7758;
  # SUCC: 24 (fallthru)

  # BLOCK 24
  # PRED: 20 (false) 21 (false) 22 (false) 23 (fallthru)
  D.7638 = __result;
  iftmp.248 = D.7638;
  goto <bb 26>;
  # SUCC: 26 (fallthru)

  # BLOCK 25
  # PRED: 19 (false)
  D.7695 = hc->origfilename;
  iftmp.248 = __builtin_strcmp (D.7695, &"."[0]);
  # SUCC: 26 (fallthru)

  # BLOCK 26
  # PRED: 24 (fallthru) 25 (fallthru)
  D.7639 = iftmp.248;
  if (D.7639 != 0)
    goto <bb 27>;
  else
    goto <bb 29>;
  # SUCC: 27 (true) 29 (false)

  # BLOCK 27
  # PRED: 26 (true)
  D.7695 = hc->origfilename;
  D.7695 = hc->origfilename;
  D.7759 = strlen (D.7695);
  D.7760 = D.7759 + -1;
  D.7761 = D.7695 + D.7760;
  D.7762 = *D.7761;
  if (D.7762 != 47)
    goto <bb 28>;
  else
    goto <bb 29>;
  # SUCC: 28 (true) 29 (false)

  # BLOCK 28
  # PRED: 27 (true)
  send_dirredirect (hc);
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 29
  # PRED: 18 (false) 26 (false) 27 (false)
  i = 0;
  goto <bb 44>;
  # SUCC: 44 (fallthru)

  # BLOCK 30
  # PRED: 44 (true)
  i.249 = i;
  D.7764 = index_names[i.249];
  D.7765 = strlen (D.7764);
  D.7766 = D.7765 + expnlen;
  D.7767 = D.7766 + 1;
  httpd_realloc_str (&indexname, &maxindexname, D.7767);
  D.7671 = hc->expnfilename;
  indexname.250 = indexname;
  strcpy (indexname.250, D.7671);
  indexname.250 = indexname;
  indxlen = strlen (indexname.250);
  if (indxlen == 0)
    goto <bb 32>;
  else
    goto <bb 31>;
  # SUCC: 32 (true) 31 (false)

  # BLOCK 31
  # PRED: 30 (false)
  indexname.250 = indexname;
  D.7771 = indxlen + -1;
  D.7772 = indexname.250 + D.7771;
  D.7773 = *D.7772;
  if (D.7773 != 47)
    goto <bb 32>;
  else
    goto <bb 33>;
  # SUCC: 32 (true) 33 (false)

  # BLOCK 32
  # PRED: 30 (true) 31 (true)
  indexname.250 = indexname;
  strcat (indexname.250, &"/"[0]);
  # SUCC: 33 (fallthru)

  # BLOCK 33
  # PRED: 31 (false) 32 (fallthru)
  __s2_len = 2;
  if (__s2_len <= 3)
    goto <bb 34>;
  else
    goto <bb 39>;
  # SUCC: 34 (true) 39 (false)

  # BLOCK 34
  # PRED: 33 (true)
  indexname.250 = indexname;
  __s1 = (const unsigned char *) indexname.250;
  D.7775 = *__s1;
  D.7776 = (int) D.7775;
  D.7777 = (const unsigned char *) "./";
  D.7778 = *D.7777;
  D.7779 = (int) D.7778;
  __result = D.7776 - D.7779;
  D.7780 = __s2_len != 0;
  D.7781 = __result == 0;
  D.7782 = D.7780 && D.7781;
  if (D.7782)
    goto <bb 35>;
  else
    goto <bb 38>;
  # SUCC: 35 (true) 38 (false)

  # BLOCK 35
  # PRED: 34 (true)
  D.7783 = __s1 + 1;
  D.7784 = *D.7783;
  D.7785 = (int) D.7784;
  D.7786 = (const unsigned char *) &"./"[1];
  D.7787 = *D.7786;
  D.7788 = (int) D.7787;
  __result = D.7785 - D.7788;
  D.7789 = __s2_len > 1;
  D.7781 = __result == 0;
  D.7790 = D.7789 && D.7781;
  if (D.7790)
    goto <bb 36>;
  else
    goto <bb 38>;
  # SUCC: 36 (true) 38 (false)

  # BLOCK 36
  # PRED: 35 (true)
  D.7791 = __s1 + 2;
  D.7792 = *D.7791;
  D.7793 = (int) D.7792;
  D.7794 = (const unsigned char *) &"./"[2];
  D.7795 = *D.7794;
  D.7796 = (int) D.7795;
  __result = D.7793 - D.7796;
  D.7797 = __s2_len > 2;
  D.7781 = __result == 0;
  D.7798 = D.7797 && D.7781;
  if (D.7798)
    goto <bb 37>;
  else
    goto <bb 38>;
  # SUCC: 37 (true) 38 (false)

  # BLOCK 37
  # PRED: 36 (true)
  D.7799 = __s1 + 3;
  D.7800 = *D.7799;
  D.7801 = (int) D.7800;
  D.7777 = (const unsigned char *) "./";
  D.7802 = D.7777 + 3;
  D.7803 = *D.7802;
  D.7804 = (int) D.7803;
  __result = D.7801 - D.7804;
  # SUCC: 38 (fallthru)

  # BLOCK 38
  # PRED: 34 (false) 35 (false) 36 (false) 37 (fallthru)
  D.7647 = __result;
  iftmp.251 = D.7647;
  goto <bb 40>;
  # SUCC: 40 (fallthru)

  # BLOCK 39
  # PRED: 33 (false)
  indexname.250 = indexname;
  iftmp.251 = __builtin_strcmp (indexname.250, &"./"[0]);
  # SUCC: 40 (fallthru)

  # BLOCK 40
  # PRED: 38 (fallthru) 39 (fallthru)
  D.7648 = iftmp.251;
  if (D.7648 == 0)
    goto <bb 41>;
  else
    goto <bb 42>;
  # SUCC: 41 (true) 42 (false)

  # BLOCK 41
  # PRED: 40 (true)
  indexname.250 = indexname;
  *indexname.250 = 0;
  # SUCC: 42 (fallthru)

  # BLOCK 42
  # PRED: 40 (false) 41 (fallthru)
  i.249 = i;
  D.7764 = index_names[i.249];
  indexname.250 = indexname;
  strcat (indexname.250, D.7764);
  D.7679 = &hc->sb;
  indexname.250 = indexname;
  D.7805 = stat (indexname.250, D.7679);
  if (D.7805 >= 0)
    goto <bb 52> (got_one);
  else
    goto <bb 43>;
  # SUCC: 52 (true) 43 (false)

  # BLOCK 43
  # PRED: 42 (false)
  i = i + 1;
  # SUCC: 44 (fallthru)

  # BLOCK 44
  # PRED: 29 (fallthru) 43 (fallthru)
  i.252 = (unsigned int) i;
  if (i.252 <= 5)
    goto <bb 30>;
  else
    goto <bb 45>;
  # SUCC: 30 (true) 45 (false)

  # BLOCK 45
  # PRED: 44 (false)
  D.7684 = hc->sb.st_mode;
  D.7807 = D.7684 & 4;
  if (D.7807 == 0)
    goto <bb 46>;
  else
    goto <bb 47>;
  # SUCC: 46 (true) 47 (false)

  # BLOCK 46
  # PRED: 45 (true)
  D.7681 = hc->encodedurl;
  D.7686 = &hc->client_addr;
  D.7808 = httpd_ntoa (D.7686);
  syslog (6, &"%.80s URL \"%.80s\" tried to index a directory with indexing disabled"[0], D.7808, D.7681);
  D.7681 = hc->encodedurl;
  err403title.244 = err403title;
  httpd_send_err (hc, 403, err403title.244, &""[0], &"The requested URL \'%.80s\' resolves to a directory that has indexing disabled.\n"[0], D.7681);
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 47
  # PRED: 45 (false)
  D.7671 = hc->expnfilename;
  D.7809 = auth_check (hc, D.7671);
  if (D.7809 == -1)
    goto <bb 48>;
  else
    goto <bb 49>;
  # SUCC: 48 (true) 49 (false)

  # BLOCK 48
  # PRED: 47 (true)
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 49
  # PRED: 47 (false)
  D.7810 = check_referer (hc);
  if (D.7810 == 0)
    goto <bb 50>;
  else
    goto <bb 51>;
  # SUCC: 50 (true) 51 (false)

  # BLOCK 50
  # PRED: 49 (true)
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 51
  # PRED: 49 (false)
  D.7811 = ls (hc);
  D.7678 = D.7811;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 52
  # PRED: 42 (true)
got_one:;
  D.7812 = hc->tildemapped;
  D.7813 = hc->hs;
  D.7814 = D.7813->no_symlink_check;
  indexname.250 = indexname;
  cp.253 = expand_symlinks (indexname.250, &pi, D.7814, D.7812);
  cp = cp.253;
  if (cp == 0B)
    goto <bb 54>;
  else
    goto <bb 53>;
  # SUCC: 54 (true) 53 (false)

  # BLOCK 53
  # PRED: 52 (false)
  pi.254 = pi;
  D.7819 = *pi.254;
  if (D.7819 != 0)
    goto <bb 54>;
  else
    goto <bb 55>;
  # SUCC: 54 (true) 55 (false)

  # BLOCK 54
  # PRED: 52 (true) 53 (true)
  D.7681 = hc->encodedurl;
  err500form.242 = err500form;
  err500title.243 = err500title;
  httpd_send_err (hc, 500, err500title.243, &""[0], err500form.242, D.7681);
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 55
  # PRED: 53 (false)
  expnlen = strlen (cp);
  D.7820 = &hc->maxexpnfilename;
  D.7821 = &hc->expnfilename;
  httpd_realloc_str (D.7821, D.7820, expnlen);
  D.7671 = hc->expnfilename;
  strcpy (D.7671, cp);
  D.7684 = hc->sb.st_mode;
  D.7685 = D.7684 & 5;
  if (D.7685 == 0)
    goto <bb 56>;
  else
    goto <bb 57>;
  # SUCC: 56 (true) 57 (false)

  # BLOCK 56
  # PRED: 55 (true)
  D.7681 = hc->encodedurl;
  D.7686 = &hc->client_addr;
  D.7822 = httpd_ntoa (D.7686);
  syslog (6, &"%.80s URL \"%.80s\" resolves to a non-world-readable index file"[0], D.7822, D.7681);
  D.7681 = hc->encodedurl;
  err403title.244 = err403title;
  httpd_send_err (hc, 403, err403title.244, &""[0], &"The requested URL \'%.80s\' resolves to an index file that is not world-readable.\n"[0], D.7681);
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 57
  # PRED: 8 (false) 55 (false)
  httpd_realloc_str (&dirname, &maxdirname, expnlen);
  D.7671 = hc->expnfilename;
  dirname.255 = dirname;
  strcpy (dirname.255, D.7671);
  dirname.255 = dirname;
  cp = strrchr (dirname.255, 47);
  if (cp == 0B)
    goto <bb 58>;
  else
    goto <bb 59>;
  # SUCC: 58 (true) 59 (false)

  # BLOCK 58
  # PRED: 57 (true)
  dirname.255 = dirname;
  __builtin_memcpy (dirname.255, &"."[0], 2);
  goto <bb 60>;
  # SUCC: 60 (fallthru)

  # BLOCK 59
  # PRED: 57 (false)
  *cp = 0;
  # SUCC: 60 (fallthru)

  # BLOCK 60
  # PRED: 58 (fallthru) 59 (fallthru)
  dirname.255 = dirname;
  D.7824 = auth_check (hc, dirname.255);
  if (D.7824 == -1)
    goto <bb 61>;
  else
    goto <bb 62>;
  # SUCC: 61 (true) 62 (false)

  # BLOCK 61
  # PRED: 60 (true)
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 62
  # PRED: 60 (false)
  if (expnlen == 9)
    goto <bb 63>;
  else
    goto <bb 73>;
  # SUCC: 63 (true) 73 (false)

  # BLOCK 63
  # PRED: 62 (true)
  __s2_len = 9;
  if (__s2_len <= 3)
    goto <bb 64>;
  else
    goto <bb 69>;
  # SUCC: 64 (true) 69 (false)

  # BLOCK 64
  # PRED: 63 (true)
  D.7671 = hc->expnfilename;
  __s1 = (const unsigned char *) D.7671;
  D.7826 = *__s1;
  D.7827 = (int) D.7826;
  D.7828 = (const unsigned char *) ".htpasswd";
  D.7829 = *D.7828;
  D.7830 = (int) D.7829;
  __result = D.7827 - D.7830;
  D.7831 = __s2_len != 0;
  D.7832 = __result == 0;
  D.7833 = D.7831 && D.7832;
  if (D.7833)
    goto <bb 65>;
  else
    goto <bb 68>;
  # SUCC: 65 (true) 68 (false)

  # BLOCK 65
  # PRED: 64 (true)
  D.7834 = __s1 + 1;
  D.7835 = *D.7834;
  D.7836 = (int) D.7835;
  D.7837 = (const unsigned char *) &".htpasswd"[1];
  D.7838 = *D.7837;
  D.7839 = (int) D.7838;
  __result = D.7836 - D.7839;
  D.7840 = __s2_len > 1;
  D.7832 = __result == 0;
  D.7841 = D.7840 && D.7832;
  if (D.7841)
    goto <bb 66>;
  else
    goto <bb 68>;
  # SUCC: 66 (true) 68 (false)

  # BLOCK 66
  # PRED: 65 (true)
  D.7842 = __s1 + 2;
  D.7843 = *D.7842;
  D.7844 = (int) D.7843;
  D.7845 = (const unsigned char *) &".htpasswd"[2];
  D.7846 = *D.7845;
  D.7847 = (int) D.7846;
  __result = D.7844 - D.7847;
  D.7848 = __s2_len > 2;
  D.7832 = __result == 0;
  D.7849 = D.7848 && D.7832;
  if (D.7849)
    goto <bb 67>;
  else
    goto <bb 68>;
  # SUCC: 67 (true) 68 (false)

  # BLOCK 67
  # PRED: 66 (true)
  D.7850 = __s1 + 3;
  D.7851 = *D.7850;
  D.7852 = (int) D.7851;
  D.7853 = (const unsigned char *) &".htpasswd"[3];
  D.7854 = *D.7853;
  D.7855 = (int) D.7854;
  __result = D.7852 - D.7855;
  # SUCC: 68 (fallthru)

  # BLOCK 68
  # PRED: 64 (false) 65 (false) 66 (false) 67 (fallthru)
  D.7660 = __result;
  iftmp.256 = D.7660;
  goto <bb 70>;
  # SUCC: 70 (fallthru)

  # BLOCK 69
  # PRED: 63 (false)
  D.7671 = hc->expnfilename;
  iftmp.256 = __builtin_strcmp (D.7671, &".htpasswd"[0]);
  # SUCC: 70 (fallthru)

  # BLOCK 70
  # PRED: 68 (fallthru) 69 (fallthru)
  D.7661 = iftmp.256;
  if (D.7661 == 0)
    goto <bb 71>;
  else
    goto <bb 72>;
  # SUCC: 71 (true) 72 (false)

  # BLOCK 71
  # PRED: 70 (true)
  D.7681 = hc->encodedurl;
  D.7686 = &hc->client_addr;
  D.7856 = httpd_ntoa (D.7686);
  syslog (5, &"%.80s URL \"%.80s\" tried to retrieve an auth file"[0], D.7856, D.7681);
  D.7681 = hc->encodedurl;
  err403title.244 = err403title;
  httpd_send_err (hc, 403, err403title.244, &""[0], &"The requested URL \'%.80s\' is an authorization file, retrieving it is not permitted.\n"[0], D.7681);
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 72
  # PRED: 70 (false)
  goto <bb 84>;
  # SUCC: 84 (fallthru)

  # BLOCK 73
  # PRED: 62 (false)
  if (expnlen > 9)
    goto <bb 74>;
  else
    goto <bb 84>;
  # SUCC: 74 (true) 84 (false)

  # BLOCK 74
  # PRED: 73 (true)
  __s2_len = 9;
  if (__s2_len <= 3)
    goto <bb 75>;
  else
    goto <bb 80>;
  # SUCC: 75 (true) 80 (false)

  # BLOCK 75
  # PRED: 74 (true)
  D.7671 = hc->expnfilename;
  D.7858 = expnlen + -9;
  D.7859 = D.7671 + D.7858;
  __s1 = (const unsigned char *) D.7859;
  D.7860 = *__s1;
  D.7861 = (int) D.7860;
  D.7828 = (const unsigned char *) ".htpasswd";
  D.7829 = *D.7828;
  D.7830 = (int) D.7829;
  __result = D.7861 - D.7830;
  D.7862 = __s2_len != 0;
  D.7863 = __result == 0;
  D.7864 = D.7862 && D.7863;
  if (D.7864)
    goto <bb 76>;
  else
    goto <bb 79>;
  # SUCC: 76 (true) 79 (false)

  # BLOCK 76
  # PRED: 75 (true)
  D.7865 = __s1 + 1;
  D.7866 = *D.7865;
  D.7867 = (int) D.7866;
  D.7837 = (const unsigned char *) &".htpasswd"[1];
  D.7838 = *D.7837;
  D.7839 = (int) D.7838;
  __result = D.7867 - D.7839;
  D.7868 = __s2_len > 1;
  D.7863 = __result == 0;
  D.7869 = D.7868 && D.7863;
  if (D.7869)
    goto <bb 77>;
  else
    goto <bb 79>;
  # SUCC: 77 (true) 79 (false)

  # BLOCK 77
  # PRED: 76 (true)
  D.7870 = __s1 + 2;
  D.7871 = *D.7870;
  D.7872 = (int) D.7871;
  D.7845 = (const unsigned char *) &".htpasswd"[2];
  D.7846 = *D.7845;
  D.7847 = (int) D.7846;
  __result = D.7872 - D.7847;
  D.7873 = __s2_len > 2;
  D.7863 = __result == 0;
  D.7874 = D.7873 && D.7863;
  if (D.7874)
    goto <bb 78>;
  else
    goto <bb 79>;
  # SUCC: 78 (true) 79 (false)

  # BLOCK 78
  # PRED: 77 (true)
  D.7875 = __s1 + 3;
  D.7876 = *D.7875;
  D.7877 = (int) D.7876;
  D.7853 = (const unsigned char *) &".htpasswd"[3];
  D.7854 = *D.7853;
  D.7855 = (int) D.7854;
  __result = D.7877 - D.7855;
  # SUCC: 79 (fallthru)

  # BLOCK 79
  # PRED: 75 (false) 76 (false) 77 (false) 78 (fallthru)
  D.7669 = __result;
  iftmp.257 = D.7669;
  goto <bb 81>;
  # SUCC: 81 (fallthru)

  # BLOCK 80
  # PRED: 74 (false)
  D.7671 = hc->expnfilename;
  D.7858 = expnlen + -9;
  D.7859 = D.7671 + D.7858;
  iftmp.257 = __builtin_strcmp (D.7859, &".htpasswd"[0]);
  # SUCC: 81 (fallthru)

  # BLOCK 81
  # PRED: 79 (fallthru) 80 (fallthru)
  D.7670 = iftmp.257;
  if (D.7670 == 0)
    goto <bb 82>;
  else
    goto <bb 84>;
  # SUCC: 82 (true) 84 (false)

  # BLOCK 82
  # PRED: 81 (true)
  D.7671 = hc->expnfilename;
  D.7878 = expnlen + -10;
  D.7879 = D.7671 + D.7878;
  D.7880 = *D.7879;
  if (D.7880 == 47)
    goto <bb 83>;
  else
    goto <bb 84>;
  # SUCC: 83 (true) 84 (false)

  # BLOCK 83
  # PRED: 82 (true)
  D.7681 = hc->encodedurl;
  D.7686 = &hc->client_addr;
  D.7881 = httpd_ntoa (D.7686);
  syslog (5, &"%.80s URL \"%.80s\" tried to retrieve an auth file"[0], D.7881, D.7681);
  D.7681 = hc->encodedurl;
  err403title.244 = err403title;
  httpd_send_err (hc, 403, err403title.244, &""[0], &"The requested URL \'%.80s\' is an authorization file, retrieving it is not permitted.\n"[0], D.7681);
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 84
  # PRED: 72 (fallthru) 73 (false) 81 (false) 82 (false)
  D.7882 = check_referer (hc);
  if (D.7882 == 0)
    goto <bb 85>;
  else
    goto <bb 86>;
  # SUCC: 85 (true) 86 (false)

  # BLOCK 85
  # PRED: 84 (true)
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 86
  # PRED: 84 (false)
  D.7813 = hc->hs;
  D.7883 = D.7813->cgi_pattern;
  if (D.7883 != 0B)
    goto <bb 87>;
  else
    goto <bb 90>;
  # SUCC: 87 (true) 90 (false)

  # BLOCK 87
  # PRED: 86 (true)
  D.7684 = hc->sb.st_mode;
  D.7884 = (int) D.7684;
  D.7885 = D.7884 & 1;
  D.7886 = (_Bool) D.7885;
  if (D.7886)
    goto <bb 88>;
  else
    goto <bb 90>;
  # SUCC: 88 (true) 90 (false)

  # BLOCK 88
  # PRED: 87 (true)
  D.7671 = hc->expnfilename;
  D.7813 = hc->hs;
  D.7883 = D.7813->cgi_pattern;
  D.7887 = match (D.7883, D.7671);
  if (D.7887 != 0)
    goto <bb 89>;
  else
    goto <bb 90>;
  # SUCC: 89 (true) 90 (false)

  # BLOCK 89
  # PRED: 88 (true)
  D.7888 = cgi (hc);
  D.7678 = D.7888;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 90
  # PRED: 86 (false) 87 (false) 88 (false)
  D.7684 = hc->sb.st_mode;
  D.7884 = (int) D.7684;
  D.7885 = D.7884 & 1;
  D.7886 = (_Bool) D.7885;
  if (D.7886)
    goto <bb 91>;
  else
    goto <bb 92>;
  # SUCC: 91 (true) 92 (false)

  # BLOCK 91
  # PRED: 90 (true)
  D.7681 = hc->encodedurl;
  D.7686 = &hc->client_addr;
  D.7889 = httpd_ntoa (D.7686);
  syslog (5, &"%.80s URL \"%.80s\" is executable but isn\'t CGI"[0], D.7889, D.7681);
  D.7681 = hc->encodedurl;
  err403title.244 = err403title;
  httpd_send_err (hc, 403, err403title.244, &""[0], &"The requested URL \'%.80s\' resolves to a file which is marked executable but is not a CGI file; retrieving it is forbidden.\n"[0], D.7681);
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 92
  # PRED: 90 (false)
  D.7690 = hc->pathinfo;
  D.7691 = *D.7690;
  if (D.7691 != 0)
    goto <bb 93>;
  else
    goto <bb 94>;
  # SUCC: 93 (true) 94 (false)

  # BLOCK 93
  # PRED: 92 (true)
  D.7681 = hc->encodedurl;
  D.7686 = &hc->client_addr;
  D.7890 = httpd_ntoa (D.7686);
  syslog (6, &"%.80s URL \"%.80s\" has pathinfo but isn\'t CGI"[0], D.7890, D.7681);
  D.7681 = hc->encodedurl;
  err403title.244 = err403title;
  httpd_send_err (hc, 403, err403title.244, &""[0], &"The requested URL \'%.80s\' resolves to a file plus CGI-style pathinfo, but the file is not a valid CGI file.\n"[0], D.7681);
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 94
  # PRED: 92 (false)
  D.7893 = hc->got_range;
  if (D.7893 != 0)
    goto <bb 95>;
  else
    goto <bb 98>;
  # SUCC: 95 (true) 98 (false)

  # BLOCK 95
  # PRED: 94 (true)
  D.7894 = hc->last_byte_index;
  if (D.7894 == -1)
    goto <bb 97>;
  else
    goto <bb 96>;
  # SUCC: 97 (true) 96 (false)

  # BLOCK 96
  # PRED: 95 (false)
  D.7894 = hc->last_byte_index;
  D.7895 = hc->sb.st_size;
  if (D.7894 >= D.7895)
    goto <bb 97>;
  else
    goto <bb 98>;
  # SUCC: 97 (true) 98 (false)

  # BLOCK 97
  # PRED: 95 (true) 96 (true)
  D.7895 = hc->sb.st_size;
  D.7896 = D.7895 + -1;
  hc->last_byte_index = D.7896;
  # SUCC: 98 (fallthru)

  # BLOCK 98
  # PRED: 94 (false) 96 (false) 97 (fallthru)
  figure_mime (hc);
  D.7672 = hc->method;
  if (D.7672 == 2)
    goto <bb 99>;
  else
    goto <bb 100>;
  # SUCC: 99 (true) 100 (false)

  # BLOCK 99
  # PRED: 98 (true)
  D.7897 = hc->sb.st_mtim.tv_sec;
  D.7895 = hc->sb.st_size;
  D.7898 = hc->type;
  D.7899 = hc->encodings;
  ok200title.258 = ok200title;
  send_mime (hc, 200, ok200title.258, D.7899, &""[0], D.7898, D.7895, D.7897);
  goto <bb 106>;
  # SUCC: 106 (fallthru)

  # BLOCK 100
  # PRED: 98 (false)
  D.7903 = hc->if_modified_since;
  if (D.7903 == -1)
    goto <bb 103>;
  else
    goto <bb 101>;
  # SUCC: 103 (true) 101 (false)

  # BLOCK 101
  # PRED: 100 (false)
  D.7903 = hc->if_modified_since;
  D.7897 = hc->sb.st_mtim.tv_sec;
  if (D.7903 < D.7897)
    goto <bb 103>;
  else
    goto <bb 102>;
  # SUCC: 103 (true) 102 (false)

  # BLOCK 102
  # PRED: 101 (false)
  D.7897 = hc->sb.st_mtim.tv_sec;
  D.7898 = hc->type;
  D.7899 = hc->encodings;
  err304title.259 = err304title;
  send_mime (hc, 304, err304title.259, D.7899, &""[0], D.7898, -1, D.7897);
  goto <bb 106>;
  # SUCC: 106 (fallthru)

  # BLOCK 103
  # PRED: 100 (true) 101 (true)
  D.7679 = &hc->sb;
  D.7671 = hc->expnfilename;
  D.7905 = mmc_map (D.7671, D.7679, nowP);
  D.7906 = (char *) D.7905;
  hc->file_address = D.7906;
  D.7907 = hc->file_address;
  if (D.7907 == 0B)
    goto <bb 104>;
  else
    goto <bb 105>;
  # SUCC: 104 (true) 105 (false)

  # BLOCK 104
  # PRED: 103 (true)
  D.7681 = hc->encodedurl;
  err500form.242 = err500form;
  err500title.243 = err500title;
  httpd_send_err (hc, 500, err500title.243, &""[0], err500form.242, D.7681);
  D.7678 = -1;
  goto <bb 107>;
  # SUCC: 107 (fallthru)

  # BLOCK 105
  # PRED: 103 (false)
  D.7897 = hc->sb.st_mtim.tv_sec;
  D.7895 = hc->sb.st_size;
  D.7898 = hc->type;
  D.7899 = hc->encodings;
  ok200title.258 = ok200title;
  send_mime (hc, 200, ok200title.258, D.7899, &""[0], D.7898, D.7895, D.7897);
  # SUCC: 106 (fallthru)

  # BLOCK 106
  # PRED: 99 (fallthru) 102 (fallthru) 105 (fallthru)
  D.7678 = 0;
  # SUCC: 107 (fallthru)

  # BLOCK 107
  # PRED: 3 (fallthru) 5 (fallthru) 7 (fallthru) 10 (fallthru) 28 (fallthru) 46 (fallthru) 48 (fallthru) 50 (fallthru) 51 (fallthru) 54 (fallthru) 56 (fallthru) 61 (fallthru) 71 (fallthru) 83 (fallthru) 85 (fallthru) 89 (fallthru) 91 (fallthru) 93 (fallthru) 104 (fallthru) 106 (fallthru)
  return D.7678;
  # SUCC: EXIT

}


Removing basic block 72

;; Function send_dirredirect (send_dirredirect)

send_dirredirect (hc)
{
  char * cp;
  static char headstr[11] = "Location: ";
  static size_t maxheader = 0;
  static size_t maxlocation = 0;
  static char * header;
  static char * location;
  char * err302title.65;
  char * err302form.64;
  char * header.63;
  long unsigned int maxheader.62;
  long unsigned int D.5792;
  long unsigned int D.5791;
  long unsigned int D.5790;
  long unsigned int D.5789;
  char * location.61;
  long unsigned int maxlocation.60;
  long unsigned int D.5786;
  long unsigned int D.5785;
  long unsigned int D.5784;
  long unsigned int D.5783;
  char * D.5782;
  char D.5781;
  char * D.5780;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.5780 = hc->query;
  D.5781 = *D.5780;
  if (D.5781 != 0)
    goto <bb 3>;
  else
    goto <bb 6>;
  # SUCC: 3 (true) 6 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5782 = hc->encodedurl;
  cp = __builtin_strchr (D.5782, 63);
  if (cp != 0B)
    goto <bb 4>;
  else
    goto <bb 5>;
  # SUCC: 4 (true) 5 (false)

  # BLOCK 4
  # PRED: 3 (true)
  *cp = 0;
  # SUCC: 5 (fallthru)

  # BLOCK 5
  # PRED: 3 (false) 4 (fallthru)
  D.5782 = hc->encodedurl;
  D.5783 = strlen (D.5782);
  D.5780 = hc->query;
  D.5784 = strlen (D.5780);
  D.5785 = D.5783 + D.5784;
  D.5786 = D.5785 + 2;
  httpd_realloc_str (&location, &maxlocation, D.5786);
  D.5780 = hc->query;
  D.5782 = hc->encodedurl;
  maxlocation.60 = maxlocation;
  location.61 = location;
  my_snprintf (location.61, maxlocation.60, &"%s/?%s"[0], D.5782, D.5780);
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 6
  # PRED: 2 (false)
  D.5782 = hc->encodedurl;
  D.5789 = strlen (D.5782);
  D.5790 = D.5789 + 1;
  httpd_realloc_str (&location, &maxlocation, D.5790);
  D.5782 = hc->encodedurl;
  maxlocation.60 = maxlocation;
  location.61 = location;
  my_snprintf (location.61, maxlocation.60, &"%s/"[0], D.5782);
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 5 (fallthru) 6 (fallthru)
  location.61 = location;
  D.5791 = strlen (location.61);
  D.5792 = D.5791 + 11;
  httpd_realloc_str (&header, &maxheader, D.5792);
  location.61 = location;
  maxheader.62 = maxheader;
  header.63 = header;
  my_snprintf (header.63, maxheader.62, &"%s%s\r\n"[0], &headstr, location.61);
  location.61 = location;
  err302form.64 = err302form;
  header.63 = header;
  err302title.65 = err302title;
  send_response (hc, 302, err302title.65, header.63, err302form.64, location.61);
  return;
  # SUCC: EXIT

}



;; Function my_snprintf (my_snprintf)

my_snprintf (str, size, format)
{
  int r;
  struct  ap[1];
  int D.8108;
  int r.272;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  __builtin_va_start (&ap, 0);
  r.272 = vsnprintf (str, size, format, &ap);
  r = r.272;
  __builtin_va_end (&ap);
  D.8108 = r;
  # SUCC: 3 (fallthru)

  # BLOCK 3
  # PRED: 2 (fallthru)
  return D.8108;
  # SUCC: EXIT

}


Merging blocks 2 and 3

;; Function send_response (send_response)

send_response (hc, status, title, extraheads, form, arg)
{
  int n;
  char buf[2000];
  char defanged_arg[1000];
  int D.5521;
  char * D.5520;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  send_mime (hc, status, title, &""[0], extraheads, &"text/html; charset=%s"[0], -1, 0);
  my_snprintf (&buf, 2000, &"<HTML>\n<HEAD><TITLE>%d %s</TITLE></HEAD>\n<BODY BGCOLOR=\"#cc9999\" TEXT=\"#000000\" LINK=\"#2020ff\" VLINK=\"#4040cc\">\n<H2>%d %s</H2>\n"[0], status, title, status, title);
  add_response (hc, &buf);
  defang (arg, &defanged_arg, 1000);
  my_snprintf (&buf, 2000, form, &defanged_arg);
  add_response (hc, &buf);
  D.5520 = hc->useragent;
  D.5521 = match (&"**MSIE**"[0], D.5520);
  if (D.5521 != 0)
    goto <bb 3>;
  else
    goto <bb 7>;
  # SUCC: 3 (true) 7 (false)

  # BLOCK 3
  # PRED: 2 (true)
  add_response (hc, &"<!--\n"[0]);
  n = 0;
  goto <bb 5>;
  # SUCC: 5 (fallthru)

  # BLOCK 4
  # PRED: 5 (true)
  add_response (hc, &"Padding so that MSIE deigns to show this error instead of its own canned one.\n"[0]);
  n = n + 1;
  # SUCC: 5 (fallthru)

  # BLOCK 5
  # PRED: 3 (fallthru) 4 (fallthru)
  if (n <= 5)
    goto <bb 4>;
  else
    goto <bb 6>;
  # SUCC: 4 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  add_response (hc, &"-->\n"[0]);
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 2 (false) 6 (fallthru)
  send_response_tail (hc);
  return;
  # SUCC: EXIT

}



;; Function defang (defang)

defang (str, dfstr, dfsize)
{
  char * cp2;
  char * cp1;
  long int D.5546;
  int D.5545;
  long int D.5544;
  long int dfstr.39;
  long int cp2.38;
  int D.5541;
  char D.5540;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  cp1 = str;
  cp2 = dfstr;
  goto <bb 8>;
  # SUCC: 8 (fallthru)

  # BLOCK 3
  # PRED: 9 (true)
  D.5540 = *cp1;
  D.5541 = (int) D.5540;
  switch (D.5541)
    {
      case 60: goto <L1>;
      case 62: goto <L2>;
      default : goto <L3>;
    }
  # SUCC: 4 5 6

  # BLOCK 4
  # PRED: 3
<L1>:;
  *cp2 = 38;
  cp2 = cp2 + 1;
  *cp2 = 108;
  cp2 = cp2 + 1;
  *cp2 = 116;
  cp2 = cp2 + 1;
  *cp2 = 59;
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 5
  # PRED: 3
<L2>:;
  *cp2 = 38;
  cp2 = cp2 + 1;
  *cp2 = 103;
  cp2 = cp2 + 1;
  *cp2 = 116;
  cp2 = cp2 + 1;
  *cp2 = 59;
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 6
  # PRED: 3
<L3>:;
  D.5540 = *cp1;
  *cp2 = D.5540;
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 4 (fallthru) 5 (fallthru) 6 (fallthru)
  cp1 = cp1 + 1;
  cp2 = cp2 + 1;
  # SUCC: 8 (fallthru)

  # BLOCK 8
  # PRED: 2 (fallthru) 7 (fallthru)
  D.5540 = *cp1;
  if (D.5540 == 0)
    goto <bb 10>;
  else
    goto <bb 9>;
  # SUCC: 10 (true) 9 (false)

  # BLOCK 9
  # PRED: 8 (false)
  cp2.38 = (long int) cp2;
  dfstr.39 = (long int) dfstr;
  D.5544 = cp2.38 - dfstr.39;
  D.5545 = dfsize + -5;
  D.5546 = (long int) D.5545;
  if (D.5544 < D.5546)
    goto <bb 3>;
  else
    goto <bb 10>;
  # SUCC: 3 (true) 10 (false)

  # BLOCK 10
  # PRED: 8 (true) 9 (false)
  *cp2 = 0;
  return;
  # SUCC: EXIT

}



;; Function add_response (add_response)

add_response (hc, str)
{
  size_t len;
  void * D.5410;
  char * D.5409;
  char * * D.5408;
  size_t * D.5407;
  long unsigned int D.5406;
  long unsigned int D.5405;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  len = strlen (str);
  D.5405 = hc->responselen;
  D.5406 = D.5405 + len;
  D.5407 = &hc->maxresponse;
  D.5408 = &hc->response;
  httpd_realloc_str (D.5408, D.5407, D.5406);
  D.5409 = hc->response;
  D.5405 = hc->responselen;
  D.5410 = D.5409 + D.5405;
  memmove (D.5410, str, len);
  D.5405 = hc->responselen;
  D.5406 = D.5405 + len;
  hc->responselen = D.5406;
  return;
  # SUCC: EXIT

}



;; Function send_response_tail (send_response_tail)

send_response_tail (hc)
{
  char buf[1000];

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  my_snprintf (&buf, 1000, &"<HR>\n<ADDRESS><A HREF=\"%s\">%s</A></ADDRESS>\n</BODY>\n</HTML>\n"[0], &"http://www.acme.com/software/thttpd/"[0], &"thttpd/2.25b 29dec2003"[0]);
  add_response (hc, &buf);
  return;
  # SUCC: EXIT

}



;; Function stat (stat)

stat (__path, __statbuf)
{
  int D.1866;
  int D.1865;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.1866 = __xstat (1, __path, __statbuf);
  D.1865 = D.1866;
  # SUCC: 3 (fallthru)

  # BLOCK 3
  # PRED: 2 (fallthru)
  return D.1865;
  # SUCC: EXIT

}


Merging blocks 2 and 3

;; Function ls (ls)

ls (hc)
{
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  size_t __s1_len;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  size_t __s1_len;
  union ClientData client_data;
  char * timestr;
  time_t now;
  char * fileclass;
  int linklen;
  char link[4097];
  char * linkprefix;
  char modestr[20];
  struct stat lsb;
  struct stat sb;
  int r;
  int i;
  struct FILE * fp;
  static size_t maxencrname = 0;
  static char * encrname;
  static size_t maxrname = 0;
  static char * rname;
  static size_t maxname = 0;
  static char * name;
  static char * * nameptrs;
  static char * names;
  int nnames;
  static int maxnames = 0;
  int namlen;
  struct dirent * de;
  struct DIR * dirp;
  char * err501title.205;
  char * err501form.204;
  char * D.7223;
  struct Timer * D.7222;
  long int D.7221;
  long unsigned int D.7220;
  long int D.7219;
  char * const iftmp.203;
  _Bool D.7217;
  int D.7216;
  int D.7215;
  char * const iftmp.202;
  unsigned int D.7213;
  unsigned int D.7212;
  char D.7211;
  char * D.7210;
  char D.7209;
  char * D.7208;
  char D.7207;
  char * D.7206;
  char D.7205;
  char D.7204;
  char * D.7203;
  char * D.7202;
  char D.7201;
  char * D.7200;
  char * D.7199;
  char D.7198;
  char * D.7197;
  char D.7196;
  char * D.7195;
  char * D.7194;
  long int D.7193;
  long int D.7192;
  char D.7191;
  char * D.7190;
  char D.7189;
  char * D.7188;
  char * D.7187;
  char D.7186;
  char * D.7185;
  char * D.7184;
  char D.7183;
  char * D.7182;
  char * D.7181;
  char D.7180;
  char * D.7179;
  char * timestr.201;
  long int now.200;
  _Bool D.7176;
  int D.7175;
  int D.7174;
  char iftmp.199;
  unsigned int D.7172;
  char iftmp.198;
  unsigned int D.7170;
  char iftmp.197;
  int linklen.196;
  long int D.7167;
  unsigned int D.7166;
  unsigned int D.7165;
  int D.7164;
  int D.7163;
  char * encrname.195;
  int D.7161;
  long unsigned int maxencrname.194;
  long unsigned int D.7159;
  long unsigned int D.7158;
  long unsigned int D.7157;
  long unsigned int maxrname.193;
  int D.7155;
  unsigned char D.7154;
  const unsigned char * D.7153;
  _Bool D.7152;
  _Bool D.7151;
  int D.7150;
  unsigned char D.7149;
  const unsigned char * D.7148;
  _Bool D.7147;
  _Bool D.7146;
  int D.7145;
  unsigned char D.7144;
  const unsigned char * D.7143;
  _Bool D.7142;
  _Bool D.7141;
  _Bool D.7140;
  int D.7139;
  unsigned char D.7138;
  int D.7014;
  int iftmp.192;
  int D.7015;
  long unsigned int maxname.191;
  char * rname.190;
  char * name.189;
  int D.7133;
  unsigned char D.7132;
  const unsigned char * D.7131;
  int D.7130;
  unsigned char D.7129;
  const unsigned char * D.7128;
  _Bool D.7127;
  _Bool D.7126;
  int D.7125;
  unsigned char D.7124;
  const unsigned char * D.7123;
  int D.7122;
  unsigned char D.7121;
  const unsigned char * D.7120;
  _Bool D.7119;
  _Bool D.7118;
  int D.7117;
  unsigned char D.7116;
  const unsigned char * D.7115;
  int D.7114;
  unsigned char D.7113;
  const unsigned char * D.7112;
  _Bool D.7111;
  _Bool D.7110;
  _Bool D.7109;
  int D.7108;
  unsigned char D.7107;
  const unsigned char * D.7106;
  int D.7105;
  unsigned char D.7104;
  int D.7005;
  int iftmp.188;
  int D.7006;
  char D.7102;
  long unsigned int D.7098;
  long unsigned int D.7097;
  long unsigned int D.7096;
  long unsigned int D.7095;
  char * D.7094;
  long unsigned int D.7093;
  long unsigned int D.7092;
  long unsigned int D.7091;
  char * D.7090;
  long unsigned int D.7089;
  long unsigned int D.7088;
  int (*<T92d>) (const void *, const void *) name_compare.187;
  struct dirent * de.186;
  char * D.7085;
  char * D.7084;
  char * * D.7083;
  long unsigned int D.7082;
  long unsigned int D.7081;
  long unsigned int D.7080;
  long unsigned int D.7079;
  char * D.7078;
  char * D.7077;
  long unsigned int D.7076;
  int D.7075;
  char * * D.7074;
  long unsigned int D.7073;
  long unsigned int D.7072;
  char * * nameptrs.185;
  void * D.7068;
  char * * nameptrs.184;
  char * names.183;
  void * D.7065;
  char * names.182;
  int maxnames.181;
  char * * nameptrs.180;
  void * D.7061;
  long unsigned int D.7060;
  long unsigned int D.7059;
  char * names.179;
  void * D.7057;
  long unsigned int D.7056;
  int D.7055;
  int maxnames.178;
  struct FILE * fp.177;
  int D.7052;
  char * err500title.176;
  char * err500form.175;
  int r.174;
  int D.7048;
  char * httpd_err503title.173;
  char * httpd_err503form.172;
  int D.7045;
  int D.7044;
  struct httpd_server * D.7043;
  char * ok200title.171;
  long int D.7041;
  int D.7040;
  int D.7039;
  char * err404title.170;
  char * err404form.169;
  char * D.7036;
  struct DIR * dirp.168;
  char * D.7034;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.7034 = hc->expnfilename;
  dirp.168 = opendir (D.7034);
  dirp = dirp.168;
  if (dirp == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.7034 = hc->expnfilename;
  syslog (3, &"opendir %.80s - %m"[0], D.7034);
  D.7036 = hc->encodedurl;
  err404form.169 = err404form;
  err404title.170 = err404title;
  httpd_send_err (hc, 404, err404title.170, &""[0], err404form.169, D.7036);
  D.7039 = -1;
  goto <bb 94>;
  # SUCC: 94 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  D.7040 = hc->method;
  if (D.7040 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  closedir (dirp);
  D.7041 = hc->sb.st_mtim.tv_sec;
  ok200title.171 = ok200title;
  send_mime (hc, 200, ok200title.171, &""[0], &""[0], &"text/html; charset=%s"[0], -1, D.7041);
  goto <bb 93>;
  # SUCC: 93 (fallthru)

  # BLOCK 6
  # PRED: 4 (false)
  D.7040 = hc->method;
  if (D.7040 == 1)
    goto <bb 7>;
  else
    goto <bb 92>;
  # SUCC: 7 (true) 92 (false)

  # BLOCK 7
  # PRED: 6 (true)
  D.7043 = hc->hs;
  D.7044 = D.7043->cgi_limit;
  if (D.7044 != 0)
    goto <bb 8>;
  else
    goto <bb 10>;
  # SUCC: 8 (true) 10 (false)

  # BLOCK 8
  # PRED: 7 (true)
  D.7043 = hc->hs;
  D.7045 = D.7043->cgi_count;
  D.7043 = hc->hs;
  D.7044 = D.7043->cgi_limit;
  if (D.7045 >= D.7044)
    goto <bb 9>;
  else
    goto <bb 10>;
  # SUCC: 9 (true) 10 (false)

  # BLOCK 9
  # PRED: 8 (true)
  closedir (dirp);
  D.7036 = hc->encodedurl;
  httpd_err503form.172 = httpd_err503form;
  httpd_err503title.173 = httpd_err503title;
  httpd_send_err (hc, 503, httpd_err503title.173, &""[0], httpd_err503form.172, D.7036);
  D.7039 = -1;
  goto <bb 94>;
  # SUCC: 94 (fallthru)

  # BLOCK 10
  # PRED: 7 (false) 8 (false)
  D.7043 = hc->hs;
  D.7045 = D.7043->cgi_count;
  D.7048 = D.7045 + 1;
  D.7043->cgi_count = D.7048;
  r.174 = fork ();
  r = r.174;
  if (r < 0)
    goto <bb 11>;
  else
    goto <bb 12>;
  # SUCC: 11 (true) 12 (false)

  # BLOCK 11
  # PRED: 10 (true)
  syslog (3, &"fork - %m"[0]);
  closedir (dirp);
  D.7036 = hc->encodedurl;
  err500form.175 = err500form;
  err500title.176 = err500title;
  httpd_send_err (hc, 500, err500title.176, &""[0], err500form.175, D.7036);
  D.7039 = -1;
  goto <bb 94>;
  # SUCC: 94 (fallthru)

  # BLOCK 12
  # PRED: 10 (false)
  if (r == 0)
    goto <bb 13>;
  else
    goto <bb 89>;
  # SUCC: 13 (true) 89 (false)

  # BLOCK 13
  # PRED: 12 (true)
  sub_process = 1;
  D.7043 = hc->hs;
  httpd_unlisten (D.7043);
  D.7041 = hc->sb.st_mtim.tv_sec;
  ok200title.171 = ok200title;
  send_mime (hc, 200, ok200title.171, &""[0], &""[0], &"text/html; charset=%s"[0], -1, D.7041);
  httpd_write_response (hc);
  nice (10);
  D.7052 = hc->conn_fd;
  fp.177 = fdopen (D.7052, &"w"[0]);
  fp = fp.177;
  if (fp == 0B)
    goto <bb 14>;
  else
    goto <bb 15>;
  # SUCC: 14 (true) 15 (false)

  # BLOCK 14
  # PRED: 13 (true)
  syslog (3, &"fdopen - %m"[0]);
  D.7036 = hc->encodedurl;
  err500form.175 = err500form;
  err500title.176 = err500title;
  httpd_send_err (hc, 500, err500title.176, &""[0], err500form.175, D.7036);
  httpd_write_response (hc);
  closedir (dirp);
  exit (1);
  # SUCC:

  # BLOCK 15
  # PRED: 13 (false)
  D.7036 = hc->encodedurl;
  D.7036 = hc->encodedurl;
  fprintf (fp, &"<HTML>\n<HEAD><TITLE>Index of %.80s</TITLE></HEAD>\n<BODY BGCOLOR=\"#99cc99\" TEXT=\"#000000\" LINK=\"#2020ff\" VLINK=\"#4040cc\">\n<H2>Index of %.80s</H2>\n<PRE>\nmode  links  bytes  last-changed  name\n<HR>"[0], D.7036, D.7036);
  nnames = 0;
  goto <bb 27>;
  # SUCC: 27 (fallthru)

  # BLOCK 16
  # PRED: 27 (true)
  maxnames.178 = maxnames;
  if (nnames >= maxnames.178)
    goto <bb 17>;
  else
    goto <bb 26>;
  # SUCC: 17 (true) 26 (false)

  # BLOCK 17
  # PRED: 16 (true)
  maxnames.178 = maxnames;
  if (maxnames.178 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;
  # SUCC: 18 (true) 19 (false)

  # BLOCK 18
  # PRED: 17 (true)
  maxnames = 100;
  maxnames.178 = maxnames;
  D.7055 = maxnames.178 * 4097;
  D.7056 = (long unsigned int) D.7055;
  D.7057 = malloc (D.7056);
  names.179 = (char *) D.7057;
  names = names.179;
  maxnames.178 = maxnames;
  D.7059 = (long unsigned int) maxnames.178;
  D.7060 = D.7059 * 8;
  D.7061 = malloc (D.7060);
  nameptrs.180 = (char * *) D.7061;
  nameptrs = nameptrs.180;
  goto <bb 20>;
  # SUCC: 20 (fallthru)

  # BLOCK 19
  # PRED: 17 (false)
  maxnames.178 = maxnames;
  maxnames.181 = maxnames.178 * 2;
  maxnames = maxnames.181;
  maxnames.178 = maxnames;
  D.7055 = maxnames.178 * 4097;
  D.7056 = (long unsigned int) D.7055;
  names.182 = names;
  D.7065 = realloc (names.182, D.7056);
  names.183 = (char *) D.7065;
  names = names.183;
  maxnames.178 = maxnames;
  D.7059 = (long unsigned int) maxnames.178;
  D.7060 = D.7059 * 8;
  nameptrs.184 = nameptrs;
  D.7068 = realloc (nameptrs.184, D.7060);
  nameptrs.185 = (char * *) D.7068;
  nameptrs = nameptrs.185;
  # SUCC: 20 (fallthru)

  # BLOCK 20
  # PRED: 18 (fallthru) 19 (fallthru)
  names.182 = names;
  if (names.182 == 0B)
    goto <bb 22>;
  else
    goto <bb 21>;
  # SUCC: 22 (true) 21 (false)

  # BLOCK 21
  # PRED: 20 (false)
  nameptrs.184 = nameptrs;
  if (nameptrs.184 == 0B)
    goto <bb 22>;
  else
    goto <bb 23>;
  # SUCC: 22 (true) 23 (false)

  # BLOCK 22
  # PRED: 20 (true) 21 (true)
  syslog (3, &"out of memory reallocating directory names"[0]);
  exit (1);
  # SUCC:

  # BLOCK 23
  # PRED: 21 (false)
  i = 0;
  goto <bb 25>;
  # SUCC: 25 (fallthru)

  # BLOCK 24
  # PRED: 25 (true)
  nameptrs.184 = nameptrs;
  D.7072 = (long unsigned int) i;
  D.7073 = D.7072 * 8;
  D.7074 = nameptrs.184 + D.7073;
  names.182 = names;
  D.7075 = i * 4097;
  D.7076 = (long unsigned int) D.7075;
  D.7077 = names.182 + D.7076;
  *D.7074 = D.7077;
  i = i + 1;
  # SUCC: 25 (fallthru)

  # BLOCK 25
  # PRED: 23 (fallthru) 24 (fallthru)
  maxnames.178 = maxnames;
  if (i < maxnames.178)
    goto <bb 24>;
  else
    goto <bb 26>;
  # SUCC: 24 (true) 26 (false)

  # BLOCK 26
  # PRED: 16 (false) 25 (false)
  D.7078 = &de->d_name[0];
  D.7079 = strlen (D.7078);
  namlen = (int) D.7079;
  D.7080 = (long unsigned int) namlen;
  D.7078 = &de->d_name[0];
  nameptrs.184 = nameptrs;
  D.7081 = (long unsigned int) nnames;
  D.7082 = D.7081 * 8;
  D.7083 = nameptrs.184 + D.7082;
  D.7084 = *D.7083;
  __builtin_strncpy (D.7084, D.7078, D.7080);
  nameptrs.184 = nameptrs;
  D.7081 = (long unsigned int) nnames;
  D.7082 = D.7081 * 8;
  D.7083 = nameptrs.184 + D.7082;
  D.7084 = *D.7083;
  D.7080 = (long unsigned int) namlen;
  D.7085 = D.7084 + D.7080;
  *D.7085 = 0;
  nnames = nnames + 1;
  # SUCC: 27 (fallthru)

  # BLOCK 27
  # PRED: 15 (fallthru) 26 (fallthru)
  de.186 = readdir (dirp);
  de = de.186;
  if (de != 0B)
    goto <bb 16>;
  else
    goto <bb 28>;
  # SUCC: 16 (true) 28 (false)

  # BLOCK 28
  # PRED: 27 (false)
  closedir (dirp);
  name_compare.187 = (int (*__compar_fn_t) (const void *, const void *)) name_compare;
  D.7088 = (size_t) nnames;
  nameptrs.184 = nameptrs;
  qsort (nameptrs.184, D.7088, 8, name_compare.187);
  i = 0;
  goto <bb 87>;
  # SUCC: 87 (fallthru)

  # BLOCK 29
  # PRED: 87 (true)
  D.7034 = hc->expnfilename;
  D.7089 = strlen (D.7034);
  nameptrs.184 = nameptrs;
  D.7072 = (long unsigned int) i;
  D.7073 = D.7072 * 8;
  D.7074 = nameptrs.184 + D.7073;
  D.7090 = *D.7074;
  D.7091 = strlen (D.7090);
  D.7092 = D.7089 + D.7091;
  D.7093 = D.7092 + 1;
  httpd_realloc_str (&name, &maxname, D.7093);
  D.7094 = hc->origfilename;
  D.7095 = strlen (D.7094);
  nameptrs.184 = nameptrs;
  D.7072 = (long unsigned int) i;
  D.7073 = D.7072 * 8;
  D.7074 = nameptrs.184 + D.7073;
  D.7090 = *D.7074;
  D.7096 = strlen (D.7090);
  D.7097 = D.7095 + D.7096;
  D.7098 = D.7097 + 1;
  httpd_realloc_str (&rname, &maxrname, D.7098);
  D.7034 = hc->expnfilename;
  D.7102 = *D.7034;
  if (D.7102 == 0)
    goto <bb 38>;
  else
    goto <bb 30>;
  # SUCC: 38 (true) 30 (false)

  # BLOCK 30
  # PRED: 29 (false)
  __s2_len = 1;
  if (__s2_len <= 3)
    goto <bb 31>;
  else
    goto <bb 36>;
  # SUCC: 31 (true) 36 (false)

  # BLOCK 31
  # PRED: 30 (true)
  D.7034 = hc->expnfilename;
  __s1 = (const unsigned char *) D.7034;
  D.7104 = *__s1;
  D.7105 = (int) D.7104;
  D.7106 = (const unsigned char *) ".";
  D.7107 = *D.7106;
  D.7108 = (int) D.7107;
  __result = D.7105 - D.7108;
  D.7109 = __s2_len != 0;
  D.7110 = __result == 0;
  D.7111 = D.7109 && D.7110;
  if (D.7111)
    goto <bb 32>;
  else
    goto <bb 35>;
  # SUCC: 32 (true) 35 (false)

  # BLOCK 32
  # PRED: 31 (true)
  D.7112 = __s1 + 1;
  D.7113 = *D.7112;
  D.7114 = (int) D.7113;
  D.7115 = (const unsigned char *) &"."[1];
  D.7116 = *D.7115;
  D.7117 = (int) D.7116;
  __result = D.7114 - D.7117;
  D.7118 = __s2_len > 1;
  D.7110 = __result == 0;
  D.7119 = D.7118 && D.7110;
  if (D.7119)
    goto <bb 33>;
  else
    goto <bb 35>;
  # SUCC: 33 (true) 35 (false)

  # BLOCK 33
  # PRED: 32 (true)
  D.7120 = __s1 + 2;
  D.7121 = *D.7120;
  D.7122 = (int) D.7121;
  D.7123 = (const unsigned char *) &"."[2];
  D.7124 = *D.7123;
  D.7125 = (int) D.7124;
  __result = D.7122 - D.7125;
  D.7126 = __s2_len > 2;
  D.7110 = __result == 0;
  D.7127 = D.7126 && D.7110;
  if (D.7127)
    goto <bb 34>;
  else
    goto <bb 35>;
  # SUCC: 34 (true) 35 (false)

  # BLOCK 34
  # PRED: 33 (true)
  D.7128 = __s1 + 3;
  D.7129 = *D.7128;
  D.7130 = (int) D.7129;
  D.7131 = (const unsigned char *) &"."[3];
  D.7132 = *D.7131;
  D.7133 = (int) D.7132;
  __result = D.7130 - D.7133;
  # SUCC: 35 (fallthru)

  # BLOCK 35
  # PRED: 31 (false) 32 (false) 33 (false) 34 (fallthru)
  D.7005 = __result;
  iftmp.188 = D.7005;
  goto <bb 37>;
  # SUCC: 37 (fallthru)

  # BLOCK 36
  # PRED: 30 (false)
  D.7034 = hc->expnfilename;
  iftmp.188 = __builtin_strcmp (D.7034, &"."[0]);
  # SUCC: 37 (fallthru)

  # BLOCK 37
  # PRED: 35 (fallthru) 36 (fallthru)
  D.7006 = iftmp.188;
  if (D.7006 == 0)
    goto <bb 38>;
  else
    goto <bb 39>;
  # SUCC: 38 (true) 39 (false)

  # BLOCK 38
  # PRED: 29 (true) 37 (true)
  nameptrs.184 = nameptrs;
  D.7072 = (long unsigned int) i;
  D.7073 = D.7072 * 8;
  D.7074 = nameptrs.184 + D.7073;
  D.7090 = *D.7074;
  name.189 = name;
  strcpy (name.189, D.7090);
  nameptrs.184 = nameptrs;
  D.7072 = (long unsigned int) i;
  D.7073 = D.7072 * 8;
  D.7074 = nameptrs.184 + D.7073;
  D.7090 = *D.7074;
  rname.190 = rname;
  strcpy (rname.190, D.7090);
  goto <bb 49>;
  # SUCC: 49 (fallthru)

  # BLOCK 39
  # PRED: 37 (false)
  nameptrs.184 = nameptrs;
  D.7072 = (long unsigned int) i;
  D.7073 = D.7072 * 8;
  D.7074 = nameptrs.184 + D.7073;
  D.7090 = *D.7074;
  D.7034 = hc->expnfilename;
  maxname.191 = maxname;
  name.189 = name;
  my_snprintf (name.189, maxname.191, &"%s/%s"[0], D.7034, D.7090);
  __s2_len = 1;
  if (__s2_len <= 3)
    goto <bb 40>;
  else
    goto <bb 45>;
  # SUCC: 40 (true) 45 (false)

  # BLOCK 40
  # PRED: 39 (true)
  D.7094 = hc->origfilename;
  __s1 = (const unsigned char *) D.7094;
  D.7138 = *__s1;
  D.7139 = (int) D.7138;
  D.7106 = (const unsigned char *) ".";
  D.7107 = *D.7106;
  D.7108 = (int) D.7107;
  __result = D.7139 - D.7108;
  D.7140 = __s2_len != 0;
  D.7141 = __result == 0;
  D.7142 = D.7140 && D.7141;
  if (D.7142)
    goto <bb 41>;
  else
    goto <bb 44>;
  # SUCC: 41 (true) 44 (false)

  # BLOCK 41
  # PRED: 40 (true)
  D.7143 = __s1 + 1;
  D.7144 = *D.7143;
  D.7145 = (int) D.7144;
  D.7115 = (const unsigned char *) &"."[1];
  D.7116 = *D.7115;
  D.7117 = (int) D.7116;
  __result = D.7145 - D.7117;
  D.7146 = __s2_len > 1;
  D.7141 = __result == 0;
  D.7147 = D.7146 && D.7141;
  if (D.7147)
    goto <bb 42>;
  else
    goto <bb 44>;
  # SUCC: 42 (true) 44 (false)

  # BLOCK 42
  # PRED: 41 (true)
  D.7148 = __s1 + 2;
  D.7149 = *D.7148;
  D.7150 = (int) D.7149;
  D.7123 = (const unsigned char *) &"."[2];
  D.7124 = *D.7123;
  D.7125 = (int) D.7124;
  __result = D.7150 - D.7125;
  D.7151 = __s2_len > 2;
  D.7141 = __result == 0;
  D.7152 = D.7151 && D.7141;
  if (D.7152)
    goto <bb 43>;
  else
    goto <bb 44>;
  # SUCC: 43 (true) 44 (false)

  # BLOCK 43
  # PRED: 42 (true)
  D.7153 = __s1 + 3;
  D.7154 = *D.7153;
  D.7155 = (int) D.7154;
  D.7131 = (const unsigned char *) &"."[3];
  D.7132 = *D.7131;
  D.7133 = (int) D.7132;
  __result = D.7155 - D.7133;
  # SUCC: 44 (fallthru)

  # BLOCK 44
  # PRED: 40 (false) 41 (false) 42 (false) 43 (fallthru)
  D.7014 = __result;
  iftmp.192 = D.7014;
  goto <bb 46>;
  # SUCC: 46 (fallthru)

  # BLOCK 45
  # PRED: 39 (false)
  D.7094 = hc->origfilename;
  iftmp.192 = __builtin_strcmp (D.7094, &"."[0]);
  # SUCC: 46 (fallthru)

  # BLOCK 46
  # PRED: 44 (fallthru) 45 (fallthru)
  D.7015 = iftmp.192;
  if (D.7015 == 0)
    goto <bb 47>;
  else
    goto <bb 48>;
  # SUCC: 47 (true) 48 (false)

  # BLOCK 47
  # PRED: 46 (true)
  nameptrs.184 = nameptrs;
  D.7072 = (long unsigned int) i;
  D.7073 = D.7072 * 8;
  D.7074 = nameptrs.184 + D.7073;
  D.7090 = *D.7074;
  maxrname.193 = maxrname;
  rname.190 = rname;
  my_snprintf (rname.190, maxrname.193, &"%s"[0], D.7090);
  goto <bb 49>;
  # SUCC: 49 (fallthru)

  # BLOCK 48
  # PRED: 46 (false)
  nameptrs.184 = nameptrs;
  D.7072 = (long unsigned int) i;
  D.7073 = D.7072 * 8;
  D.7074 = nameptrs.184 + D.7073;
  D.7090 = *D.7074;
  D.7094 = hc->origfilename;
  maxrname.193 = maxrname;
  rname.190 = rname;
  my_snprintf (rname.190, maxrname.193, &"%s%s"[0], D.7094, D.7090);
  # SUCC: 49 (fallthru)

  # BLOCK 49
  # PRED: 38 (fallthru) 47 (fallthru) 48 (fallthru)
  rname.190 = rname;
  D.7157 = strlen (rname.190);
  D.7158 = D.7157 * 3;
  D.7159 = D.7158 + 1;
  httpd_realloc_str (&encrname, &maxencrname, D.7159);
  rname.190 = rname;
  maxencrname.194 = maxencrname;
  D.7161 = (int) maxencrname.194;
  encrname.195 = encrname;
  strencode (encrname.195, D.7161, rname.190);
  name.189 = name;
  D.7163 = stat (name.189, &sb);
  if (D.7163 < 0)
    goto <bb 86>;
  else
    goto <bb 50>;
  # SUCC: 86 (true) 50 (false)

  # BLOCK 50
  # PRED: 49 (false)
  name.189 = name;
  D.7164 = lstat (name.189, &lsb);
  if (D.7164 < 0)
    goto <bb 86>;
  else
    goto <bb 51>;
  # SUCC: 86 (true) 51 (false)

  # BLOCK 51
  # PRED: 50 (false)
  linkprefix = &""[0];
  link[0] = 0;
  D.7165 = lsb.st_mode;
  D.7166 = D.7165 & 61440;
  switch (D.7166)
    {
      case 4096: goto <L56>;
      case 8192: goto <L57>;
      case 16384: goto <L58>;
      case 24576: goto <L59>;
      case 32768: goto <L60>;
      case 40960: goto <L62>;
      case 49152: goto <L61>;
      default : goto <L65>;
    }
  # SUCC: 52 53 54 55 56 58 57 61

  # BLOCK 52
  # PRED: 51
<L56>:;
  modestr[0] = 112;
  goto <bb 62>;
  # SUCC: 62 (fallthru)

  # BLOCK 53
  # PRED: 51
<L57>:;
  modestr[0] = 99;
  goto <bb 62>;
  # SUCC: 62 (fallthru)

  # BLOCK 54
  # PRED: 51
<L58>:;
  modestr[0] = 100;
  goto <bb 62>;
  # SUCC: 62 (fallthru)

  # BLOCK 55
  # PRED: 51
<L59>:;
  modestr[0] = 98;
  goto <bb 62>;
  # SUCC: 62 (fallthru)

  # BLOCK 56
  # PRED: 51
<L60>:;
  modestr[0] = 45;
  goto <bb 62>;
  # SUCC: 62 (fallthru)

  # BLOCK 57
  # PRED: 51
<L61>:;
  modestr[0] = 115;
  goto <bb 62>;
  # SUCC: 62 (fallthru)

  # BLOCK 58
  # PRED: 51
<L62>:;
  modestr[0] = 108;
  name.189 = name;
  D.7167 = readlink (name.189, &link, 4096);
  linklen = (int) D.7167;
  if (linklen != -1)
    goto <bb 59>;
  else
    goto <bb 60>;
  # SUCC: 59 (true) 60 (false)

  # BLOCK 59
  # PRED: 58 (true)
  linklen.196 = linklen;
  link[linklen.196] = 0;
  linkprefix = &" -&gt; "[0];
  # SUCC: 60 (fallthru)

  # BLOCK 60
  # PRED: 58 (false) 59 (fallthru)
  goto <bb 62>;
  # SUCC: 62 (fallthru)

  # BLOCK 61
  # PRED: 51
<L65>:;
  modestr[0] = 63;
  # SUCC: 62 (fallthru)

  # BLOCK 62
  # PRED: 52 (fallthru) 53 (fallthru) 54 (fallthru) 55 (fallthru) 56 (fallthru) 57 (fallthru) 60 (fallthru) 61 (fallthru)
  D.7165 = lsb.st_mode;
  D.7170 = D.7165 & 4;
  if (D.7170 != 0)
    goto <bb 63>;
  else
    goto <bb 64>;
  # SUCC: 63 (true) 64 (false)

  # BLOCK 63
  # PRED: 62 (true)
  iftmp.197 = 114;
  goto <bb 65>;
  # SUCC: 65 (fallthru)

  # BLOCK 64
  # PRED: 62 (false)
  iftmp.197 = 45;
  # SUCC: 65 (fallthru)

  # BLOCK 65
  # PRED: 63 (fallthru) 64 (fallthru)
  modestr[1] = iftmp.197;
  D.7165 = lsb.st_mode;
  D.7172 = D.7165 & 2;
  if (D.7172 != 0)
    goto <bb 66>;
  else
    goto <bb 67>;
  # SUCC: 66 (true) 67 (false)

  # BLOCK 66
  # PRED: 65 (true)
  iftmp.198 = 119;
  goto <bb 68>;
  # SUCC: 68 (fallthru)

  # BLOCK 67
  # PRED: 65 (false)
  iftmp.198 = 45;
  # SUCC: 68 (fallthru)

  # BLOCK 68
  # PRED: 66 (fallthru) 67 (fallthru)
  modestr[2] = iftmp.198;
  D.7165 = lsb.st_mode;
  D.7174 = (int) D.7165;
  D.7175 = D.7174 & 1;
  D.7176 = (_Bool) D.7175;
  if (D.7176)
    goto <bb 69>;
  else
    goto <bb 70>;
  # SUCC: 69 (true) 70 (false)

  # BLOCK 69
  # PRED: 68 (true)
  iftmp.199 = 120;
  goto <bb 71>;
  # SUCC: 71 (fallthru)

  # BLOCK 70
  # PRED: 68 (false)
  iftmp.199 = 45;
  # SUCC: 71 (fallthru)

  # BLOCK 71
  # PRED: 69 (fallthru) 70 (fallthru)
  modestr[3] = iftmp.199;
  modestr[4] = 0;
  now.200 = time (0B);
  now = now.200;
  timestr.201 = ctime (&lsb.st_mtim.tv_sec);
  timestr = timestr.201;
  D.7179 = timestr + 4;
  D.7180 = *D.7179;
  *timestr = D.7180;
  D.7181 = timestr + 1;
  D.7182 = timestr + 5;
  D.7183 = *D.7182;
  *D.7181 = D.7183;
  D.7184 = timestr + 2;
  D.7185 = timestr + 6;
  D.7186 = *D.7185;
  *D.7184 = D.7186;
  D.7187 = timestr + 3;
  *D.7187 = 32;
  D.7179 = timestr + 4;
  D.7188 = timestr + 8;
  D.7189 = *D.7188;
  *D.7179 = D.7189;
  D.7182 = timestr + 5;
  D.7190 = timestr + 9;
  D.7191 = *D.7190;
  *D.7182 = D.7191;
  D.7185 = timestr + 6;
  *D.7185 = 32;
  D.7192 = lsb.st_mtim.tv_sec;
  D.7193 = now - D.7192;
  if (D.7193 > 15724800)
    goto <bb 72>;
  else
    goto <bb 73>;
  # SUCC: 72 (true) 73 (false)

  # BLOCK 72
  # PRED: 71 (true)
  D.7194 = timestr + 7;
  *D.7194 = 32;
  D.7188 = timestr + 8;
  D.7195 = timestr + 20;
  D.7196 = *D.7195;
  *D.7188 = D.7196;
  D.7190 = timestr + 9;
  D.7197 = timestr + 21;
  D.7198 = *D.7197;
  *D.7190 = D.7198;
  D.7199 = timestr + 10;
  D.7200 = timestr + 22;
  D.7201 = *D.7200;
  *D.7199 = D.7201;
  D.7202 = timestr + 11;
  D.7203 = timestr + 23;
  D.7204 = *D.7203;
  *D.7202 = D.7204;
  goto <bb 74>;
  # SUCC: 74 (fallthru)

  # BLOCK 73
  # PRED: 71 (false)
  D.7194 = timestr + 7;
  D.7202 = timestr + 11;
  D.7205 = *D.7202;
  *D.7194 = D.7205;
  D.7188 = timestr + 8;
  D.7206 = timestr + 12;
  D.7207 = *D.7206;
  *D.7188 = D.7207;
  D.7190 = timestr + 9;
  *D.7190 = 58;
  D.7199 = timestr + 10;
  D.7208 = timestr + 14;
  D.7209 = *D.7208;
  *D.7199 = D.7209;
  D.7202 = timestr + 11;
  D.7210 = timestr + 15;
  D.7211 = *D.7210;
  *D.7202 = D.7211;
  # SUCC: 74 (fallthru)

  # BLOCK 74
  # PRED: 72 (fallthru) 73 (fallthru)
  D.7206 = timestr + 12;
  *D.7206 = 0;
  D.7212 = sb.st_mode;
  D.7213 = D.7212 & 61440;
  switch (D.7213)
    {
      case 16384: goto <L79>;
      case 40960: goto <L81>;
      case 49152: goto <L80>;
      default : goto <L82>;
    }
  # SUCC: 75 77 76 78

  # BLOCK 75
  # PRED: 74
<L79>:;
  fileclass = &"/"[0];
  goto <bb 82>;
  # SUCC: 82 (fallthru)

  # BLOCK 76
  # PRED: 74
<L80>:;
  fileclass = &"="[0];
  goto <bb 82>;
  # SUCC: 82 (fallthru)

  # BLOCK 77
  # PRED: 74
<L81>:;
  fileclass = &"@"[0];
  goto <bb 82>;
  # SUCC: 82 (fallthru)

  # BLOCK 78
  # PRED: 74
<L82>:;
  D.7212 = sb.st_mode;
  D.7215 = (int) D.7212;
  D.7216 = D.7215 & 1;
  D.7217 = (_Bool) D.7216;
  if (D.7217)
    goto <bb 79>;
  else
    goto <bb 80>;
  # SUCC: 79 (true) 80 (false)

  # BLOCK 79
  # PRED: 78 (true)
  iftmp.202 = &"*"[0];
  goto <bb 81>;
  # SUCC: 81 (fallthru)

  # BLOCK 80
  # PRED: 78 (false)
  iftmp.202 = &""[0];
  # SUCC: 81 (fallthru)

  # BLOCK 81
  # PRED: 79 (fallthru) 80 (fallthru)
  fileclass = iftmp.202;
  # SUCC: 82 (fallthru)

  # BLOCK 82
  # PRED: 75 (fallthru) 76 (fallthru) 77 (fallthru) 81 (fallthru)
  nameptrs.184 = nameptrs;
  D.7072 = (long unsigned int) i;
  D.7073 = D.7072 * 8;
  D.7074 = nameptrs.184 + D.7073;
  D.7090 = *D.7074;
  D.7212 = sb.st_mode;
  D.7213 = D.7212 & 61440;
  if (D.7213 == 16384)
    goto <bb 83>;
  else
    goto <bb 84>;
  # SUCC: 83 (true) 84 (false)

  # BLOCK 83
  # PRED: 82 (true)
  iftmp.203 = &"/"[0];
  goto <bb 85>;
  # SUCC: 85 (fallthru)

  # BLOCK 84
  # PRED: 82 (false)
  iftmp.203 = &""[0];
  # SUCC: 85 (fallthru)

  # BLOCK 85
  # PRED: 83 (fallthru) 84 (fallthru)
  encrname.195 = encrname;
  D.7219 = lsb.st_size;
  D.7220 = lsb.st_nlink;
  D.7221 = (long int) D.7220;
  fprintf (fp, &"%s %3ld  %10lld  %s  <A HREF=\"/%.500s%s\">%.80s</A>%s%s%s\n"[0], &modestr, D.7221, D.7219, timestr, encrname.195, iftmp.203, D.7090, linkprefix, &link, fileclass);
  # SUCC: 86 (fallthru)

  # BLOCK 86
  # PRED: 49 (true) 50 (true) 85 (fallthru)
  i = i + 1;
  # SUCC: 87 (fallthru)

  # BLOCK 87
  # PRED: 28 (fallthru) 86 (fallthru)
  if (i < nnames)
    goto <bb 29>;
  else
    goto <bb 88>;
  # SUCC: 29 (true) 88 (false)

  # BLOCK 88
  # PRED: 87 (false)
  __builtin_fwrite (&"</PRE></BODY>\n</HTML>\n"[0], 1, 22, fp);
  fclose (fp);
  exit (0);
  # SUCC:

  # BLOCK 89
  # PRED: 12 (false)
  closedir (dirp);
  D.7034 = hc->expnfilename;
  syslog (6, &"spawned indexing process %d for directory \'%.200s\'"[0], r, D.7034);
  client_data.i = r;
  D.7222 = tmr_create (0B, cgi_kill, client_data, 30000, 0);
  if (D.7222 == 0B)
    goto <bb 90>;
  else
    goto <bb 91>;
  # SUCC: 90 (true) 91 (false)

  # BLOCK 90
  # PRED: 89 (true)
  syslog (2, &"tmr_create(cgi_kill ls) failed"[0]);
  exit (1);
  # SUCC:

  # BLOCK 91
  # PRED: 89 (false)
  hc->status = 200;
  hc->bytes_sent = 25000;
  hc->should_linger = 0;
  goto <bb 93>;
  # SUCC: 93 (fallthru)

  # BLOCK 92
  # PRED: 6 (false)
  closedir (dirp);
  D.7040 = hc->method;
  D.7223 = httpd_method_str (D.7040);
  err501form.204 = err501form;
  err501title.205 = err501title;
  httpd_send_err (hc, 501, err501title.205, &""[0], err501form.204, D.7223);
  D.7039 = -1;
  goto <bb 94>;
  # SUCC: 94 (fallthru)

  # BLOCK 93
  # PRED: 5 (fallthru) 91 (fallthru)
  D.7039 = 0;
  # SUCC: 94 (fallthru)

  # BLOCK 94
  # PRED: 3 (fallthru) 9 (fallthru) 11 (fallthru) 92 (fallthru) 93 (fallthru)
  return D.7039;
  # SUCC: EXIT

}


Removing basic block 60

;; Function strencode (strencode)

strencode (to, tosize, from)
{
  int tolen;
  int D.5875;
  int D.5874;
  char * D.5873;
  int D.5872;
  int D.5871;
  int D.5870;
  short unsigned int D.5869;
  const short unsigned int * D.5868;
  long unsigned int D.5867;
  long unsigned int D.5866;
  char D.5865;
  const short unsigned int * D.5864;
  const short unsigned int * * D.5863;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  tolen = 0;
  goto <bb 8>;
  # SUCC: 8 (fallthru)

  # BLOCK 3
  # PRED: 9 (true)
  D.5863 = __ctype_b_loc ();
  D.5864 = *D.5863;
  D.5865 = *from;
  D.5866 = (long unsigned int) D.5865;
  D.5867 = D.5866 * 2;
  D.5868 = D.5864 + D.5867;
  D.5869 = *D.5868;
  D.5870 = (int) D.5869;
  D.5871 = D.5870 & 8;
  if (D.5871 != 0)
    goto <bb 5>;
  else
    goto <bb 4>;
  # SUCC: 5 (true) 4 (false)

  # BLOCK 4
  # PRED: 3 (false)
  D.5865 = *from;
  D.5872 = (int) D.5865;
  D.5873 = __builtin_strchr (&"/_.-~"[0], D.5872);
  if (D.5873 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 3 (true) 4 (true)
  D.5865 = *from;
  *to = D.5865;
  to = to + 1;
  tolen = tolen + 1;
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 6
  # PRED: 4 (false)
  D.5865 = *from;
  D.5872 = (int) D.5865;
  D.5874 = D.5872 & 255;
  sprintf (to, &"%%%02x"[0], D.5874);
  to = to + 3;
  tolen = tolen + 3;
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 5 (fallthru) 6 (fallthru)
  from = from + 1;
  # SUCC: 8 (fallthru)

  # BLOCK 8
  # PRED: 2 (fallthru) 7 (fallthru)
  D.5865 = *from;
  if (D.5865 == 0)
    goto <bb 10>;
  else
    goto <bb 9>;
  # SUCC: 10 (true) 9 (false)

  # BLOCK 9
  # PRED: 8 (false)
  D.5875 = tolen + 4;
  if (D.5875 < tosize)
    goto <bb 3>;
  else
    goto <bb 10>;
  # SUCC: 3 (true) 10 (false)

  # BLOCK 10
  # PRED: 8 (true) 9 (false)
  *to = 0;
  return;
  # SUCC: EXIT

}



;; Function lstat (lstat)

lstat (__path, __statbuf)
{
  int D.1872;
  int D.1871;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.1872 = __lxstat (1, __path, __statbuf);
  D.1871 = D.1872;
  # SUCC: 3 (fallthru)

  # BLOCK 3
  # PRED: 2 (fallthru)
  return D.1871;
  # SUCC: EXIT

}


Merging blocks 2 and 3

;; Function cgi_kill (cgi_kill)

cgi_kill (client_data, nowP)
{
  pid_t pid;
  struct Timer * D.6946;
  int D.6945;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  pid = client_data.i;
  D.6945 = kill (pid, 2);
  if (D.6945 == 0)
    goto <bb 3>;
  else
    goto <bb 5>;
  # SUCC: 3 (true) 5 (false)

  # BLOCK 3
  # PRED: 2 (true)
  syslog (3, &"killed CGI process %d"[0], pid);
  D.6946 = tmr_create (nowP, cgi_kill2, client_data, 5000, 0);
  if (D.6946 == 0B)
    goto <bb 4>;
  else
    goto <bb 5>;
  # SUCC: 4 (true) 5 (false)

  # BLOCK 4
  # PRED: 3 (true)
  syslog (2, &"tmr_create(cgi_kill2) failed"[0]);
  exit (1);
  # SUCC:

  # BLOCK 5
  # PRED: 2 (false) 3 (false)
  return;
  # SUCC: EXIT

}



;; Function cgi_kill2 (cgi_kill2)

cgi_kill2 (client_data, nowP)
{
  pid_t pid;
  int D.6939;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  pid = client_data.i;
  D.6939 = kill (pid, 9);
  if (D.6939 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  syslog (3, &"hard-killed CGI process %d"[0], pid);
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (false) 3 (fallthru)
  return;
  # SUCC: EXIT

}



;; Function name_compare (name_compare)

name_compare (a, b)
{
  size_t __s2_len;
  size_t __s1_len;
  char * D.6962;
  char * D.6961;
  int D.6959;
  int D.6960;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.6961 = *b;
  D.6962 = *a;
  D.6959 = __builtin_strcmp (D.6962, D.6961);
  D.6960 = D.6959;
  # SUCC: 3 (fallthru)

  # BLOCK 3
  # PRED: 2 (fallthru)
  return D.6960;
  # SUCC: EXIT

}


Merging blocks 2 and 3

;; Function expand_symlinks (expand_symlinks)

expand_symlinks (path, restP, no_symlink_check, tildemapped)
{
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  size_t __s1_len;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  size_t __s1_len;
  struct stat sb;
  char * cp2;
  char * cp1;
  char * r;
  int i;
  int nlinks;
  size_t prevrestlen;
  size_t prevcheckedlen;
  size_t linklen;
  size_t restlen;
  size_t checkedlen;
  static size_t maxrest = 0;
  static size_t maxchecked = 0;
  char link[5000];
  static char * rest;
  static char * checked;
  char * D.6101;
  char D.6100;
  char * D.6099;
  char * D.6098;
  long unsigned int D.6097;
  long unsigned int D.6096;
  long unsigned int D.6095;
  long unsigned int D.6094;
  char D.6093;
  long unsigned int D.6092;
  long unsigned int linklen.79;
  char * D.6090;
  char * D.6089;
  long unsigned int D.6088;
  _Bool D.6087;
  _Bool D.6086;
  _Bool D.6085;
  int D.6084;
  int D.6081;
  int * D.6080;
  long int D.6079;
  char D.6078;
  long unsigned int D.6077;
  long unsigned int D.6076;
  int D.6075;
  unsigned char D.6074;
  const unsigned char * D.6073;
  _Bool D.6072;
  _Bool D.6071;
  int D.6070;
  unsigned char D.6069;
  const unsigned char * D.6068;
  _Bool D.6067;
  _Bool D.6066;
  int D.6065;
  unsigned char D.6064;
  const unsigned char * D.6063;
  _Bool D.6062;
  _Bool D.6061;
  _Bool D.6060;
  int D.6059;
  unsigned char D.6058;
  int D.5980;
  int iftmp.78;
  int D.5981;
  long unsigned int D.6056;
  int D.6055;
  long unsigned int D.6054;
  long unsigned int D.6053;
  long unsigned int D.6052;
  long unsigned int D.6051;
  long unsigned int D.6050;
  long int D.6049;
  long int checked.77;
  long int cp2.76;
  int D.6046;
  long unsigned int D.6045;
  int D.6044;
  unsigned char D.6043;
  const unsigned char * D.6042;
  int D.6041;
  unsigned char D.6040;
  const unsigned char * D.6039;
  _Bool D.6038;
  _Bool D.6037;
  int D.6036;
  unsigned char D.6035;
  const unsigned char * D.6034;
  int D.6033;
  unsigned char D.6032;
  const unsigned char * D.6031;
  _Bool D.6030;
  _Bool D.6029;
  int D.6028;
  unsigned char D.6027;
  const unsigned char * D.6026;
  int D.6025;
  unsigned char D.6024;
  const unsigned char * D.6023;
  _Bool D.6022;
  _Bool D.6021;
  _Bool D.6020;
  int D.6019;
  unsigned char D.6018;
  const unsigned char * D.6017;
  int D.6016;
  unsigned char D.6015;
  int D.5971;
  int iftmp.75;
  int D.5972;
  unsigned int D.6013;
  int D.6012;
  int D.6011;
  _Bool iftmp.74;
  char * D.6007;
  long unsigned int D.6006;
  unsigned int D.6005;
  unsigned int D.6004;
  long int r.73;
  unsigned int D.6002;
  long int cp1.72;
  char D.6000;
  const char * D.5999;
  char * D.5998;
  char D.5997;
  char * D.5996;
  long unsigned int D.5995;
  char * D.5994;
  char * rest.71;
  char D.5992;
  char * D.5991;
  long unsigned int D.5990;
  char * checked.70;
  int D.5988;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  if (no_symlink_check != 0)
    goto <bb 3>;
  else
    goto <bb 8>;
  # SUCC: 3 (true) 8 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5988 = stat (path, &sb);
  if (D.5988 != -1)
    goto <bb 4>;
  else
    goto <bb 8>;
  # SUCC: 4 (true) 8 (false)

  # BLOCK 4
  # PRED: 3 (true)
  checkedlen = strlen (path);
  httpd_realloc_str (&checked, &maxchecked, checkedlen);
  checked.70 = checked;
  strcpy (checked.70, path);
  goto <bb 6>;
  # SUCC: 6 (fallthru)

  # BLOCK 5
  # PRED: 6 (true)
  checked.70 = checked;
  D.5990 = checkedlen + -1;
  D.5991 = checked.70 + D.5990;
  *D.5991 = 0;
  checkedlen = checkedlen + 0x0ffffffffffffffff;
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 4 (fallthru) 5 (fallthru)
  checked.70 = checked;
  D.5990 = checkedlen + -1;
  D.5991 = checked.70 + D.5990;
  D.5992 = *D.5991;
  if (D.5992 == 47)
    goto <bb 5>;
  else
    goto <bb 7>;
  # SUCC: 5 (true) 7 (false)

  # BLOCK 7
  # PRED: 6 (false)
  httpd_realloc_str (&rest, &maxrest, 0);
  rest.71 = rest;
  *rest.71 = 0;
  rest.71 = rest;
  *restP = rest.71;
  D.5994 = checked;
  goto <bb 90>;
  # SUCC: 90 (fallthru)

  # BLOCK 8
  # PRED: 2 (false) 3 (false)
  httpd_realloc_str (&checked, &maxchecked, 1);
  checked.70 = checked;
  *checked.70 = 0;
  checkedlen = 0;
  restlen = strlen (path);
  httpd_realloc_str (&rest, &maxrest, restlen);
  rest.71 = rest;
  strcpy (rest.71, path);
  rest.71 = rest;
  D.5995 = restlen + -1;
  D.5996 = rest.71 + D.5995;
  D.5997 = *D.5996;
  if (D.5997 == 47)
    goto <bb 9>;
  else
    goto <bb 10>;
  # SUCC: 9 (true) 10 (false)

  # BLOCK 9
  # PRED: 8 (true)
  rest.71 = rest;
  restlen = restlen + 0x0ffffffffffffffff;
  D.5998 = rest.71 + restlen;
  *D.5998 = 0;
  # SUCC: 10 (fallthru)

  # BLOCK 10
  # PRED: 8 (false) 9 (fallthru)
  if (tildemapped == 0)
    goto <bb 11>;
  else
    goto <bb 14>;
  # SUCC: 11 (true) 14 (false)

  # BLOCK 11
  # PRED: 10 (true)
  goto <bb 13>;
  # SUCC: 13 (fallthru)

  # BLOCK 12
  # PRED: 13 (true)
  rest.71 = rest;
  D.5999 = rest.71 + 1;
  rest.71 = rest;
  strcpy (rest.71, D.5999);
  restlen = restlen + 0x0ffffffffffffffff;
  # SUCC: 13 (fallthru)

  # BLOCK 13
  # PRED: 11 (fallthru) 12 (fallthru)
  rest.71 = rest;
  D.6000 = *rest.71;
  if (D.6000 == 47)
    goto <bb 12>;
  else
    goto <bb 14>;
  # SUCC: 12 (true) 14 (false)

  # BLOCK 14
  # PRED: 10 (false) 13 (false)
  r = rest;
  nlinks = 0;
  goto <bb 86>;
  # SUCC: 86 (fallthru)

  # BLOCK 15
  # PRED: 86 (true)
  prevcheckedlen = checkedlen;
  prevrestlen = restlen;
  cp1 = __builtin_strchr (r, 47);
  if (cp1 != 0B)
    goto <bb 16>;
  else
    goto <bb 42>;
  # SUCC: 16 (true) 42 (false)

  # BLOCK 16
  # PRED: 15 (true)
  cp1.72 = (long int) cp1;
  D.6002 = (unsigned int) cp1.72;
  r.73 = (long int) r;
  D.6004 = (unsigned int) r.73;
  D.6005 = D.6002 - D.6004;
  i = (int) D.6005;
  if (i == 0)
    goto <bb 17>;
  else
    goto <bb 18>;
  # SUCC: 17 (true) 18 (false)

  # BLOCK 17
  # PRED: 16 (true)
  D.6006 = checkedlen + 1;
  httpd_realloc_str (&checked, &maxchecked, D.6006);
  checked.70 = checked;
  D.6007 = checked.70 + checkedlen;
  __builtin_strncpy (D.6007, r, 1);
  checkedlen = checkedlen + 1;
  goto <bb 41>;
  # SUCC: 41 (fallthru)

  # BLOCK 18
  # PRED: 16 (false)
  D.6011 = MAX_EXPR <i, 2>;
  D.6012 = __builtin_constant_p (D.6011);
  if (D.6012 == 0)
    goto <bb 28>;
  else
    goto <bb 19>;
  # SUCC: 28 (true) 19 (false)

  # BLOCK 19
  # PRED: 18 (false)
  D.6011 = MAX_EXPR <i, 2>;
  D.6013 = (unsigned int) D.6011;
  if (D.6013 <= 2)
    goto <bb 28>;
  else
    goto <bb 20>;
  # SUCC: 28 (true) 20 (false)

  # BLOCK 20
  # PRED: 19 (false)
  __s2_len = 2;
  if (__s2_len <= 3)
    goto <bb 21>;
  else
    goto <bb 26>;
  # SUCC: 21 (true) 26 (false)

  # BLOCK 21
  # PRED: 20 (true)
  __s1 = (const unsigned char *) r;
  D.6015 = *__s1;
  D.6016 = (int) D.6015;
  D.6017 = (const unsigned char *) "..";
  D.6018 = *D.6017;
  D.6019 = (int) D.6018;
  __result = D.6016 - D.6019;
  D.6020 = __s2_len != 0;
  D.6021 = __result == 0;
  D.6022 = D.6020 && D.6021;
  if (D.6022)
    goto <bb 22>;
  else
    goto <bb 25>;
  # SUCC: 22 (true) 25 (false)

  # BLOCK 22
  # PRED: 21 (true)
  D.6023 = __s1 + 1;
  D.6024 = *D.6023;
  D.6025 = (int) D.6024;
  D.6026 = (const unsigned char *) &".."[1];
  D.6027 = *D.6026;
  D.6028 = (int) D.6027;
  __result = D.6025 - D.6028;
  D.6029 = __s2_len > 1;
  D.6021 = __result == 0;
  D.6030 = D.6029 && D.6021;
  if (D.6030)
    goto <bb 23>;
  else
    goto <bb 25>;
  # SUCC: 23 (true) 25 (false)

  # BLOCK 23
  # PRED: 22 (true)
  D.6031 = __s1 + 2;
  D.6032 = *D.6031;
  D.6033 = (int) D.6032;
  D.6034 = (const unsigned char *) &".."[2];
  D.6035 = *D.6034;
  D.6036 = (int) D.6035;
  __result = D.6033 - D.6036;
  D.6037 = __s2_len > 2;
  D.6021 = __result == 0;
  D.6038 = D.6037 && D.6021;
  if (D.6038)
    goto <bb 24>;
  else
    goto <bb 25>;
  # SUCC: 24 (true) 25 (false)

  # BLOCK 24
  # PRED: 23 (true)
  D.6039 = __s1 + 3;
  D.6040 = *D.6039;
  D.6041 = (int) D.6040;
  D.6017 = (const unsigned char *) "..";
  D.6042 = D.6017 + 3;
  D.6043 = *D.6042;
  D.6044 = (int) D.6043;
  __result = D.6041 - D.6044;
  # SUCC: 25 (fallthru)

  # BLOCK 25
  # PRED: 21 (false) 22 (false) 23 (false) 24 (fallthru)
  D.5971 = __result;
  iftmp.75 = D.5971;
  goto <bb 27>;
  # SUCC: 27 (fallthru)

  # BLOCK 26
  # PRED: 20 (false)
  iftmp.75 = __builtin_strcmp (r, &".."[0]);
  # SUCC: 27 (fallthru)

  # BLOCK 27
  # PRED: 25 (fallthru) 26 (fallthru)
  D.5972 = iftmp.75;
  iftmp.74 = D.5972 == 0;
  goto <bb 29>;
  # SUCC: 29 (fallthru)

  # BLOCK 28
  # PRED: 18 (true) 19 (true)
  D.6011 = MAX_EXPR <i, 2>;
  D.6045 = (size_t) D.6011;
  D.6046 = strncmp (r, &".."[0], D.6045);
  iftmp.74 = D.6046 == 0;
  # SUCC: 29 (fallthru)

  # BLOCK 29
  # PRED: 27 (fallthru) 28 (fallthru)
  if (iftmp.74)
    goto <bb 30>;
  else
    goto <bb 37>;
  # SUCC: 30 (true) 37 (false)

  # BLOCK 30
  # PRED: 29 (true)
  if (checkedlen != 0)
    goto <bb 31>;
  else
    goto <bb 36>;
  # SUCC: 31 (true) 36 (false)

  # BLOCK 31
  # PRED: 30 (true)
  checked.70 = checked;
  cp2 = strrchr (checked.70, 47);
  if (cp2 == 0B)
    goto <bb 32>;
  else
    goto <bb 33>;
  # SUCC: 32 (true) 33 (false)

  # BLOCK 32
  # PRED: 31 (true)
  checkedlen = 0;
  goto <bb 36>;
  # SUCC: 36 (fallthru)

  # BLOCK 33
  # PRED: 31 (false)
  checked.70 = checked;
  if (cp2 == checked.70)
    goto <bb 34>;
  else
    goto <bb 35>;
  # SUCC: 34 (true) 35 (false)

  # BLOCK 34
  # PRED: 33 (true)
  checkedlen = 1;
  goto <bb 36>;
  # SUCC: 36 (fallthru)

  # BLOCK 35
  # PRED: 33 (false)
  cp2.76 = (long int) cp2;
  checked.70 = checked;
  checked.77 = (long int) checked.70;
  D.6049 = cp2.76 - checked.77;
  checkedlen = (size_t) D.6049;
  # SUCC: 36 (fallthru)

  # BLOCK 36
  # PRED: 30 (false) 32 (fallthru) 34 (fallthru) 35 (fallthru)
  goto <bb 41>;
  # SUCC: 41 (fallthru)

  # BLOCK 37
  # PRED: 29 (false)
  D.6050 = (size_t) i;
  D.6051 = D.6050 + checkedlen;
  D.6052 = D.6051 + 1;
  httpd_realloc_str (&checked, &maxchecked, D.6052);
  if (checkedlen != 0)
    goto <bb 38>;
  else
    goto <bb 40>;
  # SUCC: 38 (true) 40 (false)

  # BLOCK 38
  # PRED: 37 (true)
  checked.70 = checked;
  D.5990 = checkedlen + -1;
  D.5991 = checked.70 + D.5990;
  D.5992 = *D.5991;
  if (D.5992 != 47)
    goto <bb 39>;
  else
    goto <bb 40>;
  # SUCC: 39 (true) 40 (false)

  # BLOCK 39
  # PRED: 38 (true)
  checked.70 = checked;
  D.6007 = checked.70 + checkedlen;
  *D.6007 = 47;
  checkedlen = checkedlen + 1;
  # SUCC: 40 (fallthru)

  # BLOCK 40
  # PRED: 37 (false) 38 (false) 39 (fallthru)
  D.6053 = (long unsigned int) i;
  checked.70 = checked;
  D.6007 = checked.70 + checkedlen;
  __builtin_strncpy (D.6007, r, D.6053);
  D.6050 = (size_t) i;
  checkedlen = D.6050 + checkedlen;
  # SUCC: 41 (fallthru)

  # BLOCK 41
  # PRED: 17 (fallthru) 36 (fallthru) 40 (fallthru)
  checked.70 = checked;
  D.6007 = checked.70 + checkedlen;
  *D.6007 = 0;
  D.6053 = (long unsigned int) i;
  D.6054 = D.6053 + 1;
  r = r + D.6054;
  D.6055 = i + 1;
  D.6056 = (size_t) D.6055;
  restlen = restlen - D.6056;
  goto <bb 63>;
  # SUCC: 63 (fallthru)

  # BLOCK 42
  # PRED: 15 (false)
  __s2_len = 2;
  if (__s2_len <= 3)
    goto <bb 43>;
  else
    goto <bb 48>;
  # SUCC: 43 (true) 48 (false)

  # BLOCK 43
  # PRED: 42 (true)
  __s1 = (const unsigned char *) r;
  D.6058 = *__s1;
  D.6059 = (int) D.6058;
  D.6017 = (const unsigned char *) "..";
  D.6018 = *D.6017;
  D.6019 = (int) D.6018;
  __result = D.6059 - D.6019;
  D.6060 = __s2_len != 0;
  D.6061 = __result == 0;
  D.6062 = D.6060 && D.6061;
  if (D.6062)
    goto <bb 44>;
  else
    goto <bb 47>;
  # SUCC: 44 (true) 47 (false)

  # BLOCK 44
  # PRED: 43 (true)
  D.6063 = __s1 + 1;
  D.6064 = *D.6063;
  D.6065 = (int) D.6064;
  D.6026 = (const unsigned char *) &".."[1];
  D.6027 = *D.6026;
  D.6028 = (int) D.6027;
  __result = D.6065 - D.6028;
  D.6066 = __s2_len > 1;
  D.6061 = __result == 0;
  D.6067 = D.6066 && D.6061;
  if (D.6067)
    goto <bb 45>;
  else
    goto <bb 47>;
  # SUCC: 45 (true) 47 (false)

  # BLOCK 45
  # PRED: 44 (true)
  D.6068 = __s1 + 2;
  D.6069 = *D.6068;
  D.6070 = (int) D.6069;
  D.6034 = (const unsigned char *) &".."[2];
  D.6035 = *D.6034;
  D.6036 = (int) D.6035;
  __result = D.6070 - D.6036;
  D.6071 = __s2_len > 2;
  D.6061 = __result == 0;
  D.6072 = D.6071 && D.6061;
  if (D.6072)
    goto <bb 46>;
  else
    goto <bb 47>;
  # SUCC: 46 (true) 47 (false)

  # BLOCK 46
  # PRED: 45 (true)
  D.6073 = __s1 + 3;
  D.6074 = *D.6073;
  D.6075 = (int) D.6074;
  D.6017 = (const unsigned char *) "..";
  D.6042 = D.6017 + 3;
  D.6043 = *D.6042;
  D.6044 = (int) D.6043;
  __result = D.6075 - D.6044;
  # SUCC: 47 (fallthru)

  # BLOCK 47
  # PRED: 43 (false) 44 (false) 45 (false) 46 (fallthru)
  D.5980 = __result;
  iftmp.78 = D.5980;
  goto <bb 49>;
  # SUCC: 49 (fallthru)

  # BLOCK 48
  # PRED: 42 (false)
  iftmp.78 = __builtin_strcmp (r, &".."[0]);
  # SUCC: 49 (fallthru)

  # BLOCK 49
  # PRED: 47 (fallthru) 48 (fallthru)
  D.5981 = iftmp.78;
  if (D.5981 == 0)
    goto <bb 50>;
  else
    goto <bb 58>;
  # SUCC: 50 (true) 58 (false)

  # BLOCK 50
  # PRED: 49 (true)
  if (checkedlen != 0)
    goto <bb 51>;
  else
    goto <bb 57>;
  # SUCC: 51 (true) 57 (false)

  # BLOCK 51
  # PRED: 50 (true)
  checked.70 = checked;
  cp2 = strrchr (checked.70, 47);
  if (cp2 == 0B)
    goto <bb 52>;
  else
    goto <bb 53>;
  # SUCC: 52 (true) 53 (false)

  # BLOCK 52
  # PRED: 51 (true)
  checkedlen = 0;
  goto <bb 56>;
  # SUCC: 56 (fallthru)

  # BLOCK 53
  # PRED: 51 (false)
  checked.70 = checked;
  if (cp2 == checked.70)
    goto <bb 54>;
  else
    goto <bb 55>;
  # SUCC: 54 (true) 55 (false)

  # BLOCK 54
  # PRED: 53 (true)
  checkedlen = 1;
  goto <bb 56>;
  # SUCC: 56 (fallthru)

  # BLOCK 55
  # PRED: 53 (false)
  cp2.76 = (long int) cp2;
  checked.70 = checked;
  checked.77 = (long int) checked.70;
  D.6049 = cp2.76 - checked.77;
  checkedlen = (size_t) D.6049;
  # SUCC: 56 (fallthru)

  # BLOCK 56
  # PRED: 52 (fallthru) 54 (fallthru) 55 (fallthru)
  checked.70 = checked;
  D.6007 = checked.70 + checkedlen;
  *D.6007 = 0;
  # SUCC: 57 (fallthru)

  # BLOCK 57
  # PRED: 50 (false) 56 (fallthru)
  goto <bb 62>;
  # SUCC: 62 (fallthru)

  # BLOCK 58
  # PRED: 49 (false)
  D.6076 = checkedlen + restlen;
  D.6077 = D.6076 + 1;
  httpd_realloc_str (&checked, &maxchecked, D.6077);
  if (checkedlen != 0)
    goto <bb 59>;
  else
    goto <bb 61>;
  # SUCC: 59 (true) 61 (false)

  # BLOCK 59
  # PRED: 58 (true)
  checked.70 = checked;
  D.5990 = checkedlen + -1;
  D.5991 = checked.70 + D.5990;
  D.5992 = *D.5991;
  if (D.5992 != 47)
    goto <bb 60>;
  else
    goto <bb 61>;
  # SUCC: 60 (true) 61 (false)

  # BLOCK 60
  # PRED: 59 (true)
  checked.70 = checked;
  D.6007 = checked.70 + checkedlen;
  *D.6007 = 47;
  checkedlen = checkedlen + 1;
  # SUCC: 61 (fallthru)

  # BLOCK 61
  # PRED: 58 (false) 59 (false) 60 (fallthru)
  checked.70 = checked;
  D.6007 = checked.70 + checkedlen;
  strcpy (D.6007, r);
  checkedlen = checkedlen + restlen;
  # SUCC: 62 (fallthru)

  # BLOCK 62
  # PRED: 57 (fallthru) 61 (fallthru)
  r = r + restlen;
  restlen = 0;
  # SUCC: 63 (fallthru)

  # BLOCK 63
  # PRED: 41 (fallthru) 62 (fallthru)
  checked.70 = checked;
  D.6078 = *checked.70;
  if (D.6078 == 0)
    goto <bb 86>;
  else
    goto <bb 64>;
  # SUCC: 86 (true) 64 (false)

  # BLOCK 64
  # PRED: 63 (false)
  checked.70 = checked;
  D.6079 = readlink (checked.70, &link, 4999);
  linklen = (size_t) D.6079;
  if (linklen == 0x0ffffffffffffffff)
    goto <bb 65>;
  else
    goto <bb 73>;
  # SUCC: 65 (true) 73 (false)

  # BLOCK 65
  # PRED: 64 (true)
  D.6080 = __errno_location ();
  D.6081 = *D.6080;
  if (D.6081 == 22)
    goto <bb 86>;
  else
    goto <bb 66>;
  # SUCC: 86 (true) 66 (false)

  # BLOCK 66
  # PRED: 65 (false)
  D.6080 = __errno_location ();
  D.6084 = *D.6080;
  D.6085 = D.6084 == 13;
  D.6086 = D.6084 == 2;
  D.6087 = D.6085 || D.6086;
  if (D.6087)
    goto <bb 68>;
  else
    goto <bb 67>;
  # SUCC: 68 (true) 67 (false)

  # BLOCK 67
  # PRED: 66 (false)
  D.6080 = __errno_location ();
  D.6081 = *D.6080;
  if (D.6081 == 20)
    goto <bb 68>;
  else
    goto <bb 72>;
  # SUCC: 68 (true) 72 (false)

  # BLOCK 68
  # PRED: 66 (true) 67 (true)
  D.6088 = restlen - prevrestlen;
  D.6089 = r + D.6088;
  *restP = D.6089;
  if (prevcheckedlen == 0)
    goto <bb 69>;
  else
    goto <bb 70>;
  # SUCC: 69 (true) 70 (false)

  # BLOCK 69
  # PRED: 68 (true)
  checked.70 = checked;
  __builtin_memcpy (checked.70, &"."[0], 2);
  goto <bb 71>;
  # SUCC: 71 (fallthru)

  # BLOCK 70
  # PRED: 68 (false)
  checked.70 = checked;
  D.6090 = checked.70 + prevcheckedlen;
  *D.6090 = 0;
  # SUCC: 71 (fallthru)

  # BLOCK 71
  # PRED: 69 (fallthru) 70 (fallthru)
  D.5994 = checked;
  goto <bb 90>;
  # SUCC: 90 (fallthru)

  # BLOCK 72
  # PRED: 67 (false)
  checked.70 = checked;
  syslog (3, &"readlink %.80s - %m"[0], checked.70);
  D.5994 = 0B;
  goto <bb 90>;
  # SUCC: 90 (fallthru)

  # BLOCK 73
  # PRED: 64 (false)
  nlinks = nlinks + 1;
  if (nlinks > 32)
    goto <bb 74>;
  else
    goto <bb 75>;
  # SUCC: 74 (true) 75 (false)

  # BLOCK 74
  # PRED: 73 (true)
  syslog (3, &"too many symlinks in %.80s"[0], path);
  D.5994 = 0B;
  goto <bb 90>;
  # SUCC: 90 (fallthru)

  # BLOCK 75
  # PRED: 73 (false)
  linklen.79 = linklen;
  link[linklen.79] = 0;
  D.6092 = linklen + 0x0ffffffffffffffff;
  D.6093 = link[D.6092];
  if (D.6093 == 47)
    goto <bb 76>;
  else
    goto <bb 77>;
  # SUCC: 76 (true) 77 (false)

  # BLOCK 76
  # PRED: 75 (true)
  linklen = linklen + 0x0ffffffffffffffff;
  linklen.79 = linklen;
  link[linklen.79] = 0;
  # SUCC: 77 (fallthru)

  # BLOCK 77
  # PRED: 75 (false) 76 (fallthru)
  if (restlen != 0)
    goto <bb 78>;
  else
    goto <bb 82>;
  # SUCC: 78 (true) 82 (false)

  # BLOCK 78
  # PRED: 77 (true)
  rest.71 = rest;
  strcpy (rest.71, r);
  D.6094 = restlen + linklen;
  D.6095 = D.6094 + 1;
  httpd_realloc_str (&rest, &maxrest, D.6095);
  i = (int) restlen;
  goto <bb 80>;
  # SUCC: 80 (fallthru)

  # BLOCK 79
  # PRED: 80 (true)
  rest.71 = rest;
  D.6050 = (size_t) i;
  D.6096 = D.6050 + linklen;
  D.6097 = D.6096 + 1;
  D.6098 = rest.71 + D.6097;
  rest.71 = rest;
  D.6053 = (long unsigned int) i;
  D.6099 = rest.71 + D.6053;
  D.6100 = *D.6099;
  *D.6098 = D.6100;
  i = i + -1;
  # SUCC: 80 (fallthru)

  # BLOCK 80
  # PRED: 78 (fallthru) 79 (fallthru)
  if (i >= 0)
    goto <bb 79>;
  else
    goto <bb 81>;
  # SUCC: 79 (true) 81 (false)

  # BLOCK 81
  # PRED: 80 (false)
  rest.71 = rest;
  strcpy (rest.71, &link);
  rest.71 = rest;
  D.6101 = rest.71 + linklen;
  *D.6101 = 47;
  D.6094 = linklen + restlen;
  restlen = D.6094 + 1;
  r = rest;
  goto <bb 83>;
  # SUCC: 83 (fallthru)

  # BLOCK 82
  # PRED: 77 (false)
  httpd_realloc_str (&rest, &maxrest, linklen);
  rest.71 = rest;
  strcpy (rest.71, &link);
  restlen = linklen;
  r = rest;
  # SUCC: 83 (fallthru)

  # BLOCK 83
  # PRED: 81 (fallthru) 82 (fallthru)
  rest.71 = rest;
  D.6000 = *rest.71;
  if (D.6000 == 47)
    goto <bb 84>;
  else
    goto <bb 85>;
  # SUCC: 84 (true) 85 (false)

  # BLOCK 84
  # PRED: 83 (true)
  checked.70 = checked;
  *checked.70 = 0;
  checkedlen = 0;
  goto <bb 86>;
  # SUCC: 86 (fallthru)

  # BLOCK 85
  # PRED: 83 (false)
  checkedlen = prevcheckedlen;
  checked.70 = checked;
  D.6007 = checked.70 + checkedlen;
  *D.6007 = 0;
  # SUCC: 86 (fallthru)

  # BLOCK 86
  # PRED: 14 (fallthru) 63 (true) 65 (true) 84 (fallthru) 85 (fallthru)
  if (restlen != 0)
    goto <bb 15>;
  else
    goto <bb 87>;
  # SUCC: 15 (true) 87 (false)

  # BLOCK 87
  # PRED: 86 (false)
  *restP = r;
  checked.70 = checked;
  D.6078 = *checked.70;
  if (D.6078 == 0)
    goto <bb 88>;
  else
    goto <bb 89>;
  # SUCC: 88 (true) 89 (false)

  # BLOCK 88
  # PRED: 87 (true)
  checked.70 = checked;
  __builtin_memcpy (checked.70, &"."[0], 2);
  # SUCC: 89 (fallthru)

  # BLOCK 89
  # PRED: 87 (false) 88 (fallthru)
  D.5994 = checked;
  # SUCC: 90 (fallthru)

  # BLOCK 90
  # PRED: 7 (fallthru) 71 (fallthru) 72 (fallthru) 74 (fallthru) 89 (fallthru)
  return D.5994;
  # SUCC: EXIT

}


Removing basic block 11
Removing basic block 36
Removing basic block 57

;; Function auth_check (auth_check)

auth_check (hc, dirname)
{
  char * topdir;
  int D.5652;
  int D.5650;
  int D.5649;
  char D.5648;
  char * D.5647;
  int D.5646;
  int D.5643;
  struct httpd_server * D.5642;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.5642 = hc->hs;
  D.5643 = D.5642->global_passwd;
  if (D.5643 != 0)
    goto <bb 3>;
  else
    goto <bb 10> (<L7>);
  # SUCC: 3 (true) 10 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5642 = hc->hs;
  D.5646 = D.5642->vhost;
  if (D.5646 == 0)
    goto <bb 6>;
  else
    goto <bb 4>;
  # SUCC: 6 (true) 4 (false)

  # BLOCK 4
  # PRED: 3 (false)
  D.5647 = hc->hostdir;
  D.5648 = *D.5647;
  if (D.5648 == 0)
    goto <bb 6>;
  else
    goto <bb 5>;
  # SUCC: 6 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  topdir = hc->hostdir;
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 6
  # PRED: 3 (true) 4 (true)
  topdir = &"."[0];
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 5 (fallthru) 6 (fallthru)
  D.5649 = auth_check2 (hc, topdir);
  switch (D.5649)
    {
      case -1: goto <L5>;
      case 1: goto <L6>;
      default : goto <L7>;
    }
  # SUCC: 8 9 10

  # BLOCK 8
  # PRED: 7
<L5>:;
  D.5650 = -1;
  goto <bb 11>;
  # SUCC: 11 (fallthru)

  # BLOCK 9
  # PRED: 7
<L6>:;
  D.5650 = 1;
  goto <bb 11>;
  # SUCC: 11 (fallthru)

  # BLOCK 10
  # PRED: 2 (false) 7
<L7>:;
  D.5652 = auth_check2 (hc, dirname);
  D.5650 = D.5652;
  # SUCC: 11 (fallthru)

  # BLOCK 11
  # PRED: 8 (fallthru) 9 (fallthru) 10 (fallthru)
  return D.5650;
  # SUCC: EXIT

}



;; Function auth_check2 (auth_check2)

auth_check2 (hc, dirname)
{
  size_t __s2_len;
  size_t __s1_len;
  size_t __s2_len;
  size_t __s1_len;
  size_t __s2_len;
  size_t __s1_len;
  size_t __s2_len;
  size_t __s1_len;
  size_t __s2_len;
  size_t __s1_len;
  static size_t maxprevcryp = 0;
  static char * prevcryp;
  static size_t maxprevuser = 0;
  static char * prevuser;
  static time_t prevmtime;
  static size_t maxprevauthpath = 0;
  static char * prevauthpath;
  char * cryp;
  char line[500];
  struct FILE * fp;
  int l;
  char * colon;
  char * authpass;
  char authinfo[500];
  struct stat sb;
  static size_t maxauthpath = 0;
  static char * authpath;
  char * D.5770;
  long unsigned int D.5769;
  long unsigned int D.5768;
  long unsigned int D.5767;
  long unsigned int D.5766;
  char * D.5765;
  int D.5728;
  int D.5719;
  char D.5764;
  int D.5763;
  long unsigned int D.5762;
  char * err403title.58;
  char * D.5760;
  char * D.5759;
  union httpd_sockaddr * D.5758;
  struct FILE * fp.57;
  char * D.5756;
  char * * D.5755;
  size_t * D.5754;
  long unsigned int D.5753;
  char * D.5752;
  char * prevcryp.56;
  int D.5709;
  char * prevuser.55;
  int D.5700;
  long int prevmtime.54;
  long int prevmtime.59;
  char * prevauthpath.53;
  int D.5691;
  long unsigned int maxprevauthpath.52;
  int l.51;
  int l.50;
  const char * D.5743;
  unsigned char * authinfo.49;
  int D.5741;
  char D.5740;
  char * D.5739;
  int D.5736;
  int D.5735;
  char * authpath.48;
  long unsigned int maxauthpath.47;
  long unsigned int D.5732;
  long unsigned int D.5731;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.5731 = strlen (dirname);
  D.5732 = D.5731 + 11;
  httpd_realloc_str (&authpath, &maxauthpath, D.5732);
  maxauthpath.47 = maxauthpath;
  authpath.48 = authpath;
  my_snprintf (authpath.48, maxauthpath.47, &"%s/%s"[0], dirname, &".htpasswd"[0]);
  authpath.48 = authpath;
  D.5735 = stat (authpath.48, &sb);
  if (D.5735 < 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5736 = 0;
  goto <bb 30>;
  # SUCC: 30 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  D.5739 = hc->authorization;
  D.5740 = *D.5739;
  if (D.5740 == 0)
    goto <bb 6>;
  else
    goto <bb 5>;
  # SUCC: 6 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  D.5739 = hc->authorization;
  D.5741 = strncmp (D.5739, &"Basic "[0], 6);
  if (D.5741 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;
  # SUCC: 6 (true) 7 (false)

  # BLOCK 6
  # PRED: 4 (true) 5 (true)
  send_authenticate (hc, dirname);
  D.5736 = -1;
  goto <bb 30>;
  # SUCC: 30 (fallthru)

  # BLOCK 7
  # PRED: 5 (false)
  authinfo.49 = (unsigned char *) &authinfo;
  D.5739 = hc->authorization;
  D.5743 = D.5739 + 6;
  l.50 = b64_decode (D.5743, authinfo.49, 499);
  l = l.50;
  l.51 = l;
  authinfo[l.51] = 0;
  authpass = __builtin_strchr (&authinfo, 58);
  if (authpass == 0B)
    goto <bb 8>;
  else
    goto <bb 9>;
  # SUCC: 8 (true) 9 (false)

  # BLOCK 8
  # PRED: 7 (true)
  send_authenticate (hc, dirname);
  D.5736 = -1;
  goto <bb 30>;
  # SUCC: 30 (fallthru)

  # BLOCK 9
  # PRED: 7 (false)
  *authpass = 0;
  authpass = authpass + 1;
  colon = __builtin_strchr (authpass, 58);
  if (colon != 0B)
    goto <bb 10>;
  else
    goto <bb 11>;
  # SUCC: 10 (true) 11 (false)

  # BLOCK 10
  # PRED: 9 (true)
  *colon = 0;
  # SUCC: 11 (fallthru)

  # BLOCK 11
  # PRED: 9 (false) 10 (fallthru)
  maxprevauthpath.52 = maxprevauthpath;
  if (maxprevauthpath.52 != 0)
    goto <bb 12>;
  else
    goto <bb 18>;
  # SUCC: 12 (true) 18 (false)

  # BLOCK 12
  # PRED: 11 (true)
  prevauthpath.53 = prevauthpath;
  authpath.48 = authpath;
  D.5691 = __builtin_strcmp (authpath.48, prevauthpath.53);
  if (D.5691 == 0)
    goto <bb 13>;
  else
    goto <bb 18>;
  # SUCC: 13 (true) 18 (false)

  # BLOCK 13
  # PRED: 12 (true)
  prevmtime.59 = sb.st_mtim.tv_sec;
  prevmtime.54 = prevmtime;
  if (prevmtime.59 == prevmtime.54)
    goto <bb 14>;
  else
    goto <bb 18>;
  # SUCC: 14 (true) 18 (false)

  # BLOCK 14
  # PRED: 13 (true)
  prevuser.55 = prevuser;
  D.5700 = __builtin_strcmp (&authinfo, prevuser.55);
  if (D.5700 == 0)
    goto <bb 15>;
  else
    goto <bb 18>;
  # SUCC: 15 (true) 18 (false)

  # BLOCK 15
  # PRED: 14 (true)
  prevcryp.56 = prevcryp;
  prevcryp.56 = prevcryp;
  D.5752 = crypt (authpass, prevcryp.56);
  D.5709 = __builtin_strcmp (D.5752, prevcryp.56);
  if (D.5709 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;
  # SUCC: 16 (true) 17 (false)

  # BLOCK 16
  # PRED: 15 (true)
  D.5753 = strlen (&authinfo);
  D.5754 = &hc->maxremoteuser;
  D.5755 = &hc->remoteuser;
  httpd_realloc_str (D.5755, D.5754, D.5753);
  D.5756 = hc->remoteuser;
  strcpy (D.5756, &authinfo);
  D.5736 = 1;
  goto <bb 30>;
  # SUCC: 30 (fallthru)

  # BLOCK 17
  # PRED: 15 (false)
  send_authenticate (hc, dirname);
  D.5736 = -1;
  goto <bb 30>;
  # SUCC: 30 (fallthru)

  # BLOCK 18
  # PRED: 11 (false) 12 (false) 13 (false) 14 (false)
  authpath.48 = authpath;
  fp.57 = fopen (authpath.48, &"r"[0]);
  fp = fp.57;
  if (fp == 0B)
    goto <bb 19>;
  else
    goto <bb 20>;
  # SUCC: 19 (true) 20 (false)

  # BLOCK 19
  # PRED: 18 (true)
  authpath.48 = authpath;
  D.5758 = &hc->client_addr;
  D.5759 = httpd_ntoa (D.5758);
  syslog (3, &"%.80s auth file %.80s could not be opened - %m"[0], D.5759, authpath.48);
  D.5760 = hc->encodedurl;
  err403title.58 = err403title;
  httpd_send_err (hc, 403, err403title.58, &""[0], &"The requested URL \'%.80s\' is protected by an authentication file, but the authentication file cannot be opened.\n"[0], D.5760);
  D.5736 = -1;
  goto <bb 30>;
  # SUCC: 30 (fallthru)

  # BLOCK 20
  # PRED: 18 (false)
  goto <bb 28>;
  # SUCC: 28 (fallthru)

  # BLOCK 21
  # PRED: 28 (true)
  D.5762 = strlen (&line);
  l = (int) D.5762;
  D.5763 = l + -1;
  D.5764 = line[D.5763];
  if (D.5764 == 10)
    goto <bb 22>;
  else
    goto <bb 23>;
  # SUCC: 22 (true) 23 (false)

  # BLOCK 22
  # PRED: 21 (true)
  D.5763 = l + -1;
  line[D.5763] = 0;
  # SUCC: 23 (fallthru)

  # BLOCK 23
  # PRED: 21 (false) 22 (fallthru)
  cryp = __builtin_strchr (&line, 58);
  if (cryp == 0B)
    goto <bb 28>;
  else
    goto <bb 24>;
  # SUCC: 28 (true) 24 (false)

  # BLOCK 24
  # PRED: 23 (false)
  *cryp = 0;
  cryp = cryp + 1;
  D.5719 = __builtin_strcmp (&line, &authinfo);
  if (D.5719 == 0)
    goto <bb 25>;
  else
    goto <bb 28>;
  # SUCC: 25 (true) 28 (false)

  # BLOCK 25
  # PRED: 24 (true)
  fclose (fp);
  D.5765 = crypt (authpass, cryp);
  D.5728 = __builtin_strcmp (D.5765, cryp);
  if (D.5728 == 0)
    goto <bb 26>;
  else
    goto <bb 27>;
  # SUCC: 26 (true) 27 (false)

  # BLOCK 26
  # PRED: 25 (true)
  D.5766 = strlen (&line);
  D.5754 = &hc->maxremoteuser;
  D.5755 = &hc->remoteuser;
  httpd_realloc_str (D.5755, D.5754, D.5766);
  D.5756 = hc->remoteuser;
  strcpy (D.5756, &line);
  authpath.48 = authpath;
  D.5767 = strlen (authpath.48);
  httpd_realloc_str (&prevauthpath, &maxprevauthpath, D.5767);
  authpath.48 = authpath;
  prevauthpath.53 = prevauthpath;
  strcpy (prevauthpath.53, authpath.48);
  prevmtime.59 = sb.st_mtim.tv_sec;
  prevmtime = prevmtime.59;
  D.5768 = strlen (&authinfo);
  httpd_realloc_str (&prevuser, &maxprevuser, D.5768);
  prevuser.55 = prevuser;
  strcpy (prevuser.55, &authinfo);
  D.5769 = strlen (cryp);
  httpd_realloc_str (&prevcryp, &maxprevcryp, D.5769);
  prevcryp.56 = prevcryp;
  strcpy (prevcryp.56, cryp);
  D.5736 = 1;
  goto <bb 30>;
  # SUCC: 30 (fallthru)

  # BLOCK 27
  # PRED: 25 (false)
  send_authenticate (hc, dirname);
  D.5736 = -1;
  goto <bb 30>;
  # SUCC: 30 (fallthru)

  # BLOCK 28
  # PRED: 20 (fallthru) 23 (true) 24 (false)
  D.5770 = fgets (&line, 500, fp);
  if (D.5770 != 0B)
    goto <bb 21>;
  else
    goto <bb 29>;
  # SUCC: 21 (true) 29 (false)

  # BLOCK 29
  # PRED: 28 (false)
  fclose (fp);
  send_authenticate (hc, dirname);
  D.5736 = -1;
  # SUCC: 30 (fallthru)

  # BLOCK 30
  # PRED: 3 (fallthru) 6 (fallthru) 8 (fallthru) 16 (fallthru) 17 (fallthru) 19 (fallthru) 26 (fallthru) 27 (fallthru) 29 (fallthru)
  return D.5736;
  # SUCC: EXIT

}


Removing basic block 20

;; Function b64_decode (b64_decode)

b64_decode (str, space, size)
{
  unsigned char c;
  int prev_d;
  int d;
  int phase;
  int space_idx;
  const char * cp;
  int D.5634;
  signed char D.5632;
  signed char D.5631;
  signed char D.5630;
  int D.5629;
  signed char D.5628;
  signed char D.5627;
  int D.5626;
  int D.5625;
  signed char D.5624;
  int D.5623;
  unsigned char * D.5622;
  long unsigned int D.5621;
  signed char D.5620;
  signed char D.5619;
  int D.5618;
  int D.5617;
  signed char D.5616;
  int D.5615;
  int D.5614;
  char D.5613;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  prev_d = 0;
  space_idx = 0;
  phase = 0;
  cp = str;
  goto <bb 17>;
  # SUCC: 17 (fallthru)

  # BLOCK 3
  # PRED: 17 (true)
  D.5613 = *cp;
  D.5614 = (int) D.5613;
  d = b64_decode_table[D.5614];
  if (d != -1)
    goto <bb 4>;
  else
    goto <bb 16>;
  # SUCC: 4 (true) 16 (false)

  # BLOCK 4
  # PRED: 3 (true)
  switch (phase)
    {
      case 0: goto <L2>;
      case 1: goto <L3>;
      case 2: goto <L6>;
      case 3: goto <L9>;
      default : goto <L12>;
    }
  # SUCC: 5 6 9 12 15

  # BLOCK 5
  # PRED: 4
<L2>:;
  phase = phase + 1;
  goto <bb 15> (<L12>);
  # SUCC: 15 (fallthru)

  # BLOCK 6
  # PRED: 4
<L3>:;
  D.5615 = prev_d << 2;
  D.5616 = (signed char) D.5615;
  D.5617 = d & 48;
  D.5618 = D.5617 >> 4;
  D.5619 = (signed char) D.5618;
  D.5620 = D.5616 | D.5619;
  c = (unsigned char) D.5620;
  if (space_idx < size)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  D.5621 = (long unsigned int) space_idx;
  D.5622 = space + D.5621;
  *D.5622 = c;
  space_idx = space_idx + 1;
  # SUCC: 8 (fallthru)

  # BLOCK 8
  # PRED: 6 (false) 7 (fallthru)
  phase = phase + 1;
  goto <bb 15> (<L12>);
  # SUCC: 15 (fallthru)

  # BLOCK 9
  # PRED: 4
<L6>:;
  D.5623 = prev_d << 4;
  D.5624 = (signed char) D.5623;
  D.5625 = d & 60;
  D.5626 = D.5625 >> 2;
  D.5627 = (signed char) D.5626;
  D.5628 = D.5624 | D.5627;
  c = (unsigned char) D.5628;
  if (space_idx < size)
    goto <bb 10>;
  else
    goto <bb 11>;
  # SUCC: 10 (true) 11 (false)

  # BLOCK 10
  # PRED: 9 (true)
  D.5621 = (long unsigned int) space_idx;
  D.5622 = space + D.5621;
  *D.5622 = c;
  space_idx = space_idx + 1;
  # SUCC: 11 (fallthru)

  # BLOCK 11
  # PRED: 9 (false) 10 (fallthru)
  phase = phase + 1;
  goto <bb 15> (<L12>);
  # SUCC: 15 (fallthru)

  # BLOCK 12
  # PRED: 4
<L9>:;
  D.5629 = prev_d << 6;
  D.5630 = (signed char) D.5629;
  D.5631 = (signed char) d;
  D.5632 = D.5630 | D.5631;
  c = (unsigned char) D.5632;
  if (space_idx < size)
    goto <bb 13>;
  else
    goto <bb 14>;
  # SUCC: 13 (true) 14 (false)

  # BLOCK 13
  # PRED: 12 (true)
  D.5621 = (long unsigned int) space_idx;
  D.5622 = space + D.5621;
  *D.5622 = c;
  space_idx = space_idx + 1;
  # SUCC: 14 (fallthru)

  # BLOCK 14
  # PRED: 12 (false) 13 (fallthru)
  phase = 0;
  # SUCC: 15 (fallthru)

  # BLOCK 15
  # PRED: 4 5 (fallthru) 8 (fallthru) 11 (fallthru) 14 (fallthru)
<L12>:;
  prev_d = d;
  # SUCC: 16 (fallthru)

  # BLOCK 16
  # PRED: 3 (false) 15 (fallthru)
  cp = cp + 1;
  # SUCC: 17 (fallthru)

  # BLOCK 17
  # PRED: 2 (fallthru) 16 (fallthru)
  D.5613 = *cp;
  if (D.5613 != 0)
    goto <bb 3>;
  else
    goto <bb 18>;
  # SUCC: 3 (true) 18 (false)

  # BLOCK 18
  # PRED: 17 (false)
  D.5634 = space_idx;
  # SUCC: 19 (fallthru)

  # BLOCK 19
  # PRED: 18 (fallthru)
  return D.5634;
  # SUCC: EXIT

}


Merging blocks 18 and 19

;; Function send_authenticate (send_authenticate)

send_authenticate (hc, realm)
{
  static char headstr[32] = "WWW-Authenticate: Basic realm=\"";
  static size_t maxheader = 0;
  static char * header;
  int D.5592;
  char * err401title.46;
  char * err401form.45;
  char * D.5589;
  char * header.44;
  long unsigned int maxheader.43;
  long unsigned int D.5586;
  long unsigned int D.5585;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.5585 = strlen (realm);
  D.5586 = D.5585 + 35;
  httpd_realloc_str (&header, &maxheader, D.5586);
  maxheader.43 = maxheader;
  header.44 = header;
  my_snprintf (header.44, maxheader.43, &"%s%s\"\r\n"[0], &headstr, realm);
  D.5589 = hc->encodedurl;
  err401form.45 = err401form;
  header.44 = header;
  err401title.46 = err401title;
  httpd_send_err (hc, 401, err401title.46, header.44, err401form.45, D.5589);
  D.5592 = hc->method;
  if (D.5592 == 3)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  hc->should_linger = 1;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (false) 3 (fallthru)
  return;
  # SUCC: EXIT

}



;; Function check_referer (check_referer)

check_referer (hc)
{
  char * cp;
  int r;
  char * err403title.266;
  char * D.7977;
  union httpd_sockaddr * D.7976;
  char * D.7975;
  char * D.7974;
  char * D.7973;
  int D.7972;
  int r.265;
  int D.7968;
  char * D.7967;
  struct httpd_server * D.7966;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.7966 = hc->hs;
  D.7967 = D.7966->url_pattern;
  if (D.7967 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.7968 = 1;
  goto <bb 13>;
  # SUCC: 13 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  r.265 = really_check_referer (hc);
  r = r.265;
  if (r == 0)
    goto <bb 5>;
  else
    goto <bb 12>;
  # SUCC: 5 (true) 12 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.7966 = hc->hs;
  D.7972 = D.7966->vhost;
  if (D.7972 == 0)
    goto <bb 8>;
  else
    goto <bb 6>;
  # SUCC: 8 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  D.7973 = hc->hostname;
  if (D.7973 == 0B)
    goto <bb 8>;
  else
    goto <bb 7>;
  # SUCC: 8 (true) 7 (false)

  # BLOCK 7
  # PRED: 6 (false)
  cp = hc->hostname;
  goto <bb 9>;
  # SUCC: 9 (fallthru)

  # BLOCK 8
  # PRED: 5 (true) 6 (true)
  D.7966 = hc->hs;
  cp = D.7966->server_hostname;
  # SUCC: 9 (fallthru)

  # BLOCK 9
  # PRED: 7 (fallthru) 8 (fallthru)
  if (cp == 0B)
    goto <bb 10>;
  else
    goto <bb 11>;
  # SUCC: 10 (true) 11 (false)

  # BLOCK 10
  # PRED: 9 (true)
  cp = &""[0];
  # SUCC: 11 (fallthru)

  # BLOCK 11
  # PRED: 9 (false) 10 (fallthru)
  D.7974 = hc->referer;
  D.7975 = hc->encodedurl;
  D.7976 = &hc->client_addr;
  D.7977 = httpd_ntoa (D.7976);
  syslog (6, &"%.80s non-local referer \"%.80s%.80s\" \"%.80s\""[0], D.7977, cp, D.7975, D.7974);
  D.7975 = hc->encodedurl;
  err403title.266 = err403title;
  httpd_send_err (hc, 403, err403title.266, &""[0], &"You must supply a local referer to get URL \'%.80s\' from this server.\n"[0], D.7975);
  # SUCC: 12 (fallthru)

  # BLOCK 12
  # PRED: 4 (false) 11 (fallthru)
  D.7968 = r;
  # SUCC: 13 (fallthru)

  # BLOCK 13
  # PRED: 3 (fallthru) 12 (fallthru)
  return D.7968;
  # SUCC: EXIT

}



;; Function really_check_referer (really_check_referer)

really_check_referer (hc)
{
  int __res;
  char * lp;
  static size_t refhost_size = 0;
  static char * refhost = 0B;
  char * cp3;
  char * cp2;
  char * cp1;
  struct httpd_server * hs;
  int D.8044;
  int D.8043;
  char * refhost.271;
  int D.8041;
  char * D.8040;
  char D.8039;
  const __int32_t * D.8038;
  long unsigned int D.8037;
  const __int32_t * D.8036;
  long unsigned int D.8035;
  long unsigned int D.8034;
  const __int32_t * D.8033;
  const __int32_t * * D.8032;
  unsigned int D.8031;
  unsigned int __c.270;
  const int iftmp.269;
  int D.8028;
  int D.8027;
  int D.7995;
  int D.8026;
  int D.8025;
  short unsigned int D.8024;
  const short unsigned int * D.8023;
  long unsigned int D.8022;
  long unsigned int D.8021;
  char D.8020;
  const short unsigned int * D.8019;
  const short unsigned int * * D.8018;
  long unsigned int D.8017;
  long int D.8016;
  long int cp1.268;
  long int cp2.267;
  char D.8013;
  _Bool D.8012;
  _Bool D.8011;
  _Bool D.8010;
  _Bool D.8009;
  char D.8008;
  int D.8007;
  int D.8006;
  char * D.8005;
  char * D.8004;
  int D.8003;
  char D.8002;
  char * D.8001;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  hs = hc->hs;
  D.8001 = hc->referer;
  if (D.8001 == 0B)
    goto <bb 5>;
  else
    goto <bb 3>;
  # SUCC: 5 (true) 3 (false)

  # BLOCK 3
  # PRED: 2 (false)
  D.8001 = hc->referer;
  D.8002 = *D.8001;
  if (D.8002 == 0)
    goto <bb 5>;
  else
    goto <bb 4>;
  # SUCC: 5 (true) 4 (false)

  # BLOCK 4
  # PRED: 3 (false)
  D.8001 = hc->referer;
  cp1 = strstr (D.8001, &"//"[0]);
  if (cp1 == 0B)
    goto <bb 5>;
  else
    goto <bb 9>;
  # SUCC: 5 (true) 9 (false)

  # BLOCK 5
  # PRED: 2 (true) 3 (true) 4 (true)
  D.8003 = hs->no_empty_referers;
  if (D.8003 != 0)
    goto <bb 6>;
  else
    goto <bb 8>;
  # SUCC: 6 (true) 8 (false)

  # BLOCK 6
  # PRED: 5 (true)
  D.8004 = hc->origfilename;
  D.8005 = hs->url_pattern;
  D.8006 = match (D.8005, D.8004);
  if (D.8006 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  D.8007 = 0;
  goto <bb 31>;
  # SUCC: 31 (fallthru)

  # BLOCK 8
  # PRED: 5 (false) 6 (false)
  D.8007 = 1;
  goto <bb 31>;
  # SUCC: 31 (fallthru)

  # BLOCK 9
  # PRED: 4 (false)
  cp1 = cp1 + 2;
  cp2 = cp1;
  goto <bb 11>;
  # SUCC: 11 (fallthru)

  # BLOCK 10
  # PRED: 12 (true)
  cp2 = cp2 + 1;
  # SUCC: 11 (fallthru)

  # BLOCK 11
  # PRED: 9 (fallthru) 10 (fallthru)
  D.8008 = *cp2;
  D.8009 = D.8008 != 47;
  D.8010 = D.8008 != 58;
  D.8011 = D.8009 && D.8010;
  D.8012 = !D.8011;
  if (D.8012)
    goto <bb 13>;
  else
    goto <bb 12>;
  # SUCC: 13 (true) 12 (false)

  # BLOCK 12
  # PRED: 11 (false)
  D.8013 = *cp2;
  if (D.8013 != 0)
    goto <bb 10>;
  else
    goto <bb 13>;
  # SUCC: 10 (true) 13 (false)

  # BLOCK 13
  # PRED: 11 (true) 12 (false)
  cp2.267 = (long int) cp2;
  cp1.268 = (long int) cp1;
  D.8016 = cp2.267 - cp1.268;
  D.8017 = (size_t) D.8016;
  httpd_realloc_str (&refhost, &refhost_size, D.8017);
  cp3 = refhost;
  goto <bb 18>;
  # SUCC: 18 (fallthru)

  # BLOCK 14
  # PRED: 18 (true)
  D.8018 = __ctype_b_loc ();
  D.8019 = *D.8018;
  D.8020 = *cp1;
  D.8021 = (long unsigned int) D.8020;
  D.8022 = D.8021 * 2;
  D.8023 = D.8019 + D.8022;
  D.8024 = *D.8023;
  D.8025 = (int) D.8024;
  D.8026 = D.8025 & 256;
  if (D.8026 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;
  # SUCC: 15 (true) 16 (false)

  # BLOCK 15
  # PRED: 14 (true)
  D.8032 = __ctype_tolower_loc ();
  D.8033 = *D.8032;
  D.8020 = *cp1;
  D.8021 = (long unsigned int) D.8020;
  D.8037 = D.8021 * 4;
  D.8038 = D.8033 + D.8037;
  __res = *D.8038;
  D.7995 = __res;
  D.8039 = (char) D.7995;
  *cp3 = D.8039;
  goto <bb 17>;
  # SUCC: 17 (fallthru)

  # BLOCK 16
  # PRED: 14 (false)
  D.8020 = *cp1;
  *cp3 = D.8020;
  # SUCC: 17 (fallthru)

  # BLOCK 17
  # PRED: 15 (fallthru) 16 (fallthru)
  cp1 = cp1 + 1;
  cp3 = cp3 + 1;
  # SUCC: 18 (fallthru)

  # BLOCK 18
  # PRED: 13 (fallthru) 17 (fallthru)
  if (cp1 < cp2)
    goto <bb 14>;
  else
    goto <bb 19>;
  # SUCC: 14 (true) 19 (false)

  # BLOCK 19
  # PRED: 18 (false)
  *cp3 = 0;
  D.8040 = hs->local_pattern;
  if (D.8040 != 0B)
    goto <bb 20>;
  else
    goto <bb 21>;
  # SUCC: 20 (true) 21 (false)

  # BLOCK 20
  # PRED: 19 (true)
  lp = hs->local_pattern;
  goto <bb 27>;
  # SUCC: 27 (fallthru)

  # BLOCK 21
  # PRED: 19 (false)
  D.8041 = hs->vhost;
  if (D.8041 == 0)
    goto <bb 22>;
  else
    goto <bb 25>;
  # SUCC: 22 (true) 25 (false)

  # BLOCK 22
  # PRED: 21 (true)
  lp = hs->server_hostname;
  if (lp == 0B)
    goto <bb 23>;
  else
    goto <bb 24>;
  # SUCC: 23 (true) 24 (false)

  # BLOCK 23
  # PRED: 22 (true)
  D.8007 = 1;
  goto <bb 31>;
  # SUCC: 31 (fallthru)

  # BLOCK 24
  # PRED: 22 (false)
  goto <bb 27>;
  # SUCC: 27 (fallthru)

  # BLOCK 25
  # PRED: 21 (false)
  lp = hc->hostname;
  if (lp == 0B)
    goto <bb 26>;
  else
    goto <bb 27>;
  # SUCC: 26 (true) 27 (false)

  # BLOCK 26
  # PRED: 25 (true)
  D.8007 = 1;
  goto <bb 31>;
  # SUCC: 31 (fallthru)

  # BLOCK 27
  # PRED: 20 (fallthru) 24 (fallthru) 25 (false)
  refhost.271 = refhost;
  D.8043 = match (lp, refhost.271);
  if (D.8043 == 0)
    goto <bb 28>;
  else
    goto <bb 30>;
  # SUCC: 28 (true) 30 (false)

  # BLOCK 28
  # PRED: 27 (true)
  D.8004 = hc->origfilename;
  D.8005 = hs->url_pattern;
  D.8044 = match (D.8005, D.8004);
  if (D.8044 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;
  # SUCC: 29 (true) 30 (false)

  # BLOCK 29
  # PRED: 28 (true)
  D.8007 = 0;
  goto <bb 31>;
  # SUCC: 31 (fallthru)

  # BLOCK 30
  # PRED: 27 (false) 28 (false)
  D.8007 = 1;
  # SUCC: 31 (fallthru)

  # BLOCK 31
  # PRED: 7 (fallthru) 8 (fallthru) 23 (fallthru) 26 (fallthru) 29 (fallthru) 30 (fallthru)
  return D.8007;
  # SUCC: EXIT

}


Removing basic block 24

;; Function cgi (cgi)

cgi (hc)
{
  union ClientData client_data;
  int r;
  char * err501title.239;
  char * err501form.238;
  char * D.7605;
  int D.7604;
  struct Timer * D.7603;
  char * D.7602;
  char * err500title.237;
  char * err500form.236;
  int r.235;
  int D.7598;
  int D.7597;
  int D.7596;
  char * httpd_err503title.234;
  char * httpd_err503form.233;
  char * D.7593;
  int D.7592;
  int D.7591;
  struct httpd_server * D.7590;
  _Bool D.7589;
  _Bool D.7588;
  _Bool D.7587;
  int D.7586;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.7586 = hc->method;
  D.7587 = D.7586 == 1;
  D.7588 = D.7586 == 3;
  D.7589 = D.7587 || D.7588;
  if (D.7589)
    goto <bb 3>;
  else
    goto <bb 13>;
  # SUCC: 3 (true) 13 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.7590 = hc->hs;
  D.7591 = D.7590->cgi_limit;
  if (D.7591 != 0)
    goto <bb 4>;
  else
    goto <bb 6>;
  # SUCC: 4 (true) 6 (false)

  # BLOCK 4
  # PRED: 3 (true)
  D.7590 = hc->hs;
  D.7592 = D.7590->cgi_count;
  D.7590 = hc->hs;
  D.7591 = D.7590->cgi_limit;
  if (D.7592 >= D.7591)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.7593 = hc->encodedurl;
  httpd_err503form.233 = httpd_err503form;
  httpd_err503title.234 = httpd_err503title;
  httpd_send_err (hc, 503, httpd_err503title.234, &""[0], httpd_err503form.233, D.7593);
  D.7596 = -1;
  goto <bb 15>;
  # SUCC: 15 (fallthru)

  # BLOCK 6
  # PRED: 3 (false) 4 (false)
  D.7590 = hc->hs;
  D.7592 = D.7590->cgi_count;
  D.7597 = D.7592 + 1;
  D.7590->cgi_count = D.7597;
  D.7598 = hc->conn_fd;
  httpd_clear_ndelay (D.7598);
  r.235 = fork ();
  r = r.235;
  if (r < 0)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  syslog (3, &"fork - %m"[0]);
  D.7593 = hc->encodedurl;
  err500form.236 = err500form;
  err500title.237 = err500title;
  httpd_send_err (hc, 500, err500title.237, &""[0], err500form.236, D.7593);
  D.7596 = -1;
  goto <bb 15>;
  # SUCC: 15 (fallthru)

  # BLOCK 8
  # PRED: 6 (false)
  if (r == 0)
    goto <bb 9>;
  else
    goto <bb 10>;
  # SUCC: 9 (true) 10 (false)

  # BLOCK 9
  # PRED: 8 (true)
  sub_process = 1;
  D.7590 = hc->hs;
  httpd_unlisten (D.7590);
  cgi_child (hc);
  # SUCC: 10 (fallthru)

  # BLOCK 10
  # PRED: 8 (false) 9 (fallthru)
  D.7602 = hc->expnfilename;
  syslog (6, &"spawned CGI process %d for file \'%.200s\'"[0], r, D.7602);
  client_data.i = r;
  D.7603 = tmr_create (0B, cgi_kill, client_data, 30000, 0);
  if (D.7603 == 0B)
    goto <bb 11>;
  else
    goto <bb 12>;
  # SUCC: 11 (true) 12 (false)

  # BLOCK 11
  # PRED: 10 (true)
  syslog (2, &"tmr_create(cgi_kill child) failed"[0]);
  exit (1);
  # SUCC:

  # BLOCK 12
  # PRED: 10 (false)
  hc->status = 200;
  hc->bytes_sent = 25000;
  hc->should_linger = 0;
  goto <bb 14>;
  # SUCC: 14 (fallthru)

  # BLOCK 13
  # PRED: 2 (false)
  D.7604 = hc->method;
  D.7605 = httpd_method_str (D.7604);
  err501form.238 = err501form;
  err501title.239 = err501title;
  httpd_send_err (hc, 501, err501title.239, &""[0], err501form.238, D.7605);
  D.7596 = -1;
  goto <bb 15>;
  # SUCC: 15 (fallthru)

  # BLOCK 14
  # PRED: 12 (fallthru)
  D.7596 = 0;
  # SUCC: 15 (fallthru)

  # BLOCK 15
  # PRED: 5 (fallthru) 7 (fallthru) 13 (fallthru) 14 (fallthru)
  return D.7596;
  # SUCC: EXIT

}


Merging blocks 12 and 14

;; Function cgi_child (cgi_child)

cgi_child (hc)
{
  int p[2];
  int p[2];
  int newfd;
  char * directory;
  char * binary;
  char * * envp;
  char * * argp;
  int r;
  char * directory.232;
  char * D.7579;
  unsigned int D.7578;
  unsigned int D.7577;
  int D.7576;
  int D.7575;
  int r.231;
  int D.7573;
  int D.7572;
  int D.7571;
  char * D.7570;
  int D.7567;
  int D.7566;
  int r.230;
  char * err500title.229;
  char * err500form.228;
  char * D.7562;
  int D.7561;
  long unsigned int D.7560;
  long unsigned int D.7559;
  int D.7558;
  char * * argp.227;
  char * * envp.226;
  int newfd.225;
  unsigned int D.7552;
  int D.7551;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.7551 = hc->conn_fd;
  fcntl (D.7551, 2, 0);
  closelog ();
  D.7551 = hc->conn_fd;
  D.7552 = (unsigned int) D.7551;
  if (D.7552 <= 2)
    goto <bb 3>;
  else
    goto <bb 5>;
  # SUCC: 3 (true) 5 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.7551 = hc->conn_fd;
  newfd.225 = dup2 (D.7551, 3);
  newfd = newfd.225;
  if (newfd >= 0)
    goto <bb 4>;
  else
    goto <bb 5>;
  # SUCC: 4 (true) 5 (false)

  # BLOCK 4
  # PRED: 3 (true)
  hc->conn_fd = newfd;
  # SUCC: 5 (fallthru)

  # BLOCK 5
  # PRED: 2 (false) 3 (false) 4 (fallthru)
  envp.226 = make_envp (hc);
  envp = envp.226;
  argp.227 = make_argp (hc);
  argp = argp.227;
  D.7558 = hc->method;
  if (D.7558 != 3)
    goto <bb 16>;
  else
    goto <bb 6>;
  # SUCC: 16 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  D.7559 = hc->read_idx;
  D.7560 = hc->checked_idx;
  if (D.7559 <= D.7560)
    goto <bb 16>;
  else
    goto <bb 7>;
  # SUCC: 16 (true) 7 (false)

  # BLOCK 7
  # PRED: 6 (false)
  D.7561 = pipe (&p);
  if (D.7561 < 0)
    goto <bb 8>;
  else
    goto <bb 9>;
  # SUCC: 8 (true) 9 (false)

  # BLOCK 8
  # PRED: 7 (true)
  syslog (3, &"pipe - %m"[0]);
  D.7562 = hc->encodedurl;
  err500form.228 = err500form;
  err500title.229 = err500title;
  httpd_send_err (hc, 500, err500title.229, &""[0], err500form.228, D.7562);
  httpd_write_response (hc);
  exit (1);
  # SUCC:

  # BLOCK 9
  # PRED: 7 (false)
  r.230 = fork ();
  r = r.230;
  if (r < 0)
    goto <bb 10>;
  else
    goto <bb 11>;
  # SUCC: 10 (true) 11 (false)

  # BLOCK 10
  # PRED: 9 (true)
  syslog (3, &"fork - %m"[0]);
  D.7562 = hc->encodedurl;
  err500form.228 = err500form;
  err500title.229 = err500title;
  httpd_send_err (hc, 500, err500title.229, &""[0], err500form.228, D.7562);
  httpd_write_response (hc);
  exit (1);
  # SUCC:

  # BLOCK 11
  # PRED: 9 (false)
  if (r == 0)
    goto <bb 12>;
  else
    goto <bb 13>;
  # SUCC: 12 (true) 13 (false)

  # BLOCK 12
  # PRED: 11 (true)
  sub_process = 1;
  D.7566 = p[0];
  close (D.7566);
  D.7567 = p[1];
  cgi_interpose_input (hc, D.7567);
  exit (0);
  # SUCC:

  # BLOCK 13
  # PRED: 11 (false)
  D.7567 = p[1];
  close (D.7567);
  D.7566 = p[0];
  if (D.7566 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;
  # SUCC: 14 (true) 15 (false)

  # BLOCK 14
  # PRED: 13 (true)
  D.7566 = p[0];
  dup2 (D.7566, 0);
  D.7566 = p[0];
  close (D.7566);
  # SUCC: 15 (fallthru)

  # BLOCK 15
  # PRED: 13 (false) 14 (fallthru)
  goto <bb 18>;
  # SUCC: 18 (fallthru)

  # BLOCK 16
  # PRED: 5 (true) 6 (true)
  D.7551 = hc->conn_fd;
  if (D.7551 != 0)
    goto <bb 17>;
  else
    goto <bb 18>;
  # SUCC: 17 (true) 18 (false)

  # BLOCK 17
  # PRED: 16 (true)
  D.7551 = hc->conn_fd;
  dup2 (D.7551, 0);
  # SUCC: 18 (fallthru)

  # BLOCK 18
  # PRED: 15 (fallthru) 16 (false) 17 (fallthru)
  D.7570 = *argp;
  D.7571 = strncmp (D.7570, &"nph-"[0], 4);
  if (D.7571 == 0)
    goto <bb 33>;
  else
    goto <bb 19>;
  # SUCC: 33 (true) 19 (false)

  # BLOCK 19
  # PRED: 18 (false)
  D.7572 = hc->mime_flag;
  if (D.7572 == 0)
    goto <bb 33>;
  else
    goto <bb 20>;
  # SUCC: 33 (true) 20 (false)

  # BLOCK 20
  # PRED: 19 (false)
  D.7573 = pipe (&p);
  if (D.7573 < 0)
    goto <bb 21>;
  else
    goto <bb 22>;
  # SUCC: 21 (true) 22 (false)

  # BLOCK 21
  # PRED: 20 (true)
  syslog (3, &"pipe - %m"[0]);
  D.7562 = hc->encodedurl;
  err500form.228 = err500form;
  err500title.229 = err500title;
  httpd_send_err (hc, 500, err500title.229, &""[0], err500form.228, D.7562);
  httpd_write_response (hc);
  exit (1);
  # SUCC:

  # BLOCK 22
  # PRED: 20 (false)
  r.231 = fork ();
  r = r.231;
  if (r < 0)
    goto <bb 23>;
  else
    goto <bb 24>;
  # SUCC: 23 (true) 24 (false)

  # BLOCK 23
  # PRED: 22 (true)
  syslog (3, &"fork - %m"[0]);
  D.7562 = hc->encodedurl;
  err500form.228 = err500form;
  err500title.229 = err500title;
  httpd_send_err (hc, 500, err500title.229, &""[0], err500form.228, D.7562);
  httpd_write_response (hc);
  exit (1);
  # SUCC:

  # BLOCK 24
  # PRED: 22 (false)
  if (r == 0)
    goto <bb 25>;
  else
    goto <bb 26>;
  # SUCC: 25 (true) 26 (false)

  # BLOCK 25
  # PRED: 24 (true)
  sub_process = 1;
  D.7575 = p[1];
  close (D.7575);
  D.7576 = p[0];
  cgi_interpose_output (hc, D.7576);
  exit (0);
  # SUCC:

  # BLOCK 26
  # PRED: 24 (false)
  D.7576 = p[0];
  close (D.7576);
  D.7575 = p[1];
  if (D.7575 != 1)
    goto <bb 27>;
  else
    goto <bb 28>;
  # SUCC: 27 (true) 28 (false)

  # BLOCK 27
  # PRED: 26 (true)
  D.7575 = p[1];
  dup2 (D.7575, 1);
  # SUCC: 28 (fallthru)

  # BLOCK 28
  # PRED: 26 (false) 27 (fallthru)
  D.7575 = p[1];
  if (D.7575 != 2)
    goto <bb 29>;
  else
    goto <bb 30>;
  # SUCC: 29 (true) 30 (false)

  # BLOCK 29
  # PRED: 28 (true)
  D.7575 = p[1];
  dup2 (D.7575, 2);
  # SUCC: 30 (fallthru)

  # BLOCK 30
  # PRED: 28 (false) 29 (fallthru)
  D.7575 = p[1];
  D.7577 = (unsigned int) D.7575;
  D.7578 = D.7577 + 4294967295;
  if (D.7578 > 1)
    goto <bb 31>;
  else
    goto <bb 32>;
  # SUCC: 31 (true) 32 (false)

  # BLOCK 31
  # PRED: 30 (true)
  D.7575 = p[1];
  close (D.7575);
  # SUCC: 32 (fallthru)

  # BLOCK 32
  # PRED: 30 (false) 31 (fallthru)
  goto <bb 37>;
  # SUCC: 37 (fallthru)

  # BLOCK 33
  # PRED: 18 (true) 19 (true)
  D.7551 = hc->conn_fd;
  if (D.7551 != 1)
    goto <bb 34>;
  else
    goto <bb 35>;
  # SUCC: 34 (true) 35 (false)

  # BLOCK 34
  # PRED: 33 (true)
  D.7551 = hc->conn_fd;
  dup2 (D.7551, 1);
  # SUCC: 35 (fallthru)

  # BLOCK 35
  # PRED: 33 (false) 34 (fallthru)
  D.7551 = hc->conn_fd;
  if (D.7551 != 2)
    goto <bb 36>;
  else
    goto <bb 37>;
  # SUCC: 36 (true) 37 (false)

  # BLOCK 36
  # PRED: 35 (true)
  D.7551 = hc->conn_fd;
  dup2 (D.7551, 2);
  # SUCC: 37 (fallthru)

  # BLOCK 37
  # PRED: 32 (fallthru) 35 (false) 36 (fallthru)
  nice (10);
  D.7579 = hc->expnfilename;
  directory.232 = __strdup (D.7579);
  directory = directory.232;
  if (directory == 0B)
    goto <bb 38>;
  else
    goto <bb 39>;
  # SUCC: 38 (true) 39 (false)

  # BLOCK 38
  # PRED: 37 (true)
  binary = hc->expnfilename;
  goto <bb 42>;
  # SUCC: 42 (fallthru)

  # BLOCK 39
  # PRED: 37 (false)
  binary = strrchr (directory, 47);
  if (binary == 0B)
    goto <bb 40>;
  else
    goto <bb 41>;
  # SUCC: 40 (true) 41 (false)

  # BLOCK 40
  # PRED: 39 (true)
  binary = hc->expnfilename;
  goto <bb 42>;
  # SUCC: 42 (fallthru)

  # BLOCK 41
  # PRED: 39 (false)
  *binary = 0;
  binary = binary + 1;
  chdir (directory);
  # SUCC: 42 (fallthru)

  # BLOCK 42
  # PRED: 38 (fallthru) 40 (fallthru) 41 (fallthru)
  sigset (13, 0B);
  execve (binary, argp, envp);
  D.7579 = hc->expnfilename;
  syslog (3, &"execve %.80s - %m"[0], D.7579);
  D.7562 = hc->encodedurl;
  err500form.228 = err500form;
  err500title.229 = err500title;
  httpd_send_err (hc, 500, err500title.229, &""[0], err500form.228, D.7562);
  httpd_write_response (hc);
  exit (1);
  # SUCC:

}


Removing basic block 15
Removing basic block 32

;; Function make_envp (make_envp)

make_envp (hc)
{
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  size_t __s1_len;
  size_t l;
  char * cp2;
  char buf[256];
  char * cp;
  int envn;
  static char * envp[50];
  char * * D.7364;
  char * D.7363;
  char * D.7362;
  char * D.7361;
  char * D.7360;
  char * D.7359;
  char * D.7358;
  char D.7357;
  char * D.7356;
  char * D.7355;
  char D.7354;
  char * D.7353;
  char * D.7352;
  long unsigned int D.7351;
  char * D.7350;
  char D.7349;
  char * D.7348;
  char * D.7347;
  char D.7346;
  char * D.7345;
  char * D.7344;
  char D.7343;
  char * D.7342;
  char * D.7341;
  char D.7340;
  char * D.7339;
  char * D.7338;
  char D.7337;
  char * D.7336;
  char * D.7335;
  char D.7334;
  char * D.7333;
  char * D.7332;
  char D.7331;
  char * D.7330;
  char * D.7329;
  char D.7328;
  char * D.7327;
  char * D.7326;
  char * D.7325;
  union httpd_sockaddr * D.7324;
  char * D.7323;
  char D.7322;
  char * D.7321;
  char * D.7320;
  int D.7319;
  unsigned char D.7318;
  const unsigned char * D.7317;
  int D.7316;
  unsigned char D.7315;
  const unsigned char * D.7314;
  _Bool D.7313;
  _Bool D.7312;
  int D.7311;
  unsigned char D.7310;
  const unsigned char * D.7309;
  int D.7308;
  unsigned char D.7307;
  const unsigned char * D.7306;
  _Bool D.7305;
  _Bool D.7304;
  int D.7303;
  unsigned char D.7302;
  const unsigned char * D.7301;
  int D.7300;
  unsigned char D.7299;
  const unsigned char * D.7298;
  _Bool D.7297;
  _Bool D.7296;
  _Bool D.7295;
  int D.7294;
  unsigned char D.7293;
  const unsigned char * D.7292;
  int D.7291;
  unsigned char D.7290;
  char * D.7289;
  int D.7259;
  int iftmp.211;
  int D.7260;
  char * const iftmp.210;
  char * D.7286;
  void * D.7285;
  long unsigned int D.7284;
  long unsigned int D.7283;
  long unsigned int D.7282;
  char * D.7281;
  char * D.7280;
  char D.7279;
  char * D.7278;
  char * D.7277;
  char * D.7276;
  int D.7275;
  char * D.7274;
  int D.7273;
  short unsigned int D.7272;
  char * D.7271;
  char * D.7270;
  char * D.7269;
  char * D.7268;
  int D.7267;
  struct httpd_server * D.7266;
  char * D.7263;
  char * D.7262;
  int envn.209;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  envn = 0;
  envn.209 = envn;
  D.7262 = build_env (&"PATH=%s"[0], &"/usr/local/bin:/usr/ucb:/bin:/usr/bin"[0]);
  envp[envn.209] = D.7262;
  envn = envn + 1;
  envn.209 = envn;
  D.7263 = build_env (&"SERVER_SOFTWARE=%s"[0], &"thttpd/2.25b 29dec2003"[0]);
  envp[envn.209] = D.7263;
  envn = envn + 1;
  D.7266 = hc->hs;
  D.7267 = D.7266->vhost;
  if (D.7267 == 0)
    goto <bb 5>;
  else
    goto <bb 3>;
  # SUCC: 5 (true) 3 (false)

  # BLOCK 3
  # PRED: 2 (false)
  D.7268 = hc->hostname;
  if (D.7268 == 0B)
    goto <bb 5>;
  else
    goto <bb 4>;
  # SUCC: 5 (true) 4 (false)

  # BLOCK 4
  # PRED: 3 (false)
  cp = hc->hostname;
  goto <bb 6>;
  # SUCC: 6 (fallthru)

  # BLOCK 5
  # PRED: 2 (true) 3 (true)
  D.7266 = hc->hs;
  cp = D.7266->server_hostname;
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 4 (fallthru) 5 (fallthru)
  if (cp != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  envn.209 = envn;
  D.7269 = build_env (&"SERVER_NAME=%s"[0], cp);
  envp[envn.209] = D.7269;
  envn = envn + 1;
  # SUCC: 8 (fallthru)

  # BLOCK 8
  # PRED: 6 (false) 7 (fallthru)
  envn.209 = envn;
  envp[envn.209] = &"GATEWAY_INTERFACE=CGI/1.1"[0];
  envn = envn + 1;
  envn.209 = envn;
  D.7270 = hc->protocol;
  D.7271 = build_env (&"SERVER_PROTOCOL=%s"[0], D.7270);
  envp[envn.209] = D.7271;
  envn = envn + 1;
  D.7266 = hc->hs;
  D.7272 = D.7266->port;
  D.7273 = (int) D.7272;
  my_snprintf (&buf, 256, &"%d"[0], D.7273);
  envn.209 = envn;
  D.7274 = build_env (&"SERVER_PORT=%s"[0], &buf);
  envp[envn.209] = D.7274;
  envn = envn + 1;
  envn.209 = envn;
  D.7275 = hc->method;
  D.7276 = httpd_method_str (D.7275);
  D.7277 = build_env (&"REQUEST_METHOD=%s"[0], D.7276);
  envp[envn.209] = D.7277;
  envn = envn + 1;
  D.7278 = hc->pathinfo;
  D.7279 = *D.7278;
  if (D.7279 != 0)
    goto <bb 9>;
  else
    goto <bb 11>;
  # SUCC: 9 (true) 11 (false)

  # BLOCK 9
  # PRED: 8 (true)
  envn.209 = envn;
  D.7278 = hc->pathinfo;
  D.7280 = build_env (&"PATH_INFO=/%s"[0], D.7278);
  envp[envn.209] = D.7280;
  envn = envn + 1;
  D.7266 = hc->hs;
  D.7281 = D.7266->cwd;
  D.7282 = strlen (D.7281);
  D.7278 = hc->pathinfo;
  D.7283 = strlen (D.7278);
  D.7284 = D.7282 + D.7283;
  l = D.7284 + 1;
  D.7285 = malloc (l);
  cp2 = (char *) D.7285;
  if (cp2 != 0B)
    goto <bb 10>;
  else
    goto <bb 11>;
  # SUCC: 10 (true) 11 (false)

  # BLOCK 10
  # PRED: 9 (true)
  D.7278 = hc->pathinfo;
  D.7266 = hc->hs;
  D.7281 = D.7266->cwd;
  my_snprintf (cp2, l, &"%s%s"[0], D.7281, D.7278);
  envn.209 = envn;
  D.7286 = build_env (&"PATH_TRANSLATED=%s"[0], cp2);
  envp[envn.209] = D.7286;
  envn = envn + 1;
  # SUCC: 11 (fallthru)

  # BLOCK 11
  # PRED: 8 (false) 9 (false) 10 (fallthru)
  envn.209 = envn;
  __s2_len = 1;
  if (__s2_len <= 3)
    goto <bb 12>;
  else
    goto <bb 17>;
  # SUCC: 12 (true) 17 (false)

  # BLOCK 12
  # PRED: 11 (true)
  D.7289 = hc->origfilename;
  __s1 = (const unsigned char *) D.7289;
  D.7290 = *__s1;
  D.7291 = (int) D.7290;
  D.7292 = (const unsigned char *) ".";
  D.7293 = *D.7292;
  D.7294 = (int) D.7293;
  __result = D.7291 - D.7294;
  D.7295 = __s2_len != 0;
  D.7296 = __result == 0;
  D.7297 = D.7295 && D.7296;
  if (D.7297)
    goto <bb 13>;
  else
    goto <bb 16>;
  # SUCC: 13 (true) 16 (false)

  # BLOCK 13
  # PRED: 12 (true)
  D.7298 = __s1 + 1;
  D.7299 = *D.7298;
  D.7300 = (int) D.7299;
  D.7301 = (const unsigned char *) &"."[1];
  D.7302 = *D.7301;
  D.7303 = (int) D.7302;
  __result = D.7300 - D.7303;
  D.7304 = __s2_len > 1;
  D.7296 = __result == 0;
  D.7305 = D.7304 && D.7296;
  if (D.7305)
    goto <bb 14>;
  else
    goto <bb 16>;
  # SUCC: 14 (true) 16 (false)

  # BLOCK 14
  # PRED: 13 (true)
  D.7306 = __s1 + 2;
  D.7307 = *D.7306;
  D.7308 = (int) D.7307;
  D.7309 = (const unsigned char *) &"."[2];
  D.7310 = *D.7309;
  D.7311 = (int) D.7310;
  __result = D.7308 - D.7311;
  D.7312 = __s2_len > 2;
  D.7296 = __result == 0;
  D.7313 = D.7312 && D.7296;
  if (D.7313)
    goto <bb 15>;
  else
    goto <bb 16>;
  # SUCC: 15 (true) 16 (false)

  # BLOCK 15
  # PRED: 14 (true)
  D.7314 = __s1 + 3;
  D.7315 = *D.7314;
  D.7316 = (int) D.7315;
  D.7317 = (const unsigned char *) &"."[3];
  D.7318 = *D.7317;
  D.7319 = (int) D.7318;
  __result = D.7316 - D.7319;
  # SUCC: 16 (fallthru)

  # BLOCK 16
  # PRED: 12 (false) 13 (false) 14 (false) 15 (fallthru)
  D.7259 = __result;
  iftmp.211 = D.7259;
  goto <bb 18>;
  # SUCC: 18 (fallthru)

  # BLOCK 17
  # PRED: 11 (false)
  D.7289 = hc->origfilename;
  iftmp.211 = __builtin_strcmp (D.7289, &"."[0]);
  # SUCC: 18 (fallthru)

  # BLOCK 18
  # PRED: 16 (fallthru) 17 (fallthru)
  D.7260 = iftmp.211;
  if (D.7260 != 0)
    goto <bb 19>;
  else
    goto <bb 20>;
  # SUCC: 19 (true) 20 (false)

  # BLOCK 19
  # PRED: 18 (true)
  iftmp.210 = hc->origfilename;
  goto <bb 21>;
  # SUCC: 21 (fallthru)

  # BLOCK 20
  # PRED: 18 (false)
  iftmp.210 = &""[0];
  # SUCC: 21 (fallthru)

  # BLOCK 21
  # PRED: 19 (fallthru) 20 (fallthru)
  D.7320 = build_env (&"SCRIPT_NAME=/%s"[0], iftmp.210);
  envp[envn.209] = D.7320;
  envn = envn + 1;
  D.7321 = hc->query;
  D.7322 = *D.7321;
  if (D.7322 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;
  # SUCC: 22 (true) 23 (false)

  # BLOCK 22
  # PRED: 21 (true)
  envn.209 = envn;
  D.7321 = hc->query;
  D.7323 = build_env (&"QUERY_STRING=%s"[0], D.7321);
  envp[envn.209] = D.7323;
  envn = envn + 1;
  # SUCC: 23 (fallthru)

  # BLOCK 23
  # PRED: 21 (false) 22 (fallthru)
  envn.209 = envn;
  D.7324 = &hc->client_addr;
  D.7325 = httpd_ntoa (D.7324);
  D.7326 = build_env (&"REMOTE_ADDR=%s"[0], D.7325);
  envp[envn.209] = D.7326;
  envn = envn + 1;
  D.7327 = hc->referer;
  D.7328 = *D.7327;
  if (D.7328 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;
  # SUCC: 24 (true) 25 (false)

  # BLOCK 24
  # PRED: 23 (true)
  envn.209 = envn;
  D.7327 = hc->referer;
  D.7329 = build_env (&"HTTP_REFERER=%s"[0], D.7327);
  envp[envn.209] = D.7329;
  envn = envn + 1;
  # SUCC: 25 (fallthru)

  # BLOCK 25
  # PRED: 23 (false) 24 (fallthru)
  D.7330 = hc->useragent;
  D.7331 = *D.7330;
  if (D.7331 != 0)
    goto <bb 26>;
  else
    goto <bb 27>;
  # SUCC: 26 (true) 27 (false)

  # BLOCK 26
  # PRED: 25 (true)
  envn.209 = envn;
  D.7330 = hc->useragent;
  D.7332 = build_env (&"HTTP_USER_AGENT=%s"[0], D.7330);
  envp[envn.209] = D.7332;
  envn = envn + 1;
  # SUCC: 27 (fallthru)

  # BLOCK 27
  # PRED: 25 (false) 26 (fallthru)
  D.7333 = hc->accept;
  D.7334 = *D.7333;
  if (D.7334 != 0)
    goto <bb 28>;
  else
    goto <bb 29>;
  # SUCC: 28 (true) 29 (false)

  # BLOCK 28
  # PRED: 27 (true)
  envn.209 = envn;
  D.7333 = hc->accept;
  D.7335 = build_env (&"HTTP_ACCEPT=%s"[0], D.7333);
  envp[envn.209] = D.7335;
  envn = envn + 1;
  # SUCC: 29 (fallthru)

  # BLOCK 29
  # PRED: 27 (false) 28 (fallthru)
  D.7336 = hc->accepte;
  D.7337 = *D.7336;
  if (D.7337 != 0)
    goto <bb 30>;
  else
    goto <bb 31>;
  # SUCC: 30 (true) 31 (false)

  # BLOCK 30
  # PRED: 29 (true)
  envn.209 = envn;
  D.7336 = hc->accepte;
  D.7338 = build_env (&"HTTP_ACCEPT_ENCODING=%s"[0], D.7336);
  envp[envn.209] = D.7338;
  envn = envn + 1;
  # SUCC: 31 (fallthru)

  # BLOCK 31
  # PRED: 29 (false) 30 (fallthru)
  D.7339 = hc->acceptl;
  D.7340 = *D.7339;
  if (D.7340 != 0)
    goto <bb 32>;
  else
    goto <bb 33>;
  # SUCC: 32 (true) 33 (false)

  # BLOCK 32
  # PRED: 31 (true)
  envn.209 = envn;
  D.7339 = hc->acceptl;
  D.7341 = build_env (&"HTTP_ACCEPT_LANGUAGE=%s"[0], D.7339);
  envp[envn.209] = D.7341;
  envn = envn + 1;
  # SUCC: 33 (fallthru)

  # BLOCK 33
  # PRED: 31 (false) 32 (fallthru)
  D.7342 = hc->cookie;
  D.7343 = *D.7342;
  if (D.7343 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;
  # SUCC: 34 (true) 35 (false)

  # BLOCK 34
  # PRED: 33 (true)
  envn.209 = envn;
  D.7342 = hc->cookie;
  D.7344 = build_env (&"HTTP_COOKIE=%s"[0], D.7342);
  envp[envn.209] = D.7344;
  envn = envn + 1;
  # SUCC: 35 (fallthru)

  # BLOCK 35
  # PRED: 33 (false) 34 (fallthru)
  D.7345 = hc->contenttype;
  D.7346 = *D.7345;
  if (D.7346 != 0)
    goto <bb 36>;
  else
    goto <bb 37>;
  # SUCC: 36 (true) 37 (false)

  # BLOCK 36
  # PRED: 35 (true)
  envn.209 = envn;
  D.7345 = hc->contenttype;
  D.7347 = build_env (&"CONTENT_TYPE=%s"[0], D.7345);
  envp[envn.209] = D.7347;
  envn = envn + 1;
  # SUCC: 37 (fallthru)

  # BLOCK 37
  # PRED: 35 (false) 36 (fallthru)
  D.7348 = hc->hdrhost;
  D.7349 = *D.7348;
  if (D.7349 != 0)
    goto <bb 38>;
  else
    goto <bb 39>;
  # SUCC: 38 (true) 39 (false)

  # BLOCK 38
  # PRED: 37 (true)
  envn.209 = envn;
  D.7348 = hc->hdrhost;
  D.7350 = build_env (&"HTTP_HOST=%s"[0], D.7348);
  envp[envn.209] = D.7350;
  envn = envn + 1;
  # SUCC: 39 (fallthru)

  # BLOCK 39
  # PRED: 37 (false) 38 (fallthru)
  D.7351 = hc->contentlength;
  if (D.7351 != 0x0ffffffffffffffff)
    goto <bb 40>;
  else
    goto <bb 41>;
  # SUCC: 40 (true) 41 (false)

  # BLOCK 40
  # PRED: 39 (true)
  D.7351 = hc->contentlength;
  my_snprintf (&buf, 256, &"%lu"[0], D.7351);
  envn.209 = envn;
  D.7352 = build_env (&"CONTENT_LENGTH=%s"[0], &buf);
  envp[envn.209] = D.7352;
  envn = envn + 1;
  # SUCC: 41 (fallthru)

  # BLOCK 41
  # PRED: 39 (false) 40 (fallthru)
  D.7353 = hc->remoteuser;
  D.7354 = *D.7353;
  if (D.7354 != 0)
    goto <bb 42>;
  else
    goto <bb 43>;
  # SUCC: 42 (true) 43 (false)

  # BLOCK 42
  # PRED: 41 (true)
  envn.209 = envn;
  D.7353 = hc->remoteuser;
  D.7355 = build_env (&"REMOTE_USER=%s"[0], D.7353);
  envp[envn.209] = D.7355;
  envn = envn + 1;
  # SUCC: 43 (fallthru)

  # BLOCK 43
  # PRED: 41 (false) 42 (fallthru)
  D.7356 = hc->authorization;
  D.7357 = *D.7356;
  if (D.7357 != 0)
    goto <bb 44>;
  else
    goto <bb 45>;
  # SUCC: 44 (true) 45 (false)

  # BLOCK 44
  # PRED: 43 (true)
  envn.209 = envn;
  D.7358 = build_env (&"AUTH_TYPE=%s"[0], &"Basic"[0]);
  envp[envn.209] = D.7358;
  envn = envn + 1;
  # SUCC: 45 (fallthru)

  # BLOCK 45
  # PRED: 43 (false) 44 (fallthru)
  D.7359 = getenv (&"TZ"[0]);
  if (D.7359 != 0B)
    goto <bb 46>;
  else
    goto <bb 47>;
  # SUCC: 46 (true) 47 (false)

  # BLOCK 46
  # PRED: 45 (true)
  envn.209 = envn;
  D.7360 = getenv (&"TZ"[0]);
  D.7361 = build_env (&"TZ=%s"[0], D.7360);
  envp[envn.209] = D.7361;
  envn = envn + 1;
  # SUCC: 47 (fallthru)

  # BLOCK 47
  # PRED: 45 (false) 46 (fallthru)
  envn.209 = envn;
  D.7266 = hc->hs;
  D.7362 = D.7266->cgi_pattern;
  D.7363 = build_env (&"CGI_PATTERN=%s"[0], D.7362);
  envp[envn.209] = D.7363;
  envn = envn + 1;
  envn.209 = envn;
  envp[envn.209] = 0B;
  D.7364 = &envp;
  # SUCC: 48 (fallthru)

  # BLOCK 48
  # PRED: 47 (fallthru)
  return D.7364;
  # SUCC: EXIT

}


Merging blocks 47 and 48

;; Function build_env (build_env)

build_env (fmt, arg)
{
  static size_t maxbuf = 0;
  static char * buf;
  size_t size;
  char * cp;
  char * D.7242;
  char * cp.208;
  char * buf.207;
  long unsigned int maxbuf.206;
  long unsigned int D.7238;
  long unsigned int D.7237;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.7237 = strlen (fmt);
  D.7238 = strlen (arg);
  size = D.7237 + D.7238;
  maxbuf.206 = maxbuf;
  if (size > maxbuf.206)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  httpd_realloc_str (&buf, &maxbuf, size);
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (false) 3 (fallthru)
  maxbuf.206 = maxbuf;
  buf.207 = buf;
  my_snprintf (buf.207, maxbuf.206, fmt, arg);
  buf.207 = buf;
  cp.208 = __strdup (buf.207);
  cp = cp.208;
  if (cp == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  syslog (3, &"out of memory copying environment variable"[0]);
  exit (1);
  # SUCC:

  # BLOCK 6
  # PRED: 4 (false)
  D.7242 = cp;
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 6 (fallthru)
  return D.7242;
  # SUCC: EXIT

}


Merging blocks 6 and 7

;; Function make_argp (make_argp)

make_argp (hc)
{
  char * cp2;
  char * cp1;
  int argn;
  char * * argp;
  char * * D.7389;
  long unsigned int D.7388;
  long unsigned int D.7387;
  char D.7386;
  char * D.7385;
  char * D.7384;
  char * D.7383;
  char * D.7382;
  char * D.7381;
  char * * D.7380;
  void * D.7379;
  long unsigned int D.7378;
  long unsigned int D.7377;
  long unsigned int D.7376;
  char * D.7375;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.7375 = hc->query;
  D.7376 = strlen (D.7375);
  D.7377 = D.7376 + 2;
  D.7378 = D.7377 * 8;
  D.7379 = malloc (D.7378);
  argp = (char * *) D.7379;
  if (argp == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.7380 = 0B;
  goto <bb 16>;
  # SUCC: 16 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  D.7381 = hc->expnfilename;
  D.7382 = strrchr (D.7381, 47);
  *argp = D.7382;
  D.7383 = *argp;
  if (D.7383 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.7383 = *argp;
  D.7384 = D.7383 + 1;
  *argp = D.7384;
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 6
  # PRED: 4 (false)
  D.7381 = hc->expnfilename;
  *argp = D.7381;
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 5 (fallthru) 6 (fallthru)
  argn = 1;
  D.7375 = hc->query;
  D.7385 = __builtin_strchr (D.7375, 61);
  if (D.7385 == 0B)
    goto <bb 8>;
  else
    goto <bb 15>;
  # SUCC: 8 (true) 15 (false)

  # BLOCK 8
  # PRED: 7 (true)
  cp2 = hc->query;
  cp1 = cp2;
  goto <bb 12>;
  # SUCC: 12 (fallthru)

  # BLOCK 9
  # PRED: 12 (true)
  D.7386 = *cp2;
  if (D.7386 == 43)
    goto <bb 10>;
  else
    goto <bb 11>;
  # SUCC: 10 (true) 11 (false)

  # BLOCK 10
  # PRED: 9 (true)
  *cp2 = 0;
  strdecode (cp1, cp1);
  D.7387 = (long unsigned int) argn;
  D.7388 = D.7387 * 8;
  D.7389 = argp + D.7388;
  *D.7389 = cp1;
  argn = argn + 1;
  cp1 = cp2 + 1;
  # SUCC: 11 (fallthru)

  # BLOCK 11
  # PRED: 9 (false) 10 (fallthru)
  cp2 = cp2 + 1;
  # SUCC: 12 (fallthru)

  # BLOCK 12
  # PRED: 8 (fallthru) 11 (fallthru)
  D.7386 = *cp2;
  if (D.7386 != 0)
    goto <bb 9>;
  else
    goto <bb 13>;
  # SUCC: 9 (true) 13 (false)

  # BLOCK 13
  # PRED: 12 (false)
  if (cp2 != cp1)
    goto <bb 14>;
  else
    goto <bb 15>;
  # SUCC: 14 (true) 15 (false)

  # BLOCK 14
  # PRED: 13 (true)
  strdecode (cp1, cp1);
  D.7387 = (long unsigned int) argn;
  D.7388 = D.7387 * 8;
  D.7389 = argp + D.7388;
  *D.7389 = cp1;
  argn = argn + 1;
  # SUCC: 15 (fallthru)

  # BLOCK 15
  # PRED: 7 (false) 13 (false) 14 (fallthru)
  D.7387 = (long unsigned int) argn;
  D.7388 = D.7387 * 8;
  D.7389 = argp + D.7388;
  *D.7389 = 0B;
  D.7380 = argp;
  # SUCC: 16 (fallthru)

  # BLOCK 16
  # PRED: 3 (fallthru) 15 (fallthru)
  return D.7380;
  # SUCC: EXIT

}



;; Function strdecode (strdecode)

strdecode (to, from)
{
  char D.5850;
  unsigned char D.5849;
  unsigned char D.5848;
  int D.5847;
  int D.5846;
  unsigned char D.5845;
  int D.5844;
  int D.5843;
  int D.5842;
  int D.5841;
  int D.5840;
  short unsigned int D.5839;
  const short unsigned int * D.5838;
  long unsigned int D.5837;
  long unsigned int D.5836;
  char D.5835;
  char * D.5834;
  int D.5833;
  int D.5832;
  short unsigned int D.5831;
  const short unsigned int * D.5830;
  long unsigned int D.5829;
  long unsigned int D.5828;
  char D.5827;
  char * D.5826;
  const short unsigned int * D.5825;
  const short unsigned int * * D.5824;
  char D.5823;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  goto <bb 9>;
  # SUCC: 9 (fallthru)

  # BLOCK 3
  # PRED: 9 (true)
  D.5823 = *from;
  if (D.5823 != 37)
    goto <bb 7>;
  else
    goto <bb 4>;
  # SUCC: 7 (true) 4 (false)

  # BLOCK 4
  # PRED: 3 (false)
  D.5824 = __ctype_b_loc ();
  D.5825 = *D.5824;
  D.5826 = from + 1;
  D.5827 = *D.5826;
  D.5828 = (long unsigned int) D.5827;
  D.5829 = D.5828 * 2;
  D.5830 = D.5825 + D.5829;
  D.5831 = *D.5830;
  D.5832 = (int) D.5831;
  D.5833 = D.5832 & 4096;
  if (D.5833 == 0)
    goto <bb 7>;
  else
    goto <bb 5>;
  # SUCC: 7 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  D.5824 = __ctype_b_loc ();
  D.5825 = *D.5824;
  D.5834 = from + 2;
  D.5835 = *D.5834;
  D.5836 = (long unsigned int) D.5835;
  D.5837 = D.5836 * 2;
  D.5838 = D.5825 + D.5837;
  D.5839 = *D.5838;
  D.5840 = (int) D.5839;
  D.5841 = D.5840 & 4096;
  if (D.5841 == 0)
    goto <bb 7>;
  else
    goto <bb 6>;
  # SUCC: 7 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  D.5826 = from + 1;
  D.5827 = *D.5826;
  D.5842 = (int) D.5827;
  D.5843 = hexit (D.5842);
  D.5844 = D.5843 * 16;
  D.5845 = (unsigned char) D.5844;
  D.5834 = from + 2;
  D.5835 = *D.5834;
  D.5846 = (int) D.5835;
  D.5847 = hexit (D.5846);
  D.5848 = (unsigned char) D.5847;
  D.5849 = D.5845 + D.5848;
  D.5850 = (char) D.5849;
  *to = D.5850;
  from = from + 2;
  goto <bb 8>;
  # SUCC: 8 (fallthru)

  # BLOCK 7
  # PRED: 3 (true) 4 (true) 5 (true)
  D.5823 = *from;
  *to = D.5823;
  # SUCC: 8 (fallthru)

  # BLOCK 8
  # PRED: 6 (fallthru) 7 (fallthru)
  to = to + 1;
  from = from + 1;
  # SUCC: 9 (fallthru)

  # BLOCK 9
  # PRED: 2 (fallthru) 8 (fallthru)
  D.5823 = *from;
  if (D.5823 != 0)
    goto <bb 3>;
  else
    goto <bb 10>;
  # SUCC: 3 (true) 10 (false)

  # BLOCK 10
  # PRED: 9 (false)
  *to = 0;
  return;
  # SUCC: EXIT

}



;; Function hexit (hexit)

hexit (c)
{
  unsigned char D.5813;
  unsigned char D.5812;
  int D.5811;
  int D.5810;
  unsigned char D.5809;
  unsigned char c.66;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  c.66 = (unsigned char) c;
  D.5809 = c.66 + 208;
  if (D.5809 <= 9)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5811 = (int) c;
  D.5810 = D.5811 + -48;
  goto <bb 9>;
  # SUCC: 9 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  c.66 = (unsigned char) c;
  D.5812 = c.66 + 159;
  if (D.5812 <= 5)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.5811 = (int) c;
  D.5810 = D.5811 + -87;
  goto <bb 9>;
  # SUCC: 9 (fallthru)

  # BLOCK 6
  # PRED: 4 (false)
  c.66 = (unsigned char) c;
  D.5813 = c.66 + 191;
  if (D.5813 <= 5)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  D.5811 = (int) c;
  D.5810 = D.5811 + -55;
  goto <bb 9>;
  # SUCC: 9 (fallthru)

  # BLOCK 8
  # PRED: 6 (false)
  D.5810 = 0;
  # SUCC: 9 (fallthru)

  # BLOCK 9
  # PRED: 3 (fallthru) 5 (fallthru) 7 (fallthru) 8 (fallthru)
  return D.5810;
  # SUCC: EXIT

}



;; Function cgi_interpose_input (cgi_interpose_input)

cgi_interpose_input (hc, wfd)
{
  char buf[1024];
  ssize_t r;
  size_t c;
  long unsigned int r.214;
  long int D.7418;
  int D.7417;
  long unsigned int r.213;
  _Bool D.7415;
  _Bool D.7414;
  _Bool D.7413;
  int D.7412;
  int * D.7411;
  long int r.212;
  int D.7409;
  long unsigned int D.7408;
  long unsigned int D.7407;
  long unsigned int D.7406;
  long unsigned int D.7405;
  int D.7404;
  const void * D.7403;
  char * D.7402;
  long unsigned int D.7401;
  long unsigned int D.7400;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.7400 = hc->read_idx;
  D.7401 = hc->checked_idx;
  c = D.7400 - D.7401;
  if (c != 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.7402 = hc->read_buf;
  D.7401 = hc->checked_idx;
  D.7403 = D.7402 + D.7401;
  D.7404 = httpd_write_fully (wfd, D.7403, c);
  D.7405 = (size_t) D.7404;
  if (D.7405 != c)
    goto <bb 13>;
  else
    goto <bb 4>;
  # SUCC: 13 (true) 4 (false)

  # BLOCK 4
  # PRED: 2 (false) 3 (false)
  goto <bb 11>;
  # SUCC: 11 (fallthru)

  # BLOCK 5
  # PRED: 11 (true)
  D.7406 = hc->contentlength;
  D.7407 = D.7406 - c;
  D.7408 = MIN_EXPR <D.7407, 1024>;
  D.7409 = hc->conn_fd;
  r.212 = read (D.7409, &buf, D.7408);
  r = r.212;
  if (r < 0)
    goto <bb 6>;
  else
    goto <bb 8>;
  # SUCC: 6 (true) 8 (false)

  # BLOCK 6
  # PRED: 5 (true)
  D.7411 = __errno_location ();
  D.7412 = *D.7411;
  D.7413 = D.7412 == 4;
  D.7414 = D.7412 == 11;
  D.7415 = D.7413 || D.7414;
  if (D.7415)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  sleep (1);
  goto <bb 11>;
  # SUCC: 11 (fallthru)

  # BLOCK 8
  # PRED: 5 (false) 6 (false)
  if (r <= 0)
    goto <bb 13>;
  else
    goto <bb 9>;
  # SUCC: 13 (true) 9 (false)

  # BLOCK 9
  # PRED: 8 (false)
  r.213 = (size_t) r;
  D.7417 = httpd_write_fully (wfd, &buf, r.213);
  D.7418 = (ssize_t) D.7417;
  if (D.7418 != r)
    goto <bb 13>;
  else
    goto <bb 10>;
  # SUCC: 13 (true) 10 (false)

  # BLOCK 10
  # PRED: 9 (false)
  r.214 = (long unsigned int) r;
  c = c + r.214;
  # SUCC: 11 (fallthru)

  # BLOCK 11
  # PRED: 4 (fallthru) 7 (fallthru) 10 (fallthru)
  D.7406 = hc->contentlength;
  if (D.7406 > c)
    goto <bb 5>;
  else
    goto <bb 12>;
  # SUCC: 5 (true) 12 (false)

  # BLOCK 12
  # PRED: 11 (false)
  post_post_garbage_hack (hc);
  # SUCC: 13 (fallthru)

  # BLOCK 13
  # PRED: 3 (true) 8 (true) 9 (true) 12 (fallthru)
  return;
  # SUCC: EXIT

}


Removing basic block 4

;; Function post_post_garbage_hack (post_post_garbage_hack)

post_post_garbage_hack (hc)
{
  char buf[2];
  int D.7425;
  int sub_process.215;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  sub_process.215 = sub_process;
  if (sub_process.215 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.7425 = hc->conn_fd;
  httpd_set_ndelay (D.7425);
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (false) 3 (fallthru)
  D.7425 = hc->conn_fd;
  read (D.7425, &buf, 2);
  return;
  # SUCC: EXIT

}



;; Function cgi_interpose_output (cgi_interpose_output)

cgi_interpose_output (hc, rfd)
{
  char __a2;
  char __a1;
  char __a0;
  char __r2;
  char __r1;
  char __r0;
  char * cp;
  char * title;
  int status;
  char * br;
  char * headers;
  size_t headers_len;
  size_t headers_size;
  char buf[1024];
  int r;
  int D.7526;
  _Bool D.7525;
  _Bool D.7524;
  _Bool D.7523;
  int D.7522;
  long int D.7521;
  long unsigned int D.7520;
  long unsigned int D.7517;
  int D.7516;
  long unsigned int iftmp.224;
  long unsigned int D.7514;
  int D.7513;
  long unsigned int iftmp.223;
  long unsigned int D.7511;
  int D.7510;
  long unsigned int iftmp.222;
  long unsigned int iftmp.221;
  long unsigned int D.7458;
  char D.7507;
  char * D.7506;
  long unsigned int D.7503;
  int D.7502;
  char D.7501;
  const char * D.7500;
  long unsigned int iftmp.220;
  long unsigned int D.7498;
  int D.7497;
  char * D.7496;
  long unsigned int iftmp.219;
  long unsigned int D.7494;
  int D.7493;
  char * D.7492;
  long unsigned int iftmp.218;
  char * D.7490;
  long unsigned int iftmp.217;
  long unsigned int D.7454;
  int D.7488;
  char D.7487;
  char * D.7486;
  void * D.7485;
  long unsigned int D.7484;
  long unsigned int D.7483;
  char * headers.216;
  _Bool D.7481;
  _Bool D.7480;
  _Bool D.7479;
  int D.7478;
  int * D.7477;
  long int D.7476;
  int D.7475;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.7475 = hc->conn_fd;
  httpd_clear_ndelay (D.7475);
  headers_size = 0;
  httpd_realloc_str (&headers, &headers_size, 500);
  headers_len = 0;
  # SUCC: 3 (fallthru)

  # BLOCK 3
  # PRED: 2 (fallthru) 10 (fallthru)
  D.7476 = read (rfd, &buf, 1024);
  r = (int) D.7476;
  if (r < 0)
    goto <bb 4>;
  else
    goto <bb 6>;
  # SUCC: 4 (true) 6 (false)

  # BLOCK 4
  # PRED: 3 (true)
  D.7477 = __errno_location ();
  D.7478 = *D.7477;
  D.7479 = D.7478 == 4;
  D.7480 = D.7478 == 11;
  D.7481 = D.7479 || D.7480;
  if (D.7481)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  sleep (1);
  goto <bb 10>;
  # SUCC: 10 (fallthru)

  # BLOCK 6
  # PRED: 3 (false) 4 (false)
  if (r <= 0)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  headers.216 = headers;
  br = headers.216 + headers_len;
  goto <bb 11>;
  # SUCC: 11 (fallthru)

  # BLOCK 8
  # PRED: 6 (false)
  D.7483 = (size_t) r;
  D.7484 = D.7483 + headers_len;
  httpd_realloc_str (&headers, &headers_size, D.7484);
  D.7483 = (size_t) r;
  headers.216 = headers;
  D.7485 = headers.216 + headers_len;
  memmove (D.7485, &buf, D.7483);
  D.7483 = (size_t) r;
  headers_len = D.7483 + headers_len;
  headers.216 = headers;
  D.7486 = headers.216 + headers_len;
  *D.7486 = 0;
  headers.216 = headers;
  br = strstr (headers.216, &"\r\n\r\n"[0]);
  if (br != 0B)
    goto <bb 11>;
  else
    goto <bb 9>;
  # SUCC: 11 (true) 9 (false)

  # BLOCK 9
  # PRED: 8 (false)
  headers.216 = headers;
  br = strstr (headers.216, &"\n\n"[0]);
  if (br != 0B)
    goto <bb 11>;
  else
    goto <bb 10>;
  # SUCC: 11 (true) 10 (false)

  # BLOCK 10
  # PRED: 5 (fallthru) 9 (false)
  goto <bb 3>;
  # SUCC: 3 (fallthru)

  # BLOCK 11
  # PRED: 7 (fallthru) 8 (true) 9 (true)
  headers.216 = headers;
  D.7487 = *headers.216;
  if (D.7487 == 0)
    goto <bb 69>;
  else
    goto <bb 12>;
  # SUCC: 69 (true) 12 (false)

  # BLOCK 12
  # PRED: 11 (false)
  status = 200;
  headers.216 = headers;
  D.7488 = strncmp (headers.216, &"HTTP/"[0], 5);
  if (D.7488 == 0)
    goto <bb 13>;
  else
    goto <bb 26>;
  # SUCC: 13 (true) 26 (false)

  # BLOCK 13
  # PRED: 12 (true)
  cp = headers;
  D.7490 = &" \t"[0];
  __r0 = *D.7490;
  if (__r0 == 0)
    goto <bb 14>;
  else
    goto <bb 15>;
  # SUCC: 14 (true) 15 (false)

  # BLOCK 14
  # PRED: 13 (true)
  iftmp.217 = strlen (cp);
  goto <bb 25>;
  # SUCC: 25 (fallthru)

  # BLOCK 15
  # PRED: 13 (false)
  D.7492 = &" \t"[1];
  __r1 = *D.7492;
  if (__r1 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;
  # SUCC: 16 (true) 17 (false)

  # BLOCK 16
  # PRED: 15 (true)
  D.7493 = (int) __r0;
  D.7494 = __strcspn_c1 (cp, D.7493);
  iftmp.218 = D.7494;
  goto <bb 24>;
  # SUCC: 24 (fallthru)

  # BLOCK 17
  # PRED: 15 (false)
  D.7496 = &" \t"[2];
  __r2 = *D.7496;
  if (__r2 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;
  # SUCC: 18 (true) 19 (false)

  # BLOCK 18
  # PRED: 17 (true)
  D.7497 = (int) __r1;
  D.7493 = (int) __r0;
  D.7498 = __strcspn_c2 (cp, D.7493, D.7497);
  iftmp.219 = D.7498;
  goto <bb 23>;
  # SUCC: 23 (fallthru)

  # BLOCK 19
  # PRED: 17 (false)
  D.7500 = &" \t"[3];
  D.7501 = *D.7500;
  if (D.7501 == 0)
    goto <bb 20>;
  else
    goto <bb 21>;
  # SUCC: 20 (true) 21 (false)

  # BLOCK 20
  # PRED: 19 (true)
  D.7502 = (int) __r2;
  D.7497 = (int) __r1;
  D.7493 = (int) __r0;
  D.7503 = __strcspn_c3 (cp, D.7493, D.7497, D.7502);
  iftmp.220 = D.7503;
  goto <bb 22>;
  # SUCC: 22 (fallthru)

  # BLOCK 21
  # PRED: 19 (false)
  iftmp.220 = __builtin_strcspn (cp, &" \t"[0]);
  # SUCC: 22 (fallthru)

  # BLOCK 22
  # PRED: 20 (fallthru) 21 (fallthru)
  iftmp.219 = iftmp.220;
  # SUCC: 23 (fallthru)

  # BLOCK 23
  # PRED: 18 (fallthru) 22 (fallthru)
  iftmp.218 = iftmp.219;
  # SUCC: 24 (fallthru)

  # BLOCK 24
  # PRED: 16 (fallthru) 23 (fallthru)
  iftmp.217 = iftmp.218;
  # SUCC: 25 (fallthru)

  # BLOCK 25
  # PRED: 14 (fallthru) 24 (fallthru)
  D.7454 = iftmp.217;
  cp = cp + D.7454;
  status = atoi (cp);
  # SUCC: 26 (fallthru)

  # BLOCK 26
  # PRED: 12 (false) 25 (fallthru)
  headers.216 = headers;
  cp = strstr (headers.216, &"Status:"[0]);
  if (cp != 0B)
    goto <bb 27>;
  else
    goto <bb 43>;
  # SUCC: 27 (true) 43 (false)

  # BLOCK 27
  # PRED: 26 (true)
  if (cp < br)
    goto <bb 28>;
  else
    goto <bb 43>;
  # SUCC: 28 (true) 43 (false)

  # BLOCK 28
  # PRED: 27 (true)
  headers.216 = headers;
  if (cp == headers.216)
    goto <bb 30>;
  else
    goto <bb 29>;
  # SUCC: 30 (true) 29 (false)

  # BLOCK 29
  # PRED: 28 (false)
  D.7506 = cp + -1;
  D.7507 = *D.7506;
  if (D.7507 == 10)
    goto <bb 30>;
  else
    goto <bb 43>;
  # SUCC: 30 (true) 43 (false)

  # BLOCK 30
  # PRED: 28 (true) 29 (true)
  cp = cp + 7;
  D.7490 = &" \t"[0];
  __a0 = *D.7490;
  if (__a0 == 0)
    goto <bb 31>;
  else
    goto <bb 32>;
  # SUCC: 31 (true) 32 (false)

  # BLOCK 31
  # PRED: 30 (true)
  iftmp.221 = 0;
  goto <bb 42>;
  # SUCC: 42 (fallthru)

  # BLOCK 32
  # PRED: 30 (false)
  D.7492 = &" \t"[1];
  __a1 = *D.7492;
  if (__a1 == 0)
    goto <bb 33>;
  else
    goto <bb 34>;
  # SUCC: 33 (true) 34 (false)

  # BLOCK 33
  # PRED: 32 (true)
  D.7510 = (int) __a0;
  D.7511 = __strspn_c1 (cp, D.7510);
  iftmp.222 = D.7511;
  goto <bb 41>;
  # SUCC: 41 (fallthru)

  # BLOCK 34
  # PRED: 32 (false)
  D.7496 = &" \t"[2];
  __a2 = *D.7496;
  if (__a2 == 0)
    goto <bb 35>;
  else
    goto <bb 36>;
  # SUCC: 35 (true) 36 (false)

  # BLOCK 35
  # PRED: 34 (true)
  D.7513 = (int) __a1;
  D.7510 = (int) __a0;
  D.7514 = __strspn_c2 (cp, D.7510, D.7513);
  iftmp.223 = D.7514;
  goto <bb 40>;
  # SUCC: 40 (fallthru)

  # BLOCK 36
  # PRED: 34 (false)
  D.7500 = &" \t"[3];
  D.7501 = *D.7500;
  if (D.7501 == 0)
    goto <bb 37>;
  else
    goto <bb 38>;
  # SUCC: 37 (true) 38 (false)

  # BLOCK 37
  # PRED: 36 (true)
  D.7516 = (int) __a2;
  D.7513 = (int) __a1;
  D.7510 = (int) __a0;
  D.7517 = __strspn_c3 (cp, D.7510, D.7513, D.7516);
  iftmp.224 = D.7517;
  goto <bb 39>;
  # SUCC: 39 (fallthru)

  # BLOCK 38
  # PRED: 36 (false)
  iftmp.224 = __builtin_strspn (cp, &" \t"[0]);
  # SUCC: 39 (fallthru)

  # BLOCK 39
  # PRED: 37 (fallthru) 38 (fallthru)
  iftmp.223 = iftmp.224;
  # SUCC: 40 (fallthru)

  # BLOCK 40
  # PRED: 35 (fallthru) 39 (fallthru)
  iftmp.222 = iftmp.223;
  # SUCC: 41 (fallthru)

  # BLOCK 41
  # PRED: 33 (fallthru) 40 (fallthru)
  iftmp.221 = iftmp.222;
  # SUCC: 42 (fallthru)

  # BLOCK 42
  # PRED: 31 (fallthru) 41 (fallthru)
  D.7458 = iftmp.221;
  cp = cp + D.7458;
  status = atoi (cp);
  # SUCC: 43 (fallthru)

  # BLOCK 43
  # PRED: 26 (false) 27 (false) 29 (false) 42 (fallthru)
  headers.216 = headers;
  cp = strstr (headers.216, &"Location:"[0]);
  if (cp != 0B)
    goto <bb 44>;
  else
    goto <bb 48>;
  # SUCC: 44 (true) 48 (false)

  # BLOCK 44
  # PRED: 43 (true)
  if (cp < br)
    goto <bb 45>;
  else
    goto <bb 48>;
  # SUCC: 45 (true) 48 (false)

  # BLOCK 45
  # PRED: 44 (true)
  headers.216 = headers;
  if (cp == headers.216)
    goto <bb 47>;
  else
    goto <bb 46>;
  # SUCC: 47 (true) 46 (false)

  # BLOCK 46
  # PRED: 45 (false)
  D.7506 = cp + -1;
  D.7507 = *D.7506;
  if (D.7507 == 10)
    goto <bb 47>;
  else
    goto <bb 48>;
  # SUCC: 47 (true) 48 (false)

  # BLOCK 47
  # PRED: 45 (true) 46 (true)
  status = 302;
  # SUCC: 48 (fallthru)

  # BLOCK 48
  # PRED: 43 (false) 44 (false) 46 (false) 47 (fallthru)
  switch (status)
    {
      case 200: goto <L52>;
      case 302: goto <L53>;
      case 304: goto <L54>;
      case 400: goto <L55>;
      case 401: goto <L56>;
      case 403: goto <L57>;
      case 404: goto <L58>;
      case 408: goto <L59>;
      case 500: goto <L60>;
      case 501: goto <L61>;
      case 503: goto <L62>;
      default : goto <L63>;
    }
  # SUCC: 49 50 51 52 53 54 55 56 57 58 59 60

  # BLOCK 49
  # PRED: 48
<L52>:;
  title = ok200title;
  goto <bb 61>;
  # SUCC: 61 (fallthru)

  # BLOCK 50
  # PRED: 48
<L53>:;
  title = err302title;
  goto <bb 61>;
  # SUCC: 61 (fallthru)

  # BLOCK 51
  # PRED: 48
<L54>:;
  title = err304title;
  goto <bb 61>;
  # SUCC: 61 (fallthru)

  # BLOCK 52
  # PRED: 48
<L55>:;
  title = httpd_err400title;
  goto <bb 61>;
  # SUCC: 61 (fallthru)

  # BLOCK 53
  # PRED: 48
<L56>:;
  title = err401title;
  goto <bb 61>;
  # SUCC: 61 (fallthru)

  # BLOCK 54
  # PRED: 48
<L57>:;
  title = err403title;
  goto <bb 61>;
  # SUCC: 61 (fallthru)

  # BLOCK 55
  # PRED: 48
<L58>:;
  title = err404title;
  goto <bb 61>;
  # SUCC: 61 (fallthru)

  # BLOCK 56
  # PRED: 48
<L59>:;
  title = httpd_err408title;
  goto <bb 61>;
  # SUCC: 61 (fallthru)

  # BLOCK 57
  # PRED: 48
<L60>:;
  title = err500title;
  goto <bb 61>;
  # SUCC: 61 (fallthru)

  # BLOCK 58
  # PRED: 48
<L61>:;
  title = err501title;
  goto <bb 61>;
  # SUCC: 61 (fallthru)

  # BLOCK 59
  # PRED: 48
<L62>:;
  title = httpd_err503title;
  goto <bb 61>;
  # SUCC: 61 (fallthru)

  # BLOCK 60
  # PRED: 48
<L63>:;
  title = &"Something"[0];
  # SUCC: 61 (fallthru)

  # BLOCK 61
  # PRED: 49 (fallthru) 50 (fallthru) 51 (fallthru) 52 (fallthru) 53 (fallthru) 54 (fallthru) 55 (fallthru) 56 (fallthru) 57 (fallthru) 58 (fallthru) 59 (fallthru) 60 (fallthru)
  my_snprintf (&buf, 1024, &"HTTP/1.0 %d %s\r\n"[0], status, title);
  D.7520 = strlen (&buf);
  D.7475 = hc->conn_fd;
  httpd_write_fully (D.7475, &buf, D.7520);
  headers.216 = headers;
  D.7475 = hc->conn_fd;
  httpd_write_fully (D.7475, headers.216, headers_len);
  # SUCC: 62 (fallthru)

  # BLOCK 62
  # PRED: 61 (fallthru) 67 (fallthru)
  D.7521 = read (rfd, &buf, 1024);
  r = (int) D.7521;
  if (r < 0)
    goto <bb 63>;
  else
    goto <bb 65>;
  # SUCC: 63 (true) 65 (false)

  # BLOCK 63
  # PRED: 62 (true)
  D.7477 = __errno_location ();
  D.7522 = *D.7477;
  D.7523 = D.7522 == 4;
  D.7524 = D.7522 == 11;
  D.7525 = D.7523 || D.7524;
  if (D.7525)
    goto <bb 64>;
  else
    goto <bb 65>;
  # SUCC: 64 (true) 65 (false)

  # BLOCK 64
  # PRED: 63 (true)
  sleep (1);
  goto <bb 67>;
  # SUCC: 67 (fallthru)

  # BLOCK 65
  # PRED: 62 (false) 63 (false)
  if (r <= 0)
    goto <bb 68>;
  else
    goto <bb 66>;
  # SUCC: 68 (true) 66 (false)

  # BLOCK 66
  # PRED: 65 (false)
  D.7483 = (size_t) r;
  D.7475 = hc->conn_fd;
  D.7526 = httpd_write_fully (D.7475, &buf, D.7483);
  if (D.7526 != r)
    goto <bb 68>;
  else
    goto <bb 67>;
  # SUCC: 68 (true) 67 (false)

  # BLOCK 67
  # PRED: 64 (fallthru) 66 (false)
  goto <bb 62>;
  # SUCC: 62 (fallthru)

  # BLOCK 68
  # PRED: 65 (true) 66 (true)
  D.7475 = hc->conn_fd;
  shutdown (D.7475, 1);
  # SUCC: 69 (fallthru)

  # BLOCK 69
  # PRED: 11 (true) 68 (fallthru)
  return;
  # SUCC: EXIT

}


Removing basic block 10
Removing basic block 67

;; Function __strcspn_c1 (__strcspn_c1)

__strcspn_c1 (__s, __reject)
{
  register size_t __result;
  size_t D.2237;
  int D.2236;
  char D.2235;
  const char * D.2234;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  __result = 0;
  goto <bb 4>;
  # SUCC: 4 (fallthru)

  # BLOCK 3
  # PRED: 5 (true)
  __result = __result + 1;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (fallthru) 3 (fallthru)
  D.2234 = __s + __result;
  D.2235 = *D.2234;
  if (D.2235 == 0)
    goto <bb 6>;
  else
    goto <bb 5>;
  # SUCC: 6 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  D.2234 = __s + __result;
  D.2235 = *D.2234;
  D.2236 = (int) D.2235;
  if (D.2236 != __reject)
    goto <bb 3>;
  else
    goto <bb 6>;
  # SUCC: 3 (true) 6 (false)

  # BLOCK 6
  # PRED: 4 (true) 5 (false)
  D.2237 = __result;
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 6 (fallthru)
  return D.2237;
  # SUCC: EXIT

}


Merging blocks 6 and 7

;; Function __strcspn_c2 (__strcspn_c2)

__strcspn_c2 (__s, __reject1, __reject2)
{
  register size_t __result;
  size_t D.2254;
  int D.2253;
  char D.2252;
  const char * D.2251;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  __result = 0;
  goto <bb 4>;
  # SUCC: 4 (fallthru)

  # BLOCK 3
  # PRED: 6 (true)
  __result = __result + 1;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (fallthru) 3 (fallthru)
  D.2251 = __s + __result;
  D.2252 = *D.2251;
  if (D.2252 == 0)
    goto <bb 7>;
  else
    goto <bb 5>;
  # SUCC: 7 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  D.2251 = __s + __result;
  D.2252 = *D.2251;
  D.2253 = (int) D.2252;
  if (D.2253 == __reject1)
    goto <bb 7>;
  else
    goto <bb 6>;
  # SUCC: 7 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  D.2251 = __s + __result;
  D.2252 = *D.2251;
  D.2253 = (int) D.2252;
  if (D.2253 != __reject2)
    goto <bb 3>;
  else
    goto <bb 7>;
  # SUCC: 3 (true) 7 (false)

  # BLOCK 7
  # PRED: 4 (true) 5 (true) 6 (false)
  D.2254 = __result;
  # SUCC: 8 (fallthru)

  # BLOCK 8
  # PRED: 7 (fallthru)
  return D.2254;
  # SUCC: EXIT

}


Merging blocks 7 and 8

;; Function __strcspn_c3 (__strcspn_c3)

__strcspn_c3 (__s, __reject1, __reject2, __reject3)
{
  register size_t __result;
  size_t D.2273;
  int D.2272;
  char D.2271;
  const char * D.2270;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  __result = 0;
  goto <bb 4>;
  # SUCC: 4 (fallthru)

  # BLOCK 3
  # PRED: 7 (true)
  __result = __result + 1;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (fallthru) 3 (fallthru)
  D.2270 = __s + __result;
  D.2271 = *D.2270;
  if (D.2271 == 0)
    goto <bb 8>;
  else
    goto <bb 5>;
  # SUCC: 8 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  D.2270 = __s + __result;
  D.2271 = *D.2270;
  D.2272 = (int) D.2271;
  if (D.2272 == __reject1)
    goto <bb 8>;
  else
    goto <bb 6>;
  # SUCC: 8 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  D.2270 = __s + __result;
  D.2271 = *D.2270;
  D.2272 = (int) D.2271;
  if (D.2272 == __reject2)
    goto <bb 8>;
  else
    goto <bb 7>;
  # SUCC: 8 (true) 7 (false)

  # BLOCK 7
  # PRED: 6 (false)
  D.2270 = __s + __result;
  D.2271 = *D.2270;
  D.2272 = (int) D.2271;
  if (D.2272 != __reject3)
    goto <bb 3>;
  else
    goto <bb 8>;
  # SUCC: 3 (true) 8 (false)

  # BLOCK 8
  # PRED: 4 (true) 5 (true) 6 (true) 7 (false)
  D.2273 = __result;
  # SUCC: 9 (fallthru)

  # BLOCK 9
  # PRED: 8 (fallthru)
  return D.2273;
  # SUCC: EXIT

}


Merging blocks 8 and 9

;; Function __strspn_c1 (__strspn_c1)

__strspn_c1 (__s, __accept)
{
  register size_t __result;
  size_t D.2288;
  int D.2287;
  char D.2286;
  const char * D.2285;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  __result = 0;
  goto <bb 4>;
  # SUCC: 4 (fallthru)

  # BLOCK 3
  # PRED: 4 (true)
  __result = __result + 1;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (fallthru) 3 (fallthru)
  D.2285 = __s + __result;
  D.2286 = *D.2285;
  D.2287 = (int) D.2286;
  if (D.2287 == __accept)
    goto <bb 3>;
  else
    goto <bb 5>;
  # SUCC: 3 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  D.2288 = __result;
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 5 (fallthru)
  return D.2288;
  # SUCC: EXIT

}


Merging blocks 5 and 6

;; Function __strspn_c2 (__strspn_c2)

__strspn_c2 (__s, __accept1, __accept2)
{
  register size_t __result;
  size_t D.2305;
  int D.2304;
  char D.2303;
  const char * D.2302;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  __result = 0;
  goto <bb 4>;
  # SUCC: 4 (fallthru)

  # BLOCK 3
  # PRED: 4 (true) 5 (true)
  __result = __result + 1;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (fallthru) 3 (fallthru)
  D.2302 = __s + __result;
  D.2303 = *D.2302;
  D.2304 = (int) D.2303;
  if (D.2304 == __accept1)
    goto <bb 3>;
  else
    goto <bb 5>;
  # SUCC: 3 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  D.2302 = __s + __result;
  D.2303 = *D.2302;
  D.2304 = (int) D.2303;
  if (D.2304 == __accept2)
    goto <bb 3>;
  else
    goto <bb 6>;
  # SUCC: 3 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  D.2305 = __result;
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 6 (fallthru)
  return D.2305;
  # SUCC: EXIT

}


Merging blocks 6 and 7

;; Function __strspn_c3 (__strspn_c3)

__strspn_c3 (__s, __accept1, __accept2, __accept3)
{
  register size_t __result;
  size_t D.2324;
  int D.2323;
  char D.2322;
  const char * D.2321;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  __result = 0;
  goto <bb 4>;
  # SUCC: 4 (fallthru)

  # BLOCK 3
  # PRED: 4 (true) 5 (true) 6 (true)
  __result = __result + 1;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (fallthru) 3 (fallthru)
  D.2321 = __s + __result;
  D.2322 = *D.2321;
  D.2323 = (int) D.2322;
  if (D.2323 == __accept1)
    goto <bb 3>;
  else
    goto <bb 5>;
  # SUCC: 3 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  D.2321 = __s + __result;
  D.2322 = *D.2321;
  D.2323 = (int) D.2322;
  if (D.2323 == __accept2)
    goto <bb 3>;
  else
    goto <bb 6>;
  # SUCC: 3 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  D.2321 = __s + __result;
  D.2322 = *D.2321;
  D.2323 = (int) D.2322;
  if (D.2323 == __accept3)
    goto <bb 3>;
  else
    goto <bb 7>;
  # SUCC: 3 (true) 7 (false)

  # BLOCK 7
  # PRED: 6 (false)
  D.2324 = __result;
  # SUCC: 8 (fallthru)

  # BLOCK 8
  # PRED: 7 (fallthru)
  return D.2324;
  # SUCC: EXIT

}


Merging blocks 7 and 8

;; Function atoi (atoi)

atoi (__nptr)
{
  long int D.3345;
  int D.3344;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.3345 = strtol (__nptr, 0B, 10);
  D.3344 = (int) D.3345;
  # SUCC: 3 (fallthru)

  # BLOCK 3
  # PRED: 2 (fallthru)
  return D.3344;
  # SUCC: EXIT

}


Merging blocks 2 and 3

;; Function figure_mime (figure_mime)

figure_mime (hc)
{
  char * default_type;
  int r;
  int mid;
  int bot;
  int top;
  int i;
  size_t encodings_len;
  size_t ext_len;
  int n_me_indexes;
  int me_indexes[100];
  char * ext;
  char * dot;
  char * prev_dot;
  char * D.6933;
  char * D.6932;
  char D.6931;
  char * * D.6930;
  size_t * D.6929;
  long unsigned int D.6928;
  long unsigned int D.6927;
  long unsigned int D.6926;
  int D.6925;
  char * D.6924;
  char * D.6923;
  long unsigned int D.6922;
  char * D.6921;
  int mid.167;
  int D.6919;
  int n_me_indexes.166;
  unsigned int n_me_indexes.165;
  int D.6916;
  char * D.6915;
  long unsigned int D.6914;
  int i.164;
  long int D.6912;
  long int ext.163;
  long int prev_dot.162;
  char D.6909;
  long unsigned int D.6908;
  char * D.6907;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  default_type = &"text/plain; charset=%s"[0];
  n_me_indexes = 0;
  D.6907 = hc->expnfilename;
  D.6907 = hc->expnfilename;
  D.6908 = strlen (D.6907);
  prev_dot = D.6907 + D.6908;
  # SUCC: 3 (fallthru)

  # BLOCK 3
  # PRED: 2 (fallthru) 18 (fallthru)
  dot = prev_dot + -1;
  goto <bb 5>;
  # SUCC: 5 (fallthru)

  # BLOCK 4
  # PRED: 6 (true)
  dot = dot + -1;
  # SUCC: 5 (fallthru)

  # BLOCK 5
  # PRED: 3 (fallthru) 4 (fallthru)
  D.6907 = hc->expnfilename;
  if (D.6907 > dot)
    goto <bb 7>;
  else
    goto <bb 6>;
  # SUCC: 7 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  D.6909 = *dot;
  if (D.6909 != 46)
    goto <bb 4>;
  else
    goto <bb 7>;
  # SUCC: 4 (true) 7 (false)

  # BLOCK 7
  # PRED: 5 (true) 6 (false)
  D.6907 = hc->expnfilename;
  if (D.6907 > dot)
    goto <bb 8>;
  else
    goto <bb 9>;
  # SUCC: 8 (true) 9 (false)

  # BLOCK 8
  # PRED: 7 (true)
  hc->type = default_type;
  goto <bb 31> (done);
  # SUCC: 31 (fallthru)

  # BLOCK 9
  # PRED: 7 (false)
  ext = dot + 1;
  prev_dot.162 = (long int) prev_dot;
  ext.163 = (long int) ext;
  D.6912 = prev_dot.162 - ext.163;
  ext_len = (size_t) D.6912;
  i = 0;
  goto <bb 16>;
  # SUCC: 16 (fallthru)

  # BLOCK 10
  # PRED: 16 (true)
  i.164 = i;
  D.6914 = enc_tab[i.164].ext_len;
  if (D.6914 == ext_len)
    goto <bb 11>;
  else
    goto <bb 15>;
  # SUCC: 11 (true) 15 (false)

  # BLOCK 11
  # PRED: 10 (true)
  i.164 = i;
  D.6915 = enc_tab[i.164].ext;
  D.6916 = strncasecmp (ext, D.6915, ext_len);
  if (D.6916 == 0)
    goto <bb 12>;
  else
    goto <bb 15>;
  # SUCC: 12 (true) 15 (false)

  # BLOCK 12
  # PRED: 11 (true)
  n_me_indexes.165 = (unsigned int) n_me_indexes;
  if (n_me_indexes.165 <= 99)
    goto <bb 13>;
  else
    goto <bb 14>;
  # SUCC: 13 (true) 14 (false)

  # BLOCK 13
  # PRED: 12 (true)
  n_me_indexes.166 = n_me_indexes;
  me_indexes[n_me_indexes.166] = i;
  n_me_indexes = n_me_indexes + 1;
  # SUCC: 14 (fallthru)

  # BLOCK 14
  # PRED: 12 (false) 13 (fallthru)
  goto <bb 18> (next);
  # SUCC: 18 (fallthru)

  # BLOCK 15
  # PRED: 10 (false) 11 (false)
  i = i + 1;
  # SUCC: 16 (fallthru)

  # BLOCK 16
  # PRED: 9 (fallthru) 15 (fallthru)
  if (i <= 2)
    goto <bb 10>;
  else
    goto <bb 17>;
  # SUCC: 10 (true) 17 (false)

  # BLOCK 17
  # PRED: 16 (false)
  goto <bb 19>;
  # SUCC: 19 (fallthru)

  # BLOCK 18
  # PRED: 14 (fallthru)
next:;
  prev_dot = dot;
  goto <bb 3>;
  # SUCC: 3 (fallthru)

  # BLOCK 19
  # PRED: 17 (fallthru)
  top = 189;
  bot = 0;
  goto <bb 29>;
  # SUCC: 29 (fallthru)

  # BLOCK 20
  # PRED: 29 (true)
  D.6919 = top + bot;
  mid = D.6919 / 2;
  mid.167 = mid;
  D.6921 = typ_tab[mid.167].ext;
  r = strncasecmp (ext, D.6921, ext_len);
  if (r < 0)
    goto <bb 21>;
  else
    goto <bb 22>;
  # SUCC: 21 (true) 22 (false)

  # BLOCK 21
  # PRED: 20 (true)
  top = mid + -1;
  goto <bb 29>;
  # SUCC: 29 (fallthru)

  # BLOCK 22
  # PRED: 20 (false)
  if (r > 0)
    goto <bb 23>;
  else
    goto <bb 24>;
  # SUCC: 23 (true) 24 (false)

  # BLOCK 23
  # PRED: 22 (true)
  bot = mid + 1;
  goto <bb 29>;
  # SUCC: 29 (fallthru)

  # BLOCK 24
  # PRED: 22 (false)
  mid.167 = mid;
  D.6922 = typ_tab[mid.167].ext_len;
  if (D.6922 > ext_len)
    goto <bb 25>;
  else
    goto <bb 26>;
  # SUCC: 25 (true) 26 (false)

  # BLOCK 25
  # PRED: 24 (true)
  top = mid + -1;
  goto <bb 29>;
  # SUCC: 29 (fallthru)

  # BLOCK 26
  # PRED: 24 (false)
  mid.167 = mid;
  D.6922 = typ_tab[mid.167].ext_len;
  if (D.6922 < ext_len)
    goto <bb 27>;
  else
    goto <bb 28>;
  # SUCC: 27 (true) 28 (false)

  # BLOCK 27
  # PRED: 26 (true)
  bot = mid + 1;
  goto <bb 29>;
  # SUCC: 29 (fallthru)

  # BLOCK 28
  # PRED: 26 (false)
  mid.167 = mid;
  D.6923 = typ_tab[mid.167].val;
  hc->type = D.6923;
  goto <bb 31> (done);
  # SUCC: 31 (fallthru)

  # BLOCK 29
  # PRED: 19 (fallthru) 21 (fallthru) 23 (fallthru) 25 (fallthru) 27 (fallthru)
  if (top >= bot)
    goto <bb 20>;
  else
    goto <bb 30>;
  # SUCC: 20 (true) 30 (false)

  # BLOCK 30
  # PRED: 29 (false)
  hc->type = default_type;
  # SUCC: 31 (fallthru)

  # BLOCK 31
  # PRED: 8 (fallthru) 28 (fallthru) 30 (fallthru)
done:;
  D.6924 = hc->encodings;
  *D.6924 = 0;
  encodings_len = 0;
  i = n_me_indexes + -1;
  goto <bb 35>;
  # SUCC: 35 (fallthru)

  # BLOCK 32
  # PRED: 35 (true)
  i.164 = i;
  D.6925 = me_indexes[i.164];
  D.6926 = enc_tab[D.6925].val_len;
  D.6927 = D.6926 + encodings_len;
  D.6928 = D.6927 + 1;
  D.6929 = &hc->maxencodings;
  D.6930 = &hc->encodings;
  httpd_realloc_str (D.6930, D.6929, D.6928);
  D.6924 = hc->encodings;
  D.6931 = *D.6924;
  if (D.6931 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;
  # SUCC: 33 (true) 34 (false)

  # BLOCK 33
  # PRED: 32 (true)
  D.6924 = hc->encodings;
  D.6932 = D.6924 + encodings_len;
  __builtin_memcpy (D.6932, &","[0], 2);
  encodings_len = encodings_len + 1;
  # SUCC: 34 (fallthru)

  # BLOCK 34
  # PRED: 32 (false) 33 (fallthru)
  i.164 = i;
  D.6925 = me_indexes[i.164];
  D.6933 = enc_tab[D.6925].val;
  D.6924 = hc->encodings;
  D.6932 = D.6924 + encodings_len;
  strcpy (D.6932, D.6933);
  i.164 = i;
  D.6925 = me_indexes[i.164];
  D.6926 = enc_tab[D.6925].val_len;
  encodings_len = D.6926 + encodings_len;
  i = i + -1;
  # SUCC: 35 (fallthru)

  # BLOCK 35
  # PRED: 31 (fallthru) 34 (fallthru)
  if (i >= 0)
    goto <bb 32>;
  else
    goto <bb 36>;
  # SUCC: 32 (true) 36 (false)

  # BLOCK 36
  # PRED: 35 (false)
  return;
  # SUCC: EXIT

}


Removing basic block 14
Removing basic block 17

;; Function send_mime (send_mime)

send_mime (hc, status, title, encodings, extraheads, type, length, mod)
{
  int s100;
  int partial_content;
  char buf[1000];
  char fixed_type[500];
  char expbuf[100];
  char modbuf[100];
  char nowbuf[100];
  const char * rfc1123fmt;
  time_t expires;
  time_t now;
  char D.5480;
  struct tm * D.5479;
  long int expires.32;
  long int D.5477;
  int D.5476;
  char D.5475;
  char * D.5474;
  long int D.5473;
  long int D.5472;
  char D.5471;
  unsigned int D.5470;
  unsigned int s100.31;
  char * D.5468;
  char * D.5467;
  struct httpd_server * D.5466;
  struct tm * D.5465;
  struct tm * D.5464;
  long int now.30;
  long int mod.29;
  long int now.28;
  long int D.5460;
  long int D.5459;
  long int D.5458;
  long int D.5457;
  long int D.5456;
  int D.5455;
  int D.5450;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  rfc1123fmt = &"%a, %d %b %Y %H:%M:%S GMT"[0];
  hc->status = status;
  hc->bytes_to_send = length;
  D.5450 = hc->mime_flag;
  if (D.5450 != 0)
    goto <bb 3>;
  else
    goto <bb 29>;
  # SUCC: 3 (true) 29 (false)

  # BLOCK 3
  # PRED: 2 (true)
  if (status != 200)
    goto <bb 11>;
  else
    goto <bb 4>;
  # SUCC: 11 (true) 4 (false)

  # BLOCK 4
  # PRED: 3 (false)
  D.5455 = hc->got_range;
  if (D.5455 == 0)
    goto <bb 11>;
  else
    goto <bb 5>;
  # SUCC: 11 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  D.5456 = hc->last_byte_index;
  D.5457 = hc->first_byte_index;
  if (D.5456 < D.5457)
    goto <bb 11>;
  else
    goto <bb 6>;
  # SUCC: 11 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  D.5456 = hc->last_byte_index;
  D.5458 = length + -1;
  if (D.5456 != D.5458)
    goto <bb 8>;
  else
    goto <bb 7>;
  # SUCC: 8 (true) 7 (false)

  # BLOCK 7
  # PRED: 6 (false)
  D.5457 = hc->first_byte_index;
  if (D.5457 != 0)
    goto <bb 8>;
  else
    goto <bb 11>;
  # SUCC: 8 (true) 11 (false)

  # BLOCK 8
  # PRED: 6 (true) 7 (true)
  D.5459 = hc->range_if;
  if (D.5459 == -1)
    goto <bb 10>;
  else
    goto <bb 9>;
  # SUCC: 10 (true) 9 (false)

  # BLOCK 9
  # PRED: 8 (false)
  D.5459 = hc->range_if;
  D.5460 = hc->sb.st_mtim.tv_sec;
  if (D.5459 == D.5460)
    goto <bb 10>;
  else
    goto <bb 11>;
  # SUCC: 10 (true) 11 (false)

  # BLOCK 10
  # PRED: 8 (true) 9 (true)
  partial_content = 1;
  status = 206;
  hc->status = status;
  title = ok206title;
  goto <bb 12>;
  # SUCC: 12 (fallthru)

  # BLOCK 11
  # PRED: 3 (true) 4 (true) 5 (true) 7 (false) 9 (false)
  partial_content = 0;
  hc->got_range = 0;
  # SUCC: 12 (fallthru)

  # BLOCK 12
  # PRED: 10 (fallthru) 11 (fallthru)
  now.28 = time (0B);
  now = now.28;
  mod.29 = mod;
  if (mod.29 == 0)
    goto <bb 13>;
  else
    goto <bb 14>;
  # SUCC: 13 (true) 14 (false)

  # BLOCK 13
  # PRED: 12 (true)
  now.30 = now;
  mod = now.30;
  # SUCC: 14 (fallthru)

  # BLOCK 14
  # PRED: 12 (false) 13 (fallthru)
  D.5464 = gmtime (&now);
  strftime (&nowbuf, 100, rfc1123fmt, D.5464);
  D.5465 = gmtime (&mod);
  strftime (&modbuf, 100, rfc1123fmt, D.5465);
  D.5466 = hc->hs;
  D.5467 = D.5466->charset;
  my_snprintf (&fixed_type, 500, type, D.5467);
  D.5468 = hc->protocol;
  my_snprintf (&buf, 1000, &"%.20s %d %s\r\nServer: %s\r\nContent-Type: %s\r\nDate: %s\r\nLast-Modified: %s\r\nAccept-Ranges: bytes\r\nConnection: close\r\n"[0], D.5468, status, title, &"thttpd/2.25b 29dec2003"[0], &fixed_type, &nowbuf, &modbuf);
  add_response (hc, &buf);
  s100 = status / 100;
  s100.31 = (unsigned int) s100;
  D.5470 = s100.31 + 4294967294;
  if (D.5470 > 1)
    goto <bb 15>;
  else
    goto <bb 16>;
  # SUCC: 15 (true) 16 (false)

  # BLOCK 15
  # PRED: 14 (true)
  my_snprintf (&buf, 1000, &"Cache-Control: no-cache,no-store\r\n"[0]);
  add_response (hc, &buf);
  # SUCC: 16 (fallthru)

  # BLOCK 16
  # PRED: 14 (false) 15 (fallthru)
  D.5471 = *encodings;
  if (D.5471 != 0)
    goto <bb 17>;
  else
    goto <bb 18>;
  # SUCC: 17 (true) 18 (false)

  # BLOCK 17
  # PRED: 16 (true)
  my_snprintf (&buf, 1000, &"Content-Encoding: %s\r\n"[0], encodings);
  add_response (hc, &buf);
  # SUCC: 18 (fallthru)

  # BLOCK 18
  # PRED: 16 (false) 17 (fallthru)
  if (partial_content != 0)
    goto <bb 19>;
  else
    goto <bb 20>;
  # SUCC: 19 (true) 20 (false)

  # BLOCK 19
  # PRED: 18 (true)
  D.5456 = hc->last_byte_index;
  D.5457 = hc->first_byte_index;
  D.5472 = D.5456 - D.5457;
  D.5473 = D.5472 + 1;
  D.5456 = hc->last_byte_index;
  D.5457 = hc->first_byte_index;
  my_snprintf (&buf, 1000, &"Content-Range: bytes %lld-%lld/%lld\r\nContent-Length: %lld\r\n"[0], D.5457, D.5456, length, D.5473);
  add_response (hc, &buf);
  goto <bb 22>;
  # SUCC: 22 (fallthru)

  # BLOCK 20
  # PRED: 18 (false)
  if (length >= 0)
    goto <bb 21>;
  else
    goto <bb 22>;
  # SUCC: 21 (true) 22 (false)

  # BLOCK 21
  # PRED: 20 (true)
  my_snprintf (&buf, 1000, &"Content-Length: %lld\r\n"[0], length);
  add_response (hc, &buf);
  # SUCC: 22 (fallthru)

  # BLOCK 22
  # PRED: 19 (fallthru) 20 (false) 21 (fallthru)
  D.5466 = hc->hs;
  D.5474 = D.5466->p3p;
  D.5475 = *D.5474;
  if (D.5475 != 0)
    goto <bb 23>;
  else
    goto <bb 24>;
  # SUCC: 23 (true) 24 (false)

  # BLOCK 23
  # PRED: 22 (true)
  D.5466 = hc->hs;
  D.5474 = D.5466->p3p;
  my_snprintf (&buf, 1000, &"P3P: %s\r\n"[0], D.5474);
  add_response (hc, &buf);
  # SUCC: 24 (fallthru)

  # BLOCK 24
  # PRED: 22 (false) 23 (fallthru)
  D.5466 = hc->hs;
  D.5476 = D.5466->max_age;
  if (D.5476 >= 0)
    goto <bb 25>;
  else
    goto <bb 26>;
  # SUCC: 25 (true) 26 (false)

  # BLOCK 25
  # PRED: 24 (true)
  D.5466 = hc->hs;
  D.5476 = D.5466->max_age;
  D.5477 = (time_t) D.5476;
  now.30 = now;
  expires.32 = D.5477 + now.30;
  expires = expires.32;
  D.5479 = gmtime (&expires);
  strftime (&expbuf, 100, rfc1123fmt, D.5479);
  D.5466 = hc->hs;
  D.5476 = D.5466->max_age;
  my_snprintf (&buf, 1000, &"Cache-Control: max-age=%d\r\nExpires: %s\r\n"[0], D.5476, &expbuf);
  add_response (hc, &buf);
  # SUCC: 26 (fallthru)

  # BLOCK 26
  # PRED: 24 (false) 25 (fallthru)
  D.5480 = *extraheads;
  if (D.5480 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;
  # SUCC: 27 (true) 28 (false)

  # BLOCK 27
  # PRED: 26 (true)
  add_response (hc, extraheads);
  # SUCC: 28 (fallthru)

  # BLOCK 28
  # PRED: 26 (false) 27 (fallthru)
  add_response (hc, &"\r\n"[0]);
  # SUCC: 29 (fallthru)

  # BLOCK 29
  # PRED: 2 (false) 28 (fallthru)
  return;
  # SUCC: EXIT

}



;; Function httpd_destroy_conn (httpd_destroy_conn)

httpd_destroy_conn (hc)
{
  char * D.6829;
  char * D.6828;
  char * D.6827;
  char * D.6826;
  char * D.6825;
  char * D.6824;
  char * D.6823;
  char * D.6822;
  char * D.6821;
  char * D.6820;
  char * D.6819;
  char * D.6818;
  char * D.6817;
  int D.6816;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.6816 = hc->initialized;
  if (D.6816 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.6817 = hc->read_buf;
  free (D.6817);
  D.6818 = hc->decodedurl;
  free (D.6818);
  D.6819 = hc->origfilename;
  free (D.6819);
  D.6820 = hc->expnfilename;
  free (D.6820);
  D.6821 = hc->encodings;
  free (D.6821);
  D.6822 = hc->pathinfo;
  free (D.6822);
  D.6823 = hc->query;
  free (D.6823);
  D.6824 = hc->accept;
  free (D.6824);
  D.6825 = hc->accepte;
  free (D.6825);
  D.6826 = hc->reqhost;
  free (D.6826);
  D.6827 = hc->hostdir;
  free (D.6827);
  D.6828 = hc->remoteuser;
  free (D.6828);
  D.6829 = hc->response;
  free (D.6829);
  hc->initialized = 0;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (false) 3 (fallthru)
  return;
  # SUCC: EXIT

}



;; Function httpd_close_conn (httpd_close_conn)

httpd_close_conn (hc, nowP)
{
  int D.6812;
  struct stat * D.6811;
  char * D.6810;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  make_log_entry (hc, nowP);
  D.6810 = hc->file_address;
  if (D.6810 != 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.6811 = &hc->sb;
  D.6810 = hc->file_address;
  mmc_unmap (D.6810, D.6811, nowP);
  hc->file_address = 0B;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (false) 3 (fallthru)
  D.6812 = hc->conn_fd;
  if (D.6812 >= 0)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.6812 = hc->conn_fd;
  close (D.6812);
  hc->conn_fd = -1;
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 4 (false) 5 (fallthru)
  return;
  # SUCC: EXIT

}



;; Function make_log_entry (make_log_entry)

make_log_entry (hc, nowP)
{
  char date[100];
  char sign;
  int zone;
  char date_nozone[100];
  const char * cernfmt_nozone;
  struct tm * t;
  time_t now;
  char bytes[40];
  char url[305];
  char * ru;
  char * D.7960;
  char * D.7959;
  char * D.7958;
  union httpd_sockaddr * D.7957;
  char * D.7956;
  int D.7955;
  char * D.7954;
  int D.7953;
  char * D.7952;
  char * D.7951;
  int D.7950;
  int D.7949;
  int D.7948;
  int D.7947;
  long int D.7946;
  long int D.7945;
  struct tm * t.264;
  long int now.263;
  long int now.262;
  struct FILE * D.7941;
  long int D.7940;
  char * D.7939;
  char * iftmp.261;
  char * D.7937;
  int D.7936;
  int D.7935;
  char D.7932;
  char * D.7931;
  int D.7930;
  struct httpd_server * D.7929;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.7929 = hc->hs;
  D.7930 = D.7929->no_log;
  if (D.7930 != 0)
    goto <bb 25>;
  else
    goto <bb 3>;
  # SUCC: 25 (true) 3 (false)

  # BLOCK 3
  # PRED: 2 (false)
  D.7931 = hc->remoteuser;
  D.7932 = *D.7931;
  if (D.7932 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;
  # SUCC: 4 (true) 5 (false)

  # BLOCK 4
  # PRED: 3 (true)
  ru = hc->remoteuser;
  goto <bb 6>;
  # SUCC: 6 (fallthru)

  # BLOCK 5
  # PRED: 3 (false)
  ru = &"-"[0];
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 4 (fallthru) 5 (fallthru)
  D.7929 = hc->hs;
  D.7935 = D.7929->vhost;
  if (D.7935 == 0)
    goto <bb 12>;
  else
    goto <bb 7>;
  # SUCC: 12 (true) 7 (false)

  # BLOCK 7
  # PRED: 6 (false)
  D.7936 = hc->tildemapped;
  if (D.7936 != 0)
    goto <bb 12>;
  else
    goto <bb 8>;
  # SUCC: 12 (true) 8 (false)

  # BLOCK 8
  # PRED: 7 (false)
  D.7937 = hc->encodedurl;
  D.7939 = hc->hostname;
  if (D.7939 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
  # SUCC: 9 (true) 10 (false)

  # BLOCK 9
  # PRED: 8 (true)
  D.7929 = hc->hs;
  iftmp.261 = D.7929->server_hostname;
  goto <bb 11>;
  # SUCC: 11 (fallthru)

  # BLOCK 10
  # PRED: 8 (false)
  iftmp.261 = hc->hostname;
  # SUCC: 11 (fallthru)

  # BLOCK 11
  # PRED: 9 (fallthru) 10 (fallthru)
  my_snprintf (&url, 305, &"/%.100s%.200s"[0], iftmp.261, D.7937);
  goto <bb 13>;
  # SUCC: 13 (fallthru)

  # BLOCK 12
  # PRED: 6 (true) 7 (true)
  D.7937 = hc->encodedurl;
  my_snprintf (&url, 305, &"%.200s"[0], D.7937);
  # SUCC: 13 (fallthru)

  # BLOCK 13
  # PRED: 11 (fallthru) 12 (fallthru)
  D.7940 = hc->bytes_sent;
  if (D.7940 >= 0)
    goto <bb 14>;
  else
    goto <bb 15>;
  # SUCC: 14 (true) 15 (false)

  # BLOCK 14
  # PRED: 13 (true)
  D.7940 = hc->bytes_sent;
  my_snprintf (&bytes, 40, &"%lld"[0], D.7940);
  goto <bb 16>;
  # SUCC: 16 (fallthru)

  # BLOCK 15
  # PRED: 13 (false)
  __builtin_memcpy (&bytes, &"-"[0], 2);
  # SUCC: 16 (fallthru)

  # BLOCK 16
  # PRED: 14 (fallthru) 15 (fallthru)
  D.7929 = hc->hs;
  D.7941 = D.7929->logfp;
  if (D.7941 != 0B)
    goto <bb 17>;
  else
    goto <bb 24>;
  # SUCC: 17 (true) 24 (false)

  # BLOCK 17
  # PRED: 16 (true)
  cernfmt_nozone = &"%d/%b/%Y:%H:%M:%S"[0];
  if (nowP != 0B)
    goto <bb 18>;
  else
    goto <bb 19>;
  # SUCC: 18 (true) 19 (false)

  # BLOCK 18
  # PRED: 17 (true)
  now.262 = nowP->tv_sec;
  now = now.262;
  goto <bb 20>;
  # SUCC: 20 (fallthru)

  # BLOCK 19
  # PRED: 17 (false)
  now.263 = time (0B);
  now = now.263;
  # SUCC: 20 (fallthru)

  # BLOCK 20
  # PRED: 18 (fallthru) 19 (fallthru)
  t.264 = localtime (&now);
  t = t.264;
  strftime (&date_nozone, 100, cernfmt_nozone, t);
  D.7945 = t->tm_gmtoff;
  D.7946 = D.7945 / 60;
  zone = (int) D.7946;
  if (zone >= 0)
    goto <bb 21>;
  else
    goto <bb 22>;
  # SUCC: 21 (true) 22 (false)

  # BLOCK 21
  # PRED: 20 (true)
  sign = 43;
  goto <bb 23>;
  # SUCC: 23 (fallthru)

  # BLOCK 22
  # PRED: 20 (false)
  sign = 45;
  zone = -zone;
  # SUCC: 23 (fallthru)

  # BLOCK 23
  # PRED: 21 (fallthru) 22 (fallthru)
  D.7947 = zone / 60;
  D.7948 = D.7947 * 100;
  D.7949 = zone % 60;
  zone = D.7948 + D.7949;
  D.7950 = (int) sign;
  my_snprintf (&date, 100, &"%s %c%04d"[0], &date_nozone, D.7950, zone);
  D.7951 = hc->useragent;
  D.7952 = hc->referer;
  D.7953 = hc->status;
  D.7954 = hc->protocol;
  D.7955 = hc->method;
  D.7956 = httpd_method_str (D.7955);
  D.7957 = &hc->client_addr;
  D.7958 = httpd_ntoa (D.7957);
  D.7929 = hc->hs;
  D.7941 = D.7929->logfp;
  fprintf (D.7941, &"%.80s - %.80s [%s] \"%.80s %.300s %.80s\" %d %s \"%.200s\" \"%.200s\"\n"[0], D.7958, ru, &date, D.7956, &url, D.7954, D.7953, &bytes, D.7952, D.7951);
  D.7929 = hc->hs;
  D.7941 = D.7929->logfp;
  fflush (D.7941);
  goto <bb 25>;
  # SUCC: 25 (fallthru)

  # BLOCK 24
  # PRED: 16 (false)
  D.7951 = hc->useragent;
  D.7952 = hc->referer;
  D.7953 = hc->status;
  D.7954 = hc->protocol;
  D.7955 = hc->method;
  D.7959 = httpd_method_str (D.7955);
  D.7957 = &hc->client_addr;
  D.7960 = httpd_ntoa (D.7957);
  syslog (6, &"%.80s - %.80s \"%.80s %.200s %.80s\" %d %s \"%.200s\" \"%.200s\""[0], D.7960, ru, D.7959, &url, D.7954, D.7953, &bytes, D.7952, D.7951);
  # SUCC: 25 (fallthru)

  # BLOCK 25
  # PRED: 2 (true) 23 (fallthru) 24 (fallthru)
  return;
  # SUCC: EXIT

}



;; Function httpd_parse_request (httpd_parse_request)

httpd_parse_request (hc)
{
  size_t __s2_len;
  size_t __s1_len;
  int i;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char * cp_dash;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char __a2;
  char __a1;
  char __a0;
  char * pi;
  char * cp;
  char * eol;
  char * reqhost;
  char * protocol;
  char * url;
  char * method_str;
  char * buf;
  char * err403title.158;
  char * D.6680;
  const char * D.6679;
  long unsigned int D.6678;
  int D.6677;
  long unsigned int D.6676;
  char * D.6675;
  char * D.6674;
  long unsigned int D.6673;
  const char * D.6672;
  long unsigned int D.6671;
  int D.6340;
  unsigned int D.6670;
  unsigned int D.6669;
  long unsigned int D.6668;
  unsigned int D.6667;
  long unsigned int D.6666;
  char D.6665;
  char * D.6664;
  char * * D.6663;
  size_t * D.6662;
  long unsigned int D.6661;
  char * pi.157;
  long unsigned int D.6659;
  char * cp.156;
  int D.6657;
  int D.6656;
  char * err500title.155;
  char * err500form.154;
  int D.6653;
  int D.6652;
  struct httpd_server * D.6651;
  char D.6650;
  char * D.6649;
  char * * D.6648;
  size_t * D.6647;
  long unsigned int D.6646;
  int D.6645;
  char D.6644;
  char * buf.153;
  int D.6642;
  long unsigned int D.6641;
  int D.6640;
  long unsigned int iftmp.152;
  long unsigned int D.6638;
  int D.6637;
  long unsigned int iftmp.151;
  long unsigned int D.6635;
  int D.6634;
  long unsigned int iftmp.150;
  long unsigned int iftmp.149;
  long unsigned int D.6329;
  int D.6631;
  long unsigned int D.6630;
  int D.6629;
  long unsigned int iftmp.148;
  long unsigned int D.6627;
  int D.6626;
  long unsigned int iftmp.147;
  long unsigned int D.6624;
  int D.6623;
  long unsigned int iftmp.146;
  long unsigned int iftmp.145;
  long unsigned int D.6325;
  int D.6620;
  long unsigned int D.6619;
  long int D.6618;
  int D.6617;
  long unsigned int D.6616;
  int D.6615;
  long unsigned int iftmp.144;
  long unsigned int D.6613;
  int D.6612;
  long unsigned int iftmp.143;
  long unsigned int D.6610;
  int D.6609;
  long unsigned int iftmp.142;
  long unsigned int iftmp.141;
  long unsigned int D.6321;
  int D.6606;
  long int D.6605;
  long int D.6604;
  int D.6603;
  int D.6602;
  long int D.6598;
  long long int D.6597;
  const char * D.6596;
  int D.6595;
  int D.6594;
  short unsigned int D.6593;
  const short unsigned int * D.6592;
  long unsigned int D.6591;
  long unsigned int D.6590;
  char D.6589;
  char * D.6588;
  const short unsigned int * D.6587;
  const short unsigned int * * D.6586;
  long int D.6585;
  long long int D.6584;
  char * D.6583;
  const char * D.6582;
  char * D.6581;
  int D.6580;
  char D.6579;
  char * D.6578;
  char * iftmp.139;
  char * D.6576;
  int D.6575;
  char * D.6574;
  char * iftmp.138;
  int D.6572;
  char * D.6571;
  char * iftmp.137;
  char * D.6569;
  char * iftmp.136;
  char * cp.140;
  char * D.6567;
  int D.6566;
  long unsigned int D.6565;
  int D.6564;
  long unsigned int iftmp.135;
  long unsigned int D.6562;
  int D.6561;
  long unsigned int iftmp.134;
  long unsigned int D.6559;
  int D.6558;
  long unsigned int iftmp.133;
  long unsigned int iftmp.132;
  long unsigned int D.6312;
  int D.6555;
  long int D.6554;
  long int D.6553;
  int D.6552;
  long unsigned int D.6551;
  int D.6550;
  long unsigned int iftmp.131;
  long unsigned int D.6548;
  int D.6547;
  long unsigned int iftmp.130;
  long unsigned int D.6545;
  int D.6544;
  long unsigned int iftmp.129;
  long unsigned int iftmp.128;
  long unsigned int D.6308;
  int D.6541;
  long unsigned int D.6540;
  char * * D.6539;
  size_t * D.6538;
  long unsigned int D.6537;
  long unsigned int D.6536;
  long unsigned int D.6535;
  long unsigned int D.6534;
  char * D.6533;
  long unsigned int D.6532;
  char D.6531;
  char * D.6530;
  long unsigned int D.6529;
  int D.6528;
  long unsigned int iftmp.127;
  long unsigned int D.6526;
  int D.6525;
  long unsigned int iftmp.126;
  long unsigned int D.6523;
  int D.6522;
  long unsigned int iftmp.125;
  long unsigned int iftmp.124;
  long unsigned int D.6304;
  int D.6519;
  long unsigned int D.6518;
  char * * D.6517;
  size_t * D.6516;
  long unsigned int D.6515;
  long unsigned int D.6514;
  long unsigned int D.6513;
  long unsigned int D.6512;
  char * D.6511;
  union httpd_sockaddr * D.6510;
  long unsigned int D.6509;
  char D.6508;
  char * D.6507;
  long unsigned int D.6506;
  int D.6505;
  long unsigned int iftmp.123;
  long unsigned int D.6503;
  int D.6502;
  long unsigned int iftmp.122;
  long unsigned int D.6500;
  int D.6499;
  long unsigned int iftmp.121;
  long unsigned int iftmp.120;
  long unsigned int D.6299;
  int D.6496;
  char D.6495;
  char * D.6494;
  char * D.6491;
  long unsigned int D.6490;
  int D.6489;
  long unsigned int iftmp.119;
  long unsigned int D.6487;
  int D.6486;
  long unsigned int iftmp.118;
  long unsigned int D.6484;
  int D.6483;
  long unsigned int iftmp.117;
  long unsigned int iftmp.116;
  long unsigned int D.6295;
  int D.6480;
  long unsigned int D.6479;
  int D.6478;
  long unsigned int iftmp.115;
  long unsigned int D.6476;
  int D.6475;
  long unsigned int iftmp.114;
  long unsigned int D.6473;
  int D.6472;
  long unsigned int iftmp.113;
  long unsigned int iftmp.112;
  long unsigned int D.6291;
  int D.6469;
  long unsigned int D.6468;
  int D.6467;
  char D.6466;
  const char * D.6465;
  long unsigned int iftmp.111;
  long unsigned int D.6463;
  int D.6462;
  char * D.6461;
  long unsigned int iftmp.110;
  long unsigned int D.6459;
  int D.6458;
  char * D.6457;
  long unsigned int iftmp.109;
  char * D.6455;
  long unsigned int iftmp.108;
  long unsigned int D.6287;
  int D.6453;
  char D.6452;
  int D.6451;
  _Bool D.6450;
  _Bool D.6449;
  _Bool D.6448;
  char D.6447;
  char * D.6446;
  char D.6445;
  char * D.6444;
  char * D.6441;
  char * * D.6440;
  size_t * D.6439;
  long unsigned int D.6438;
  char D.6437;
  char * D.6436;
  const char * D.6435;
  char * * D.6434;
  size_t * D.6433;
  long unsigned int D.6432;
  char * D.6431;
  char * * D.6430;
  size_t * D.6429;
  long unsigned int D.6428;
  char * D.6427;
  char * err501title.107;
  char * err501form.106;
  int D.6424;
  char * D.6423;
  int D.6422;
  char * D.6421;
  int D.6420;
  char * D.6419;
  char D.6418;
  char * D.6417;
  char * * D.6416;
  size_t * D.6415;
  long unsigned int D.6414;
  char D.6413;
  char * D.6412;
  int D.6409;
  int D.6408;
  int D.6407;
  char * D.6406;
  int D.6405;
  char * iftmp.104;
  char * D.6403;
  int D.6402;
  char * iftmp.103;
  int D.6400;
  char * iftmp.102;
  char * iftmp.101;
  char * eol.105;
  char D.6397;
  long unsigned int D.6396;
  int D.6395;
  long unsigned int iftmp.100;
  long unsigned int D.6393;
  int D.6392;
  long unsigned int iftmp.99;
  long unsigned int D.6390;
  int D.6389;
  long unsigned int iftmp.98;
  long unsigned int iftmp.97;
  long unsigned int D.6278;
  char * D.6386;
  int D.6385;
  char * iftmp.95;
  char * D.6383;
  int D.6382;
  char * iftmp.94;
  int D.6380;
  char * iftmp.93;
  char * iftmp.92;
  char * protocol.96;
  long unsigned int D.6377;
  int D.6376;
  long unsigned int iftmp.91;
  long unsigned int D.6374;
  int D.6373;
  long unsigned int iftmp.90;
  long unsigned int D.6371;
  int D.6370;
  long unsigned int iftmp.89;
  long unsigned int iftmp.88;
  long unsigned int D.6270;
  int D.6367;
  char * httpd_err400title.87;
  char * httpd_err400form.86;
  char * D.6364;
  int D.6363;
  char D.6362;
  char * D.6361;
  char * iftmp.84;
  char * D.6359;
  int D.6358;
  char * D.6357;
  char * iftmp.83;
  int D.6355;
  char * D.6354;
  char * iftmp.82;
  char * D.6352;
  char * iftmp.81;
  char * url.85;
  char * method_str.80;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  hc->checked_idx = 0;
  method_str.80 = bufgets (hc);
  method_str = method_str.80;
  D.6352 = &" \t\n\r"[0];
  __a0 = *D.6352;
  if (__a0 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  iftmp.81 = 0B;
  goto <bb 14>;
  # SUCC: 14 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  D.6354 = &" \t\n\r"[1];
  __a1 = *D.6354;
  if (__a1 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.6355 = (int) __a0;
  iftmp.82 = __builtin_strchr (method_str, D.6355);
  goto <bb 13>;
  # SUCC: 13 (fallthru)

  # BLOCK 6
  # PRED: 4 (false)
  D.6357 = &" \t\n\r"[2];
  __a2 = *D.6357;
  if (__a2 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  D.6358 = (int) __a1;
  D.6355 = (int) __a0;
  D.6359 = __strpbrk_c2 (method_str, D.6355, D.6358);
  iftmp.83 = D.6359;
  goto <bb 12>;
  # SUCC: 12 (fallthru)

  # BLOCK 8
  # PRED: 6 (false)
  D.6361 = &" \t\n\r"[3];
  D.6362 = *D.6361;
  if (D.6362 == 0)
    goto <bb 9>;
  else
    goto <bb 10>;
  # SUCC: 9 (true) 10 (false)

  # BLOCK 9
  # PRED: 8 (true)
  D.6363 = (int) __a2;
  D.6358 = (int) __a1;
  D.6355 = (int) __a0;
  D.6364 = __strpbrk_c3 (method_str, D.6355, D.6358, D.6363);
  iftmp.84 = D.6364;
  goto <bb 11>;
  # SUCC: 11 (fallthru)

  # BLOCK 10
  # PRED: 8 (false)
  iftmp.84 = __builtin_strpbrk (method_str, &" \t\n\r"[0]);
  # SUCC: 11 (fallthru)

  # BLOCK 11
  # PRED: 9 (fallthru) 10 (fallthru)
  iftmp.83 = iftmp.84;
  # SUCC: 12 (fallthru)

  # BLOCK 12
  # PRED: 7 (fallthru) 11 (fallthru)
  iftmp.82 = iftmp.83;
  # SUCC: 13 (fallthru)

  # BLOCK 13
  # PRED: 5 (fallthru) 12 (fallthru)
  iftmp.81 = iftmp.82;
  # SUCC: 14 (fallthru)

  # BLOCK 14
  # PRED: 3 (fallthru) 13 (fallthru)
  url.85 = iftmp.81;
  url = url.85;
  if (url == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
  # SUCC: 15 (true) 16 (false)

  # BLOCK 15
  # PRED: 14 (true)
  httpd_err400form.86 = httpd_err400form;
  httpd_err400title.87 = httpd_err400title;
  httpd_send_err (hc, 400, httpd_err400title.87, &""[0], httpd_err400form.86, &""[0]);
  D.6367 = -1;
  goto <bb 313>;
  # SUCC: 313 (fallthru)

  # BLOCK 16
  # PRED: 14 (false)
  *url = 0;
  url = url + 1;
  D.6352 = &" \t\n\r"[0];
  __a0 = *D.6352;
  if (__a0 == 0)
    goto <bb 17>;
  else
    goto <bb 18>;
  # SUCC: 17 (true) 18 (false)

  # BLOCK 17
  # PRED: 16 (true)
  iftmp.88 = 0;
  goto <bb 28>;
  # SUCC: 28 (fallthru)

  # BLOCK 18
  # PRED: 16 (false)
  D.6354 = &" \t\n\r"[1];
  __a1 = *D.6354;
  if (__a1 == 0)
    goto <bb 19>;
  else
    goto <bb 20>;
  # SUCC: 19 (true) 20 (false)

  # BLOCK 19
  # PRED: 18 (true)
  D.6370 = (int) __a0;
  D.6371 = __strspn_c1 (url, D.6370);
  iftmp.89 = D.6371;
  goto <bb 27>;
  # SUCC: 27 (fallthru)

  # BLOCK 20
  # PRED: 18 (false)
  D.6357 = &" \t\n\r"[2];
  __a2 = *D.6357;
  if (__a2 == 0)
    goto <bb 21>;
  else
    goto <bb 22>;
  # SUCC: 21 (true) 22 (false)

  # BLOCK 21
  # PRED: 20 (true)
  D.6373 = (int) __a1;
  D.6370 = (int) __a0;
  D.6374 = __strspn_c2 (url, D.6370, D.6373);
  iftmp.90 = D.6374;
  goto <bb 26>;
  # SUCC: 26 (fallthru)

  # BLOCK 22
  # PRED: 20 (false)
  D.6361 = &" \t\n\r"[3];
  D.6362 = *D.6361;
  if (D.6362 == 0)
    goto <bb 23>;
  else
    goto <bb 24>;
  # SUCC: 23 (true) 24 (false)

  # BLOCK 23
  # PRED: 22 (true)
  D.6376 = (int) __a2;
  D.6373 = (int) __a1;
  D.6370 = (int) __a0;
  D.6377 = __strspn_c3 (url, D.6370, D.6373, D.6376);
  iftmp.91 = D.6377;
  goto <bb 25>;
  # SUCC: 25 (fallthru)

  # BLOCK 24
  # PRED: 22 (false)
  iftmp.91 = __builtin_strspn (url, &" \t\n\r"[0]);
  # SUCC: 25 (fallthru)

  # BLOCK 25
  # PRED: 23 (fallthru) 24 (fallthru)
  iftmp.90 = iftmp.91;
  # SUCC: 26 (fallthru)

  # BLOCK 26
  # PRED: 21 (fallthru) 25 (fallthru)
  iftmp.89 = iftmp.90;
  # SUCC: 27 (fallthru)

  # BLOCK 27
  # PRED: 19 (fallthru) 26 (fallthru)
  iftmp.88 = iftmp.89;
  # SUCC: 28 (fallthru)

  # BLOCK 28
  # PRED: 17 (fallthru) 27 (fallthru)
  D.6270 = iftmp.88;
  url = url + D.6270;
  D.6352 = &" \t\n\r"[0];
  __a0 = *D.6352;
  if (__a0 == 0)
    goto <bb 29>;
  else
    goto <bb 30>;
  # SUCC: 29 (true) 30 (false)

  # BLOCK 29
  # PRED: 28 (true)
  iftmp.92 = 0B;
  goto <bb 40>;
  # SUCC: 40 (fallthru)

  # BLOCK 30
  # PRED: 28 (false)
  D.6354 = &" \t\n\r"[1];
  __a1 = *D.6354;
  if (__a1 == 0)
    goto <bb 31>;
  else
    goto <bb 32>;
  # SUCC: 31 (true) 32 (false)

  # BLOCK 31
  # PRED: 30 (true)
  D.6380 = (int) __a0;
  iftmp.93 = __builtin_strchr (url, D.6380);
  goto <bb 39>;
  # SUCC: 39 (fallthru)

  # BLOCK 32
  # PRED: 30 (false)
  D.6357 = &" \t\n\r"[2];
  __a2 = *D.6357;
  if (__a2 == 0)
    goto <bb 33>;
  else
    goto <bb 34>;
  # SUCC: 33 (true) 34 (false)

  # BLOCK 33
  # PRED: 32 (true)
  D.6382 = (int) __a1;
  D.6380 = (int) __a0;
  D.6383 = __strpbrk_c2 (url, D.6380, D.6382);
  iftmp.94 = D.6383;
  goto <bb 38>;
  # SUCC: 38 (fallthru)

  # BLOCK 34
  # PRED: 32 (false)
  D.6361 = &" \t\n\r"[3];
  D.6362 = *D.6361;
  if (D.6362 == 0)
    goto <bb 35>;
  else
    goto <bb 36>;
  # SUCC: 35 (true) 36 (false)

  # BLOCK 35
  # PRED: 34 (true)
  D.6385 = (int) __a2;
  D.6382 = (int) __a1;
  D.6380 = (int) __a0;
  D.6386 = __strpbrk_c3 (url, D.6380, D.6382, D.6385);
  iftmp.95 = D.6386;
  goto <bb 37>;
  # SUCC: 37 (fallthru)

  # BLOCK 36
  # PRED: 34 (false)
  iftmp.95 = __builtin_strpbrk (url, &" \t\n\r"[0]);
  # SUCC: 37 (fallthru)

  # BLOCK 37
  # PRED: 35 (fallthru) 36 (fallthru)
  iftmp.94 = iftmp.95;
  # SUCC: 38 (fallthru)

  # BLOCK 38
  # PRED: 33 (fallthru) 37 (fallthru)
  iftmp.93 = iftmp.94;
  # SUCC: 39 (fallthru)

  # BLOCK 39
  # PRED: 31 (fallthru) 38 (fallthru)
  iftmp.92 = iftmp.93;
  # SUCC: 40 (fallthru)

  # BLOCK 40
  # PRED: 29 (fallthru) 39 (fallthru)
  protocol.96 = iftmp.92;
  protocol = protocol.96;
  if (protocol == 0B)
    goto <bb 41>;
  else
    goto <bb 42>;
  # SUCC: 41 (true) 42 (false)

  # BLOCK 41
  # PRED: 40 (true)
  protocol = &"HTTP/0.9"[0];
  hc->mime_flag = 0;
  goto <bb 71>;
  # SUCC: 71 (fallthru)

  # BLOCK 42
  # PRED: 40 (false)
  *protocol = 0;
  protocol = protocol + 1;
  D.6352 = &" \t\n\r"[0];
  __a0 = *D.6352;
  if (__a0 == 0)
    goto <bb 43>;
  else
    goto <bb 44>;
  # SUCC: 43 (true) 44 (false)

  # BLOCK 43
  # PRED: 42 (true)
  iftmp.97 = 0;
  goto <bb 54>;
  # SUCC: 54 (fallthru)

  # BLOCK 44
  # PRED: 42 (false)
  D.6354 = &" \t\n\r"[1];
  __a1 = *D.6354;
  if (__a1 == 0)
    goto <bb 45>;
  else
    goto <bb 46>;
  # SUCC: 45 (true) 46 (false)

  # BLOCK 45
  # PRED: 44 (true)
  D.6389 = (int) __a0;
  D.6390 = __strspn_c1 (protocol, D.6389);
  iftmp.98 = D.6390;
  goto <bb 53>;
  # SUCC: 53 (fallthru)

  # BLOCK 46
  # PRED: 44 (false)
  D.6357 = &" \t\n\r"[2];
  __a2 = *D.6357;
  if (__a2 == 0)
    goto <bb 47>;
  else
    goto <bb 48>;
  # SUCC: 47 (true) 48 (false)

  # BLOCK 47
  # PRED: 46 (true)
  D.6392 = (int) __a1;
  D.6389 = (int) __a0;
  D.6393 = __strspn_c2 (protocol, D.6389, D.6392);
  iftmp.99 = D.6393;
  goto <bb 52>;
  # SUCC: 52 (fallthru)

  # BLOCK 48
  # PRED: 46 (false)
  D.6361 = &" \t\n\r"[3];
  D.6362 = *D.6361;
  if (D.6362 == 0)
    goto <bb 49>;
  else
    goto <bb 50>;
  # SUCC: 49 (true) 50 (false)

  # BLOCK 49
  # PRED: 48 (true)
  D.6395 = (int) __a2;
  D.6392 = (int) __a1;
  D.6389 = (int) __a0;
  D.6396 = __strspn_c3 (protocol, D.6389, D.6392, D.6395);
  iftmp.100 = D.6396;
  goto <bb 51>;
  # SUCC: 51 (fallthru)

  # BLOCK 50
  # PRED: 48 (false)
  iftmp.100 = __builtin_strspn (protocol, &" \t\n\r"[0]);
  # SUCC: 51 (fallthru)

  # BLOCK 51
  # PRED: 49 (fallthru) 50 (fallthru)
  iftmp.99 = iftmp.100;
  # SUCC: 52 (fallthru)

  # BLOCK 52
  # PRED: 47 (fallthru) 51 (fallthru)
  iftmp.98 = iftmp.99;
  # SUCC: 53 (fallthru)

  # BLOCK 53
  # PRED: 45 (fallthru) 52 (fallthru)
  iftmp.97 = iftmp.98;
  # SUCC: 54 (fallthru)

  # BLOCK 54
  # PRED: 43 (fallthru) 53 (fallthru)
  D.6278 = iftmp.97;
  protocol = protocol + D.6278;
  D.6397 = *protocol;
  if (D.6397 != 0)
    goto <bb 55>;
  else
    goto <bb 71>;
  # SUCC: 55 (true) 71 (false)

  # BLOCK 55
  # PRED: 54 (true)
  D.6352 = &" \t\n\r"[0];
  __a0 = *D.6352;
  if (__a0 == 0)
    goto <bb 56>;
  else
    goto <bb 57>;
  # SUCC: 56 (true) 57 (false)

  # BLOCK 56
  # PRED: 55 (true)
  iftmp.101 = 0B;
  goto <bb 67>;
  # SUCC: 67 (fallthru)

  # BLOCK 57
  # PRED: 55 (false)
  D.6354 = &" \t\n\r"[1];
  __a1 = *D.6354;
  if (__a1 == 0)
    goto <bb 58>;
  else
    goto <bb 59>;
  # SUCC: 58 (true) 59 (false)

  # BLOCK 58
  # PRED: 57 (true)
  D.6400 = (int) __a0;
  iftmp.102 = __builtin_strchr (protocol, D.6400);
  goto <bb 66>;
  # SUCC: 66 (fallthru)

  # BLOCK 59
  # PRED: 57 (false)
  D.6357 = &" \t\n\r"[2];
  __a2 = *D.6357;
  if (__a2 == 0)
    goto <bb 60>;
  else
    goto <bb 61>;
  # SUCC: 60 (true) 61 (false)

  # BLOCK 60
  # PRED: 59 (true)
  D.6402 = (int) __a1;
  D.6400 = (int) __a0;
  D.6403 = __strpbrk_c2 (protocol, D.6400, D.6402);
  iftmp.103 = D.6403;
  goto <bb 65>;
  # SUCC: 65 (fallthru)

  # BLOCK 61
  # PRED: 59 (false)
  D.6361 = &" \t\n\r"[3];
  D.6362 = *D.6361;
  if (D.6362 == 0)
    goto <bb 62>;
  else
    goto <bb 63>;
  # SUCC: 62 (true) 63 (false)

  # BLOCK 62
  # PRED: 61 (true)
  D.6405 = (int) __a2;
  D.6402 = (int) __a1;
  D.6400 = (int) __a0;
  D.6406 = __strpbrk_c3 (protocol, D.6400, D.6402, D.6405);
  iftmp.104 = D.6406;
  goto <bb 64>;
  # SUCC: 64 (fallthru)

  # BLOCK 63
  # PRED: 61 (false)
  iftmp.104 = __builtin_strpbrk (protocol, &" \t\n\r"[0]);
  # SUCC: 64 (fallthru)

  # BLOCK 64
  # PRED: 62 (fallthru) 63 (fallthru)
  iftmp.103 = iftmp.104;
  # SUCC: 65 (fallthru)

  # BLOCK 65
  # PRED: 60 (fallthru) 64 (fallthru)
  iftmp.102 = iftmp.103;
  # SUCC: 66 (fallthru)

  # BLOCK 66
  # PRED: 58 (fallthru) 65 (fallthru)
  iftmp.101 = iftmp.102;
  # SUCC: 67 (fallthru)

  # BLOCK 67
  # PRED: 56 (fallthru) 66 (fallthru)
  eol.105 = iftmp.101;
  eol = eol.105;
  if (eol != 0B)
    goto <bb 68>;
  else
    goto <bb 69>;
  # SUCC: 68 (true) 69 (false)

  # BLOCK 68
  # PRED: 67 (true)
  *eol = 0;
  # SUCC: 69 (fallthru)

  # BLOCK 69
  # PRED: 67 (false) 68 (fallthru)
  D.6407 = strcasecmp (protocol, &"HTTP/1.0"[0]);
  if (D.6407 != 0)
    goto <bb 70>;
  else
    goto <bb 71>;
  # SUCC: 70 (true) 71 (false)

  # BLOCK 70
  # PRED: 69 (true)
  hc->one_one = 1;
  # SUCC: 71 (fallthru)

  # BLOCK 71
  # PRED: 41 (fallthru) 54 (false) 69 (false) 70 (fallthru)
  hc->protocol = protocol;
  D.6408 = strncasecmp (url, &"http://"[0], 7);
  if (D.6408 == 0)
    goto <bb 72>;
  else
    goto <bb 80>;
  # SUCC: 72 (true) 80 (false)

  # BLOCK 72
  # PRED: 71 (true)
  D.6409 = hc->one_one;
  if (D.6409 == 0)
    goto <bb 73>;
  else
    goto <bb 74>;
  # SUCC: 73 (true) 74 (false)

  # BLOCK 73
  # PRED: 72 (true)
  httpd_err400form.86 = httpd_err400form;
  httpd_err400title.87 = httpd_err400title;
  httpd_send_err (hc, 400, httpd_err400title.87, &""[0], httpd_err400form.86, &""[0]);
  D.6367 = -1;
  goto <bb 313>;
  # SUCC: 313 (fallthru)

  # BLOCK 74
  # PRED: 72 (false)
  reqhost = url + 7;
  url = __builtin_strchr (reqhost, 47);
  if (url == 0B)
    goto <bb 75>;
  else
    goto <bb 76>;
  # SUCC: 75 (true) 76 (false)

  # BLOCK 75
  # PRED: 74 (true)
  httpd_err400form.86 = httpd_err400form;
  httpd_err400title.87 = httpd_err400title;
  httpd_send_err (hc, 400, httpd_err400title.87, &""[0], httpd_err400form.86, &""[0]);
  D.6367 = -1;
  goto <bb 313>;
  # SUCC: 313 (fallthru)

  # BLOCK 76
  # PRED: 74 (false)
  *url = 0;
  D.6412 = __builtin_strchr (reqhost, 47);
  if (D.6412 != 0B)
    goto <bb 78>;
  else
    goto <bb 77>;
  # SUCC: 78 (true) 77 (false)

  # BLOCK 77
  # PRED: 76 (false)
  D.6413 = *reqhost;
  if (D.6413 == 46)
    goto <bb 78>;
  else
    goto <bb 79>;
  # SUCC: 78 (true) 79 (false)

  # BLOCK 78
  # PRED: 76 (true) 77 (true)
  httpd_err400form.86 = httpd_err400form;
  httpd_err400title.87 = httpd_err400title;
  httpd_send_err (hc, 400, httpd_err400title.87, &""[0], httpd_err400form.86, &""[0]);
  D.6367 = -1;
  goto <bb 313>;
  # SUCC: 313 (fallthru)

  # BLOCK 79
  # PRED: 77 (false)
  D.6414 = strlen (reqhost);
  D.6415 = &hc->maxreqhost;
  D.6416 = &hc->reqhost;
  httpd_realloc_str (D.6416, D.6415, D.6414);
  D.6417 = hc->reqhost;
  strcpy (D.6417, reqhost);
  *url = 47;
  # SUCC: 80 (fallthru)

  # BLOCK 80
  # PRED: 71 (false) 79 (fallthru)
  D.6418 = *url;
  if (D.6418 != 47)
    goto <bb 81>;
  else
    goto <bb 82>;
  # SUCC: 81 (true) 82 (false)

  # BLOCK 81
  # PRED: 80 (true)
  httpd_err400form.86 = httpd_err400form;
  httpd_err400title.87 = httpd_err400title;
  httpd_send_err (hc, 400, httpd_err400title.87, &""[0], httpd_err400form.86, &""[0]);
  D.6367 = -1;
  goto <bb 313>;
  # SUCC: 313 (fallthru)

  # BLOCK 82
  # PRED: 80 (false)
  D.6419 = httpd_method_str (1);
  D.6420 = strcasecmp (method_str, D.6419);
  if (D.6420 == 0)
    goto <bb 83>;
  else
    goto <bb 84>;
  # SUCC: 83 (true) 84 (false)

  # BLOCK 83
  # PRED: 82 (true)
  hc->method = 1;
  goto <bb 89>;
  # SUCC: 89 (fallthru)

  # BLOCK 84
  # PRED: 82 (false)
  D.6421 = httpd_method_str (2);
  D.6422 = strcasecmp (method_str, D.6421);
  if (D.6422 == 0)
    goto <bb 85>;
  else
    goto <bb 86>;
  # SUCC: 85 (true) 86 (false)

  # BLOCK 85
  # PRED: 84 (true)
  hc->method = 2;
  goto <bb 89>;
  # SUCC: 89 (fallthru)

  # BLOCK 86
  # PRED: 84 (false)
  D.6423 = httpd_method_str (3);
  D.6424 = strcasecmp (method_str, D.6423);
  if (D.6424 == 0)
    goto <bb 87>;
  else
    goto <bb 88>;
  # SUCC: 87 (true) 88 (false)

  # BLOCK 87
  # PRED: 86 (true)
  hc->method = 3;
  goto <bb 89>;
  # SUCC: 89 (fallthru)

  # BLOCK 88
  # PRED: 86 (false)
  err501form.106 = err501form;
  err501title.107 = err501title;
  httpd_send_err (hc, 501, err501title.107, &""[0], err501form.106, method_str);
  D.6367 = -1;
  goto <bb 313>;
  # SUCC: 313 (fallthru)

  # BLOCK 89
  # PRED: 83 (fallthru) 85 (fallthru) 87 (fallthru)
  hc->encodedurl = url;
  D.6427 = hc->encodedurl;
  D.6428 = strlen (D.6427);
  D.6429 = &hc->maxdecodedurl;
  D.6430 = &hc->decodedurl;
  httpd_realloc_str (D.6430, D.6429, D.6428);
  D.6427 = hc->encodedurl;
  D.6431 = hc->decodedurl;
  strdecode (D.6431, D.6427);
  D.6431 = hc->decodedurl;
  D.6432 = strlen (D.6431);
  D.6433 = &hc->maxorigfilename;
  D.6434 = &hc->origfilename;
  httpd_realloc_str (D.6434, D.6433, D.6432);
  D.6431 = hc->decodedurl;
  D.6435 = D.6431 + 1;
  D.6436 = hc->origfilename;
  strcpy (D.6436, D.6435);
  D.6436 = hc->origfilename;
  D.6437 = *D.6436;
  if (D.6437 == 0)
    goto <bb 90>;
  else
    goto <bb 91>;
  # SUCC: 90 (true) 91 (false)

  # BLOCK 90
  # PRED: 89 (true)
  D.6436 = hc->origfilename;
  __builtin_memcpy (D.6436, &"."[0], 2);
  # SUCC: 91 (fallthru)

  # BLOCK 91
  # PRED: 89 (false) 90 (fallthru)
  D.6427 = hc->encodedurl;
  cp = __builtin_strchr (D.6427, 63);
  if (cp != 0B)
    goto <bb 92>;
  else
    goto <bb 94>;
  # SUCC: 92 (true) 94 (false)

  # BLOCK 92
  # PRED: 91 (true)
  cp = cp + 1;
  D.6438 = strlen (cp);
  D.6439 = &hc->maxquery;
  D.6440 = &hc->query;
  httpd_realloc_str (D.6440, D.6439, D.6438);
  D.6441 = hc->query;
  strcpy (D.6441, cp);
  D.6436 = hc->origfilename;
  cp = __builtin_strchr (D.6436, 63);
  if (cp != 0B)
    goto <bb 93>;
  else
    goto <bb 94>;
  # SUCC: 93 (true) 94 (false)

  # BLOCK 93
  # PRED: 92 (true)
  *cp = 0;
  # SUCC: 94 (fallthru)

  # BLOCK 94
  # PRED: 91 (false) 92 (false) 93 (fallthru)
  D.6436 = hc->origfilename;
  de_dotdot (D.6436);
  D.6436 = hc->origfilename;
  D.6437 = *D.6436;
  if (D.6437 == 47)
    goto <bb 98>;
  else
    goto <bb 95>;
  # SUCC: 98 (true) 95 (false)

  # BLOCK 95
  # PRED: 94 (false)
  D.6436 = hc->origfilename;
  D.6437 = *D.6436;
  if (D.6437 != 46)
    goto <bb 99>;
  else
    goto <bb 96>;
  # SUCC: 99 (true) 96 (false)

  # BLOCK 96
  # PRED: 95 (false)
  D.6436 = hc->origfilename;
  D.6444 = D.6436 + 1;
  D.6445 = *D.6444;
  if (D.6445 != 46)
    goto <bb 99>;
  else
    goto <bb 97>;
  # SUCC: 99 (true) 97 (false)

  # BLOCK 97
  # PRED: 96 (false)
  D.6436 = hc->origfilename;
  D.6446 = D.6436 + 2;
  D.6447 = *D.6446;
  D.6448 = D.6447 == 0;
  D.6449 = D.6447 == 47;
  D.6450 = D.6448 || D.6449;
  if (D.6450)
    goto <bb 98>;
  else
    goto <bb 99>;
  # SUCC: 98 (true) 99 (false)

  # BLOCK 98
  # PRED: 94 (true) 97 (true)
  httpd_err400form.86 = httpd_err400form;
  httpd_err400title.87 = httpd_err400title;
  httpd_send_err (hc, 400, httpd_err400title.87, &""[0], httpd_err400form.86, &""[0]);
  D.6367 = -1;
  goto <bb 313>;
  # SUCC: 313 (fallthru)

  # BLOCK 99
  # PRED: 95 (true) 96 (true) 97 (false)
  D.6451 = hc->mime_flag;
  if (D.6451 != 0)
    goto <bb 100>;
  else
    goto <bb 293>;
  # SUCC: 100 (true) 293 (false)

  # BLOCK 100
  # PRED: 99 (true)
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 101
  # PRED: 292 (true)
  D.6452 = *buf;
  if (D.6452 == 0)
    goto <bb 293>;
  else
    goto <bb 102>;
  # SUCC: 293 (true) 102 (false)

  # BLOCK 102
  # PRED: 101 (false)
  D.6453 = strncasecmp (buf, &"Referer:"[0], 8);
  if (D.6453 == 0)
    goto <bb 103>;
  else
    goto <bb 116>;
  # SUCC: 103 (true) 116 (false)

  # BLOCK 103
  # PRED: 102 (true)
  cp = buf + 8;
  D.6455 = &" \t"[0];
  __a0 = *D.6455;
  if (__a0 == 0)
    goto <bb 104>;
  else
    goto <bb 105>;
  # SUCC: 104 (true) 105 (false)

  # BLOCK 104
  # PRED: 103 (true)
  iftmp.108 = 0;
  goto <bb 115>;
  # SUCC: 115 (fallthru)

  # BLOCK 105
  # PRED: 103 (false)
  D.6457 = &" \t"[1];
  __a1 = *D.6457;
  if (__a1 == 0)
    goto <bb 106>;
  else
    goto <bb 107>;
  # SUCC: 106 (true) 107 (false)

  # BLOCK 106
  # PRED: 105 (true)
  D.6458 = (int) __a0;
  D.6459 = __strspn_c1 (cp, D.6458);
  iftmp.109 = D.6459;
  goto <bb 114>;
  # SUCC: 114 (fallthru)

  # BLOCK 107
  # PRED: 105 (false)
  D.6461 = &" \t"[2];
  __a2 = *D.6461;
  if (__a2 == 0)
    goto <bb 108>;
  else
    goto <bb 109>;
  # SUCC: 108 (true) 109 (false)

  # BLOCK 108
  # PRED: 107 (true)
  D.6462 = (int) __a1;
  D.6458 = (int) __a0;
  D.6463 = __strspn_c2 (cp, D.6458, D.6462);
  iftmp.110 = D.6463;
  goto <bb 113>;
  # SUCC: 113 (fallthru)

  # BLOCK 109
  # PRED: 107 (false)
  D.6465 = &" \t"[3];
  D.6466 = *D.6465;
  if (D.6466 == 0)
    goto <bb 110>;
  else
    goto <bb 111>;
  # SUCC: 110 (true) 111 (false)

  # BLOCK 110
  # PRED: 109 (true)
  D.6467 = (int) __a2;
  D.6462 = (int) __a1;
  D.6458 = (int) __a0;
  D.6468 = __strspn_c3 (cp, D.6458, D.6462, D.6467);
  iftmp.111 = D.6468;
  goto <bb 112>;
  # SUCC: 112 (fallthru)

  # BLOCK 111
  # PRED: 109 (false)
  iftmp.111 = __builtin_strspn (cp, &" \t"[0]);
  # SUCC: 112 (fallthru)

  # BLOCK 112
  # PRED: 110 (fallthru) 111 (fallthru)
  iftmp.110 = iftmp.111;
  # SUCC: 113 (fallthru)

  # BLOCK 113
  # PRED: 108 (fallthru) 112 (fallthru)
  iftmp.109 = iftmp.110;
  # SUCC: 114 (fallthru)

  # BLOCK 114
  # PRED: 106 (fallthru) 113 (fallthru)
  iftmp.108 = iftmp.109;
  # SUCC: 115 (fallthru)

  # BLOCK 115
  # PRED: 104 (fallthru) 114 (fallthru)
  D.6287 = iftmp.108;
  cp = cp + D.6287;
  hc->referer = cp;
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 116
  # PRED: 102 (false)
  D.6469 = strncasecmp (buf, &"User-Agent:"[0], 11);
  if (D.6469 == 0)
    goto <bb 117>;
  else
    goto <bb 130>;
  # SUCC: 117 (true) 130 (false)

  # BLOCK 117
  # PRED: 116 (true)
  cp = buf + 11;
  D.6455 = &" \t"[0];
  __a0 = *D.6455;
  if (__a0 == 0)
    goto <bb 118>;
  else
    goto <bb 119>;
  # SUCC: 118 (true) 119 (false)

  # BLOCK 118
  # PRED: 117 (true)
  iftmp.112 = 0;
  goto <bb 129>;
  # SUCC: 129 (fallthru)

  # BLOCK 119
  # PRED: 117 (false)
  D.6457 = &" \t"[1];
  __a1 = *D.6457;
  if (__a1 == 0)
    goto <bb 120>;
  else
    goto <bb 121>;
  # SUCC: 120 (true) 121 (false)

  # BLOCK 120
  # PRED: 119 (true)
  D.6472 = (int) __a0;
  D.6473 = __strspn_c1 (cp, D.6472);
  iftmp.113 = D.6473;
  goto <bb 128>;
  # SUCC: 128 (fallthru)

  # BLOCK 121
  # PRED: 119 (false)
  D.6461 = &" \t"[2];
  __a2 = *D.6461;
  if (__a2 == 0)
    goto <bb 122>;
  else
    goto <bb 123>;
  # SUCC: 122 (true) 123 (false)

  # BLOCK 122
  # PRED: 121 (true)
  D.6475 = (int) __a1;
  D.6472 = (int) __a0;
  D.6476 = __strspn_c2 (cp, D.6472, D.6475);
  iftmp.114 = D.6476;
  goto <bb 127>;
  # SUCC: 127 (fallthru)

  # BLOCK 123
  # PRED: 121 (false)
  D.6465 = &" \t"[3];
  D.6466 = *D.6465;
  if (D.6466 == 0)
    goto <bb 124>;
  else
    goto <bb 125>;
  # SUCC: 124 (true) 125 (false)

  # BLOCK 124
  # PRED: 123 (true)
  D.6478 = (int) __a2;
  D.6475 = (int) __a1;
  D.6472 = (int) __a0;
  D.6479 = __strspn_c3 (cp, D.6472, D.6475, D.6478);
  iftmp.115 = D.6479;
  goto <bb 126>;
  # SUCC: 126 (fallthru)

  # BLOCK 125
  # PRED: 123 (false)
  iftmp.115 = __builtin_strspn (cp, &" \t"[0]);
  # SUCC: 126 (fallthru)

  # BLOCK 126
  # PRED: 124 (fallthru) 125 (fallthru)
  iftmp.114 = iftmp.115;
  # SUCC: 127 (fallthru)

  # BLOCK 127
  # PRED: 122 (fallthru) 126 (fallthru)
  iftmp.113 = iftmp.114;
  # SUCC: 128 (fallthru)

  # BLOCK 128
  # PRED: 120 (fallthru) 127 (fallthru)
  iftmp.112 = iftmp.113;
  # SUCC: 129 (fallthru)

  # BLOCK 129
  # PRED: 118 (fallthru) 128 (fallthru)
  D.6291 = iftmp.112;
  cp = cp + D.6291;
  hc->useragent = cp;
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 130
  # PRED: 116 (false)
  D.6480 = strncasecmp (buf, &"Host:"[0], 5);
  if (D.6480 == 0)
    goto <bb 131>;
  else
    goto <bb 149>;
  # SUCC: 131 (true) 149 (false)

  # BLOCK 131
  # PRED: 130 (true)
  cp = buf + 5;
  D.6455 = &" \t"[0];
  __a0 = *D.6455;
  if (__a0 == 0)
    goto <bb 132>;
  else
    goto <bb 133>;
  # SUCC: 132 (true) 133 (false)

  # BLOCK 132
  # PRED: 131 (true)
  iftmp.116 = 0;
  goto <bb 143>;
  # SUCC: 143 (fallthru)

  # BLOCK 133
  # PRED: 131 (false)
  D.6457 = &" \t"[1];
  __a1 = *D.6457;
  if (__a1 == 0)
    goto <bb 134>;
  else
    goto <bb 135>;
  # SUCC: 134 (true) 135 (false)

  # BLOCK 134
  # PRED: 133 (true)
  D.6483 = (int) __a0;
  D.6484 = __strspn_c1 (cp, D.6483);
  iftmp.117 = D.6484;
  goto <bb 142>;
  # SUCC: 142 (fallthru)

  # BLOCK 135
  # PRED: 133 (false)
  D.6461 = &" \t"[2];
  __a2 = *D.6461;
  if (__a2 == 0)
    goto <bb 136>;
  else
    goto <bb 137>;
  # SUCC: 136 (true) 137 (false)

  # BLOCK 136
  # PRED: 135 (true)
  D.6486 = (int) __a1;
  D.6483 = (int) __a0;
  D.6487 = __strspn_c2 (cp, D.6483, D.6486);
  iftmp.118 = D.6487;
  goto <bb 141>;
  # SUCC: 141 (fallthru)

  # BLOCK 137
  # PRED: 135 (false)
  D.6465 = &" \t"[3];
  D.6466 = *D.6465;
  if (D.6466 == 0)
    goto <bb 138>;
  else
    goto <bb 139>;
  # SUCC: 138 (true) 139 (false)

  # BLOCK 138
  # PRED: 137 (true)
  D.6489 = (int) __a2;
  D.6486 = (int) __a1;
  D.6483 = (int) __a0;
  D.6490 = __strspn_c3 (cp, D.6483, D.6486, D.6489);
  iftmp.119 = D.6490;
  goto <bb 140>;
  # SUCC: 140 (fallthru)

  # BLOCK 139
  # PRED: 137 (false)
  iftmp.119 = __builtin_strspn (cp, &" \t"[0]);
  # SUCC: 140 (fallthru)

  # BLOCK 140
  # PRED: 138 (fallthru) 139 (fallthru)
  iftmp.118 = iftmp.119;
  # SUCC: 141 (fallthru)

  # BLOCK 141
  # PRED: 136 (fallthru) 140 (fallthru)
  iftmp.117 = iftmp.118;
  # SUCC: 142 (fallthru)

  # BLOCK 142
  # PRED: 134 (fallthru) 141 (fallthru)
  iftmp.116 = iftmp.117;
  # SUCC: 143 (fallthru)

  # BLOCK 143
  # PRED: 132 (fallthru) 142 (fallthru)
  D.6295 = iftmp.116;
  cp = cp + D.6295;
  hc->hdrhost = cp;
  D.6491 = hc->hdrhost;
  cp = __builtin_strchr (D.6491, 58);
  if (cp != 0B)
    goto <bb 144>;
  else
    goto <bb 145>;
  # SUCC: 144 (true) 145 (false)

  # BLOCK 144
  # PRED: 143 (true)
  *cp = 0;
  # SUCC: 145 (fallthru)

  # BLOCK 145
  # PRED: 143 (false) 144 (fallthru)
  D.6491 = hc->hdrhost;
  D.6494 = __builtin_strchr (D.6491, 47);
  if (D.6494 != 0B)
    goto <bb 147>;
  else
    goto <bb 146>;
  # SUCC: 147 (true) 146 (false)

  # BLOCK 146
  # PRED: 145 (false)
  D.6491 = hc->hdrhost;
  D.6495 = *D.6491;
  if (D.6495 == 46)
    goto <bb 147>;
  else
    goto <bb 148>;
  # SUCC: 147 (true) 148 (false)

  # BLOCK 147
  # PRED: 145 (true) 146 (true)
  httpd_err400form.86 = httpd_err400form;
  httpd_err400title.87 = httpd_err400title;
  httpd_send_err (hc, 400, httpd_err400title.87, &""[0], httpd_err400form.86, &""[0]);
  D.6367 = -1;
  goto <bb 313>;
  # SUCC: 313 (fallthru)

  # BLOCK 148
  # PRED: 146 (false)
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 149
  # PRED: 130 (false)
  D.6496 = strncasecmp (buf, &"Accept:"[0], 7);
  if (D.6496 == 0)
    goto <bb 150>;
  else
    goto <bb 168>;
  # SUCC: 150 (true) 168 (false)

  # BLOCK 150
  # PRED: 149 (true)
  cp = buf + 7;
  D.6455 = &" \t"[0];
  __a0 = *D.6455;
  if (__a0 == 0)
    goto <bb 151>;
  else
    goto <bb 152>;
  # SUCC: 151 (true) 152 (false)

  # BLOCK 151
  # PRED: 150 (true)
  iftmp.120 = 0;
  goto <bb 162>;
  # SUCC: 162 (fallthru)

  # BLOCK 152
  # PRED: 150 (false)
  D.6457 = &" \t"[1];
  __a1 = *D.6457;
  if (__a1 == 0)
    goto <bb 153>;
  else
    goto <bb 154>;
  # SUCC: 153 (true) 154 (false)

  # BLOCK 153
  # PRED: 152 (true)
  D.6499 = (int) __a0;
  D.6500 = __strspn_c1 (cp, D.6499);
  iftmp.121 = D.6500;
  goto <bb 161>;
  # SUCC: 161 (fallthru)

  # BLOCK 154
  # PRED: 152 (false)
  D.6461 = &" \t"[2];
  __a2 = *D.6461;
  if (__a2 == 0)
    goto <bb 155>;
  else
    goto <bb 156>;
  # SUCC: 155 (true) 156 (false)

  # BLOCK 155
  # PRED: 154 (true)
  D.6502 = (int) __a1;
  D.6499 = (int) __a0;
  D.6503 = __strspn_c2 (cp, D.6499, D.6502);
  iftmp.122 = D.6503;
  goto <bb 160>;
  # SUCC: 160 (fallthru)

  # BLOCK 156
  # PRED: 154 (false)
  D.6465 = &" \t"[3];
  D.6466 = *D.6465;
  if (D.6466 == 0)
    goto <bb 157>;
  else
    goto <bb 158>;
  # SUCC: 157 (true) 158 (false)

  # BLOCK 157
  # PRED: 156 (true)
  D.6505 = (int) __a2;
  D.6502 = (int) __a1;
  D.6499 = (int) __a0;
  D.6506 = __strspn_c3 (cp, D.6499, D.6502, D.6505);
  iftmp.123 = D.6506;
  goto <bb 159>;
  # SUCC: 159 (fallthru)

  # BLOCK 158
  # PRED: 156 (false)
  iftmp.123 = __builtin_strspn (cp, &" \t"[0]);
  # SUCC: 159 (fallthru)

  # BLOCK 159
  # PRED: 157 (fallthru) 158 (fallthru)
  iftmp.122 = iftmp.123;
  # SUCC: 160 (fallthru)

  # BLOCK 160
  # PRED: 155 (fallthru) 159 (fallthru)
  iftmp.121 = iftmp.122;
  # SUCC: 161 (fallthru)

  # BLOCK 161
  # PRED: 153 (fallthru) 160 (fallthru)
  iftmp.120 = iftmp.121;
  # SUCC: 162 (fallthru)

  # BLOCK 162
  # PRED: 151 (fallthru) 161 (fallthru)
  D.6299 = iftmp.120;
  cp = cp + D.6299;
  D.6507 = hc->accept;
  D.6508 = *D.6507;
  if (D.6508 != 0)
    goto <bb 163>;
  else
    goto <bb 166>;
  # SUCC: 163 (true) 166 (false)

  # BLOCK 163
  # PRED: 162 (true)
  D.6507 = hc->accept;
  D.6509 = strlen (D.6507);
  if (D.6509 > 5000)
    goto <bb 164>;
  else
    goto <bb 165>;
  # SUCC: 164 (true) 165 (false)

  # BLOCK 164
  # PRED: 163 (true)
  D.6510 = &hc->client_addr;
  D.6511 = httpd_ntoa (D.6510);
  syslog (3, &"%.80s way too much Accept: data"[0], D.6511);
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 165
  # PRED: 163 (false)
  D.6507 = hc->accept;
  D.6512 = strlen (D.6507);
  D.6513 = strlen (cp);
  D.6514 = D.6512 + D.6513;
  D.6515 = D.6514 + 2;
  D.6516 = &hc->maxaccept;
  D.6517 = &hc->accept;
  httpd_realloc_str (D.6517, D.6516, D.6515);
  D.6507 = hc->accept;
  strcat (D.6507, &", "[0]);
  goto <bb 167>;
  # SUCC: 167 (fallthru)

  # BLOCK 166
  # PRED: 162 (false)
  D.6518 = strlen (cp);
  D.6516 = &hc->maxaccept;
  D.6517 = &hc->accept;
  httpd_realloc_str (D.6517, D.6516, D.6518);
  # SUCC: 167 (fallthru)

  # BLOCK 167
  # PRED: 165 (fallthru) 166 (fallthru)
  D.6507 = hc->accept;
  strcat (D.6507, cp);
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 168
  # PRED: 149 (false)
  D.6519 = strncasecmp (buf, &"Accept-Encoding:"[0], 16);
  if (D.6519 == 0)
    goto <bb 169>;
  else
    goto <bb 187>;
  # SUCC: 169 (true) 187 (false)

  # BLOCK 169
  # PRED: 168 (true)
  cp = buf + 16;
  D.6455 = &" \t"[0];
  __a0 = *D.6455;
  if (__a0 == 0)
    goto <bb 170>;
  else
    goto <bb 171>;
  # SUCC: 170 (true) 171 (false)

  # BLOCK 170
  # PRED: 169 (true)
  iftmp.124 = 0;
  goto <bb 181>;
  # SUCC: 181 (fallthru)

  # BLOCK 171
  # PRED: 169 (false)
  D.6457 = &" \t"[1];
  __a1 = *D.6457;
  if (__a1 == 0)
    goto <bb 172>;
  else
    goto <bb 173>;
  # SUCC: 172 (true) 173 (false)

  # BLOCK 172
  # PRED: 171 (true)
  D.6522 = (int) __a0;
  D.6523 = __strspn_c1 (cp, D.6522);
  iftmp.125 = D.6523;
  goto <bb 180>;
  # SUCC: 180 (fallthru)

  # BLOCK 173
  # PRED: 171 (false)
  D.6461 = &" \t"[2];
  __a2 = *D.6461;
  if (__a2 == 0)
    goto <bb 174>;
  else
    goto <bb 175>;
  # SUCC: 174 (true) 175 (false)

  # BLOCK 174
  # PRED: 173 (true)
  D.6525 = (int) __a1;
  D.6522 = (int) __a0;
  D.6526 = __strspn_c2 (cp, D.6522, D.6525);
  iftmp.126 = D.6526;
  goto <bb 179>;
  # SUCC: 179 (fallthru)

  # BLOCK 175
  # PRED: 173 (false)
  D.6465 = &" \t"[3];
  D.6466 = *D.6465;
  if (D.6466 == 0)
    goto <bb 176>;
  else
    goto <bb 177>;
  # SUCC: 176 (true) 177 (false)

  # BLOCK 176
  # PRED: 175 (true)
  D.6528 = (int) __a2;
  D.6525 = (int) __a1;
  D.6522 = (int) __a0;
  D.6529 = __strspn_c3 (cp, D.6522, D.6525, D.6528);
  iftmp.127 = D.6529;
  goto <bb 178>;
  # SUCC: 178 (fallthru)

  # BLOCK 177
  # PRED: 175 (false)
  iftmp.127 = __builtin_strspn (cp, &" \t"[0]);
  # SUCC: 178 (fallthru)

  # BLOCK 178
  # PRED: 176 (fallthru) 177 (fallthru)
  iftmp.126 = iftmp.127;
  # SUCC: 179 (fallthru)

  # BLOCK 179
  # PRED: 174 (fallthru) 178 (fallthru)
  iftmp.125 = iftmp.126;
  # SUCC: 180 (fallthru)

  # BLOCK 180
  # PRED: 172 (fallthru) 179 (fallthru)
  iftmp.124 = iftmp.125;
  # SUCC: 181 (fallthru)

  # BLOCK 181
  # PRED: 170 (fallthru) 180 (fallthru)
  D.6304 = iftmp.124;
  cp = cp + D.6304;
  D.6530 = hc->accepte;
  D.6531 = *D.6530;
  if (D.6531 != 0)
    goto <bb 182>;
  else
    goto <bb 185>;
  # SUCC: 182 (true) 185 (false)

  # BLOCK 182
  # PRED: 181 (true)
  D.6530 = hc->accepte;
  D.6532 = strlen (D.6530);
  if (D.6532 > 5000)
    goto <bb 183>;
  else
    goto <bb 184>;
  # SUCC: 183 (true) 184 (false)

  # BLOCK 183
  # PRED: 182 (true)
  D.6510 = &hc->client_addr;
  D.6533 = httpd_ntoa (D.6510);
  syslog (3, &"%.80s way too much Accept-Encoding: data"[0], D.6533);
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 184
  # PRED: 182 (false)
  D.6530 = hc->accepte;
  D.6534 = strlen (D.6530);
  D.6535 = strlen (cp);
  D.6536 = D.6534 + D.6535;
  D.6537 = D.6536 + 2;
  D.6538 = &hc->maxaccepte;
  D.6539 = &hc->accepte;
  httpd_realloc_str (D.6539, D.6538, D.6537);
  D.6530 = hc->accepte;
  strcat (D.6530, &", "[0]);
  goto <bb 186>;
  # SUCC: 186 (fallthru)

  # BLOCK 185
  # PRED: 181 (false)
  D.6540 = strlen (cp);
  D.6538 = &hc->maxaccepte;
  D.6539 = &hc->accepte;
  httpd_realloc_str (D.6539, D.6538, D.6540);
  # SUCC: 186 (fallthru)

  # BLOCK 186
  # PRED: 184 (fallthru) 185 (fallthru)
  D.6530 = hc->accepte;
  strcpy (D.6530, cp);
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 187
  # PRED: 168 (false)
  D.6541 = strncasecmp (buf, &"Accept-Language:"[0], 16);
  if (D.6541 == 0)
    goto <bb 188>;
  else
    goto <bb 201>;
  # SUCC: 188 (true) 201 (false)

  # BLOCK 188
  # PRED: 187 (true)
  cp = buf + 16;
  D.6455 = &" \t"[0];
  __a0 = *D.6455;
  if (__a0 == 0)
    goto <bb 189>;
  else
    goto <bb 190>;
  # SUCC: 189 (true) 190 (false)

  # BLOCK 189
  # PRED: 188 (true)
  iftmp.128 = 0;
  goto <bb 200>;
  # SUCC: 200 (fallthru)

  # BLOCK 190
  # PRED: 188 (false)
  D.6457 = &" \t"[1];
  __a1 = *D.6457;
  if (__a1 == 0)
    goto <bb 191>;
  else
    goto <bb 192>;
  # SUCC: 191 (true) 192 (false)

  # BLOCK 191
  # PRED: 190 (true)
  D.6544 = (int) __a0;
  D.6545 = __strspn_c1 (cp, D.6544);
  iftmp.129 = D.6545;
  goto <bb 199>;
  # SUCC: 199 (fallthru)

  # BLOCK 192
  # PRED: 190 (false)
  D.6461 = &" \t"[2];
  __a2 = *D.6461;
  if (__a2 == 0)
    goto <bb 193>;
  else
    goto <bb 194>;
  # SUCC: 193 (true) 194 (false)

  # BLOCK 193
  # PRED: 192 (true)
  D.6547 = (int) __a1;
  D.6544 = (int) __a0;
  D.6548 = __strspn_c2 (cp, D.6544, D.6547);
  iftmp.130 = D.6548;
  goto <bb 198>;
  # SUCC: 198 (fallthru)

  # BLOCK 194
  # PRED: 192 (false)
  D.6465 = &" \t"[3];
  D.6466 = *D.6465;
  if (D.6466 == 0)
    goto <bb 195>;
  else
    goto <bb 196>;
  # SUCC: 195 (true) 196 (false)

  # BLOCK 195
  # PRED: 194 (true)
  D.6550 = (int) __a2;
  D.6547 = (int) __a1;
  D.6544 = (int) __a0;
  D.6551 = __strspn_c3 (cp, D.6544, D.6547, D.6550);
  iftmp.131 = D.6551;
  goto <bb 197>;
  # SUCC: 197 (fallthru)

  # BLOCK 196
  # PRED: 194 (false)
  iftmp.131 = __builtin_strspn (cp, &" \t"[0]);
  # SUCC: 197 (fallthru)

  # BLOCK 197
  # PRED: 195 (fallthru) 196 (fallthru)
  iftmp.130 = iftmp.131;
  # SUCC: 198 (fallthru)

  # BLOCK 198
  # PRED: 193 (fallthru) 197 (fallthru)
  iftmp.129 = iftmp.130;
  # SUCC: 199 (fallthru)

  # BLOCK 199
  # PRED: 191 (fallthru) 198 (fallthru)
  iftmp.128 = iftmp.129;
  # SUCC: 200 (fallthru)

  # BLOCK 200
  # PRED: 189 (fallthru) 199 (fallthru)
  D.6308 = iftmp.128;
  cp = cp + D.6308;
  hc->acceptl = cp;
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 201
  # PRED: 187 (false)
  D.6552 = strncasecmp (buf, &"If-Modified-Since:"[0], 18);
  if (D.6552 == 0)
    goto <bb 202>;
  else
    goto <bb 205>;
  # SUCC: 202 (true) 205 (false)

  # BLOCK 202
  # PRED: 201 (true)
  cp = buf + 18;
  D.6553 = tdate_parse (cp);
  hc->if_modified_since = D.6553;
  D.6554 = hc->if_modified_since;
  if (D.6554 == -1)
    goto <bb 203>;
  else
    goto <bb 204>;
  # SUCC: 203 (true) 204 (false)

  # BLOCK 203
  # PRED: 202 (true)
  syslog (7, &"unparsable time: %.80s"[0], cp);
  # SUCC: 204 (fallthru)

  # BLOCK 204
  # PRED: 202 (false) 203 (fallthru)
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 205
  # PRED: 201 (false)
  D.6555 = strncasecmp (buf, &"Cookie:"[0], 7);
  if (D.6555 == 0)
    goto <bb 206>;
  else
    goto <bb 219>;
  # SUCC: 206 (true) 219 (false)

  # BLOCK 206
  # PRED: 205 (true)
  cp = buf + 7;
  D.6455 = &" \t"[0];
  __a0 = *D.6455;
  if (__a0 == 0)
    goto <bb 207>;
  else
    goto <bb 208>;
  # SUCC: 207 (true) 208 (false)

  # BLOCK 207
  # PRED: 206 (true)
  iftmp.132 = 0;
  goto <bb 218>;
  # SUCC: 218 (fallthru)

  # BLOCK 208
  # PRED: 206 (false)
  D.6457 = &" \t"[1];
  __a1 = *D.6457;
  if (__a1 == 0)
    goto <bb 209>;
  else
    goto <bb 210>;
  # SUCC: 209 (true) 210 (false)

  # BLOCK 209
  # PRED: 208 (true)
  D.6558 = (int) __a0;
  D.6559 = __strspn_c1 (cp, D.6558);
  iftmp.133 = D.6559;
  goto <bb 217>;
  # SUCC: 217 (fallthru)

  # BLOCK 210
  # PRED: 208 (false)
  D.6461 = &" \t"[2];
  __a2 = *D.6461;
  if (__a2 == 0)
    goto <bb 211>;
  else
    goto <bb 212>;
  # SUCC: 211 (true) 212 (false)

  # BLOCK 211
  # PRED: 210 (true)
  D.6561 = (int) __a1;
  D.6558 = (int) __a0;
  D.6562 = __strspn_c2 (cp, D.6558, D.6561);
  iftmp.134 = D.6562;
  goto <bb 216>;
  # SUCC: 216 (fallthru)

  # BLOCK 212
  # PRED: 210 (false)
  D.6465 = &" \t"[3];
  D.6466 = *D.6465;
  if (D.6466 == 0)
    goto <bb 213>;
  else
    goto <bb 214>;
  # SUCC: 213 (true) 214 (false)

  # BLOCK 213
  # PRED: 212 (true)
  D.6564 = (int) __a2;
  D.6561 = (int) __a1;
  D.6558 = (int) __a0;
  D.6565 = __strspn_c3 (cp, D.6558, D.6561, D.6564);
  iftmp.135 = D.6565;
  goto <bb 215>;
  # SUCC: 215 (fallthru)

  # BLOCK 214
  # PRED: 212 (false)
  iftmp.135 = __builtin_strspn (cp, &" \t"[0]);
  # SUCC: 215 (fallthru)

  # BLOCK 215
  # PRED: 213 (fallthru) 214 (fallthru)
  iftmp.134 = iftmp.135;
  # SUCC: 216 (fallthru)

  # BLOCK 216
  # PRED: 211 (fallthru) 215 (fallthru)
  iftmp.133 = iftmp.134;
  # SUCC: 217 (fallthru)

  # BLOCK 217
  # PRED: 209 (fallthru) 216 (fallthru)
  iftmp.132 = iftmp.133;
  # SUCC: 218 (fallthru)

  # BLOCK 218
  # PRED: 207 (fallthru) 217 (fallthru)
  D.6312 = iftmp.132;
  cp = cp + D.6312;
  hc->cookie = cp;
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 219
  # PRED: 205 (false)
  D.6566 = strncasecmp (buf, &"Range:"[0], 6);
  if (D.6566 == 0)
    goto <bb 220>;
  else
    goto <bb 242>;
  # SUCC: 220 (true) 242 (false)

  # BLOCK 220
  # PRED: 219 (true)
  D.6567 = __builtin_strchr (buf, 44);
  if (D.6567 == 0B)
    goto <bb 221>;
  else
    goto <bb 241>;
  # SUCC: 221 (true) 241 (false)

  # BLOCK 221
  # PRED: 220 (true)
  D.6569 = &"="[0];
  __a0 = *D.6569;
  if (__a0 == 0)
    goto <bb 222>;
  else
    goto <bb 223>;
  # SUCC: 222 (true) 223 (false)

  # BLOCK 222
  # PRED: 221 (true)
  iftmp.136 = 0B;
  goto <bb 233>;
  # SUCC: 233 (fallthru)

  # BLOCK 223
  # PRED: 221 (false)
  D.6571 = &"="[1];
  __a1 = *D.6571;
  if (__a1 == 0)
    goto <bb 224>;
  else
    goto <bb 225>;
  # SUCC: 224 (true) 225 (false)

  # BLOCK 224
  # PRED: 223 (true)
  D.6572 = (int) __a0;
  iftmp.137 = __builtin_strchr (buf, D.6572);
  goto <bb 232>;
  # SUCC: 232 (fallthru)

  # BLOCK 225
  # PRED: 223 (false)
  D.6574 = &"="[2];
  __a2 = *D.6574;
  if (__a2 == 0)
    goto <bb 226>;
  else
    goto <bb 227>;
  # SUCC: 226 (true) 227 (false)

  # BLOCK 226
  # PRED: 225 (true)
  D.6575 = (int) __a1;
  D.6572 = (int) __a0;
  D.6576 = __strpbrk_c2 (buf, D.6572, D.6575);
  iftmp.138 = D.6576;
  goto <bb 231>;
  # SUCC: 231 (fallthru)

  # BLOCK 227
  # PRED: 225 (false)
  D.6578 = &"="[3];
  D.6579 = *D.6578;
  if (D.6579 == 0)
    goto <bb 228>;
  else
    goto <bb 229>;
  # SUCC: 228 (true) 229 (false)

  # BLOCK 228
  # PRED: 227 (true)
  D.6580 = (int) __a2;
  D.6575 = (int) __a1;
  D.6572 = (int) __a0;
  D.6581 = __strpbrk_c3 (buf, D.6572, D.6575, D.6580);
  iftmp.139 = D.6581;
  goto <bb 230>;
  # SUCC: 230 (fallthru)

  # BLOCK 229
  # PRED: 227 (false)
  iftmp.139 = __builtin_strchr (buf, 61);
  # SUCC: 230 (fallthru)

  # BLOCK 230
  # PRED: 228 (fallthru) 229 (fallthru)
  iftmp.138 = iftmp.139;
  # SUCC: 231 (fallthru)

  # BLOCK 231
  # PRED: 226 (fallthru) 230 (fallthru)
  iftmp.137 = iftmp.138;
  # SUCC: 232 (fallthru)

  # BLOCK 232
  # PRED: 224 (fallthru) 231 (fallthru)
  iftmp.136 = iftmp.137;
  # SUCC: 233 (fallthru)

  # BLOCK 233
  # PRED: 222 (fallthru) 232 (fallthru)
  cp.140 = iftmp.136;
  cp = cp.140;
  if (cp != 0B)
    goto <bb 234>;
  else
    goto <bb 241>;
  # SUCC: 234 (true) 241 (false)

  # BLOCK 234
  # PRED: 233 (true)
  D.6582 = cp + 1;
  cp_dash = __builtin_strchr (D.6582, 45);
  if (cp_dash != 0B)
    goto <bb 235>;
  else
    goto <bb 241>;
  # SUCC: 235 (true) 241 (false)

  # BLOCK 235
  # PRED: 234 (true)
  D.6583 = cp + 1;
  if (D.6583 != cp_dash)
    goto <bb 236>;
  else
    goto <bb 241>;
  # SUCC: 236 (true) 241 (false)

  # BLOCK 236
  # PRED: 235 (true)
  *cp_dash = 0;
  hc->got_range = 1;
  D.6582 = cp + 1;
  D.6584 = atoll (D.6582);
  hc->first_byte_index = D.6584;
  D.6585 = hc->first_byte_index;
  if (D.6585 < 0)
    goto <bb 237>;
  else
    goto <bb 238>;
  # SUCC: 237 (true) 238 (false)

  # BLOCK 237
  # PRED: 236 (true)
  hc->first_byte_index = 0;
  # SUCC: 238 (fallthru)

  # BLOCK 238
  # PRED: 236 (false) 237 (fallthru)
  D.6586 = __ctype_b_loc ();
  D.6587 = *D.6586;
  D.6588 = cp_dash + 1;
  D.6589 = *D.6588;
  D.6590 = (long unsigned int) D.6589;
  D.6591 = D.6590 * 2;
  D.6592 = D.6587 + D.6591;
  D.6593 = *D.6592;
  D.6594 = (int) D.6593;
  D.6595 = D.6594 & 2048;
  if (D.6595 != 0)
    goto <bb 239>;
  else
    goto <bb 241>;
  # SUCC: 239 (true) 241 (false)

  # BLOCK 239
  # PRED: 238 (true)
  D.6596 = cp_dash + 1;
  D.6597 = atoll (D.6596);
  hc->last_byte_index = D.6597;
  D.6598 = hc->last_byte_index;
  if (D.6598 < 0)
    goto <bb 240>;
  else
    goto <bb 241>;
  # SUCC: 240 (true) 241 (false)

  # BLOCK 240
  # PRED: 239 (true)
  hc->last_byte_index = -1;
  # SUCC: 241 (fallthru)

  # BLOCK 241
  # PRED: 220 (false) 233 (false) 234 (false) 235 (false) 238 (false) 239 (false) 240 (fallthru)
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 242
  # PRED: 219 (false)
  D.6602 = strncasecmp (buf, &"Range-If:"[0], 9);
  if (D.6602 == 0)
    goto <bb 244>;
  else
    goto <bb 243>;
  # SUCC: 244 (true) 243 (false)

  # BLOCK 243
  # PRED: 242 (false)
  D.6603 = strncasecmp (buf, &"If-Range:"[0], 9);
  if (D.6603 == 0)
    goto <bb 244>;
  else
    goto <bb 247>;
  # SUCC: 244 (true) 247 (false)

  # BLOCK 244
  # PRED: 242 (true) 243 (true)
  cp = buf + 9;
  D.6604 = tdate_parse (cp);
  hc->range_if = D.6604;
  D.6605 = hc->range_if;
  if (D.6605 == -1)
    goto <bb 245>;
  else
    goto <bb 246>;
  # SUCC: 245 (true) 246 (false)

  # BLOCK 245
  # PRED: 244 (true)
  syslog (7, &"unparsable time: %.80s"[0], cp);
  # SUCC: 246 (fallthru)

  # BLOCK 246
  # PRED: 244 (false) 245 (fallthru)
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 247
  # PRED: 243 (false)
  D.6606 = strncasecmp (buf, &"Content-Type:"[0], 13);
  if (D.6606 == 0)
    goto <bb 248>;
  else
    goto <bb 261>;
  # SUCC: 248 (true) 261 (false)

  # BLOCK 248
  # PRED: 247 (true)
  cp = buf + 13;
  D.6455 = &" \t"[0];
  __a0 = *D.6455;
  if (__a0 == 0)
    goto <bb 249>;
  else
    goto <bb 250>;
  # SUCC: 249 (true) 250 (false)

  # BLOCK 249
  # PRED: 248 (true)
  iftmp.141 = 0;
  goto <bb 260>;
  # SUCC: 260 (fallthru)

  # BLOCK 250
  # PRED: 248 (false)
  D.6457 = &" \t"[1];
  __a1 = *D.6457;
  if (__a1 == 0)
    goto <bb 251>;
  else
    goto <bb 252>;
  # SUCC: 251 (true) 252 (false)

  # BLOCK 251
  # PRED: 250 (true)
  D.6609 = (int) __a0;
  D.6610 = __strspn_c1 (cp, D.6609);
  iftmp.142 = D.6610;
  goto <bb 259>;
  # SUCC: 259 (fallthru)

  # BLOCK 252
  # PRED: 250 (false)
  D.6461 = &" \t"[2];
  __a2 = *D.6461;
  if (__a2 == 0)
    goto <bb 253>;
  else
    goto <bb 254>;
  # SUCC: 253 (true) 254 (false)

  # BLOCK 253
  # PRED: 252 (true)
  D.6612 = (int) __a1;
  D.6609 = (int) __a0;
  D.6613 = __strspn_c2 (cp, D.6609, D.6612);
  iftmp.143 = D.6613;
  goto <bb 258>;
  # SUCC: 258 (fallthru)

  # BLOCK 254
  # PRED: 252 (false)
  D.6465 = &" \t"[3];
  D.6466 = *D.6465;
  if (D.6466 == 0)
    goto <bb 255>;
  else
    goto <bb 256>;
  # SUCC: 255 (true) 256 (false)

  # BLOCK 255
  # PRED: 254 (true)
  D.6615 = (int) __a2;
  D.6612 = (int) __a1;
  D.6609 = (int) __a0;
  D.6616 = __strspn_c3 (cp, D.6609, D.6612, D.6615);
  iftmp.144 = D.6616;
  goto <bb 257>;
  # SUCC: 257 (fallthru)

  # BLOCK 256
  # PRED: 254 (false)
  iftmp.144 = __builtin_strspn (cp, &" \t"[0]);
  # SUCC: 257 (fallthru)

  # BLOCK 257
  # PRED: 255 (fallthru) 256 (fallthru)
  iftmp.143 = iftmp.144;
  # SUCC: 258 (fallthru)

  # BLOCK 258
  # PRED: 253 (fallthru) 257 (fallthru)
  iftmp.142 = iftmp.143;
  # SUCC: 259 (fallthru)

  # BLOCK 259
  # PRED: 251 (fallthru) 258 (fallthru)
  iftmp.141 = iftmp.142;
  # SUCC: 260 (fallthru)

  # BLOCK 260
  # PRED: 249 (fallthru) 259 (fallthru)
  D.6321 = iftmp.141;
  cp = cp + D.6321;
  hc->contenttype = cp;
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 261
  # PRED: 247 (false)
  D.6617 = strncasecmp (buf, &"Content-Length:"[0], 15);
  if (D.6617 == 0)
    goto <bb 262>;
  else
    goto <bb 263>;
  # SUCC: 262 (true) 263 (false)

  # BLOCK 262
  # PRED: 261 (true)
  cp = buf + 15;
  D.6618 = atol (cp);
  D.6619 = (size_t) D.6618;
  hc->contentlength = D.6619;
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 263
  # PRED: 261 (false)
  D.6620 = strncasecmp (buf, &"Authorization:"[0], 14);
  if (D.6620 == 0)
    goto <bb 264>;
  else
    goto <bb 277>;
  # SUCC: 264 (true) 277 (false)

  # BLOCK 264
  # PRED: 263 (true)
  cp = buf + 14;
  D.6455 = &" \t"[0];
  __a0 = *D.6455;
  if (__a0 == 0)
    goto <bb 265>;
  else
    goto <bb 266>;
  # SUCC: 265 (true) 266 (false)

  # BLOCK 265
  # PRED: 264 (true)
  iftmp.145 = 0;
  goto <bb 276>;
  # SUCC: 276 (fallthru)

  # BLOCK 266
  # PRED: 264 (false)
  D.6457 = &" \t"[1];
  __a1 = *D.6457;
  if (__a1 == 0)
    goto <bb 267>;
  else
    goto <bb 268>;
  # SUCC: 267 (true) 268 (false)

  # BLOCK 267
  # PRED: 266 (true)
  D.6623 = (int) __a0;
  D.6624 = __strspn_c1 (cp, D.6623);
  iftmp.146 = D.6624;
  goto <bb 275>;
  # SUCC: 275 (fallthru)

  # BLOCK 268
  # PRED: 266 (false)
  D.6461 = &" \t"[2];
  __a2 = *D.6461;
  if (__a2 == 0)
    goto <bb 269>;
  else
    goto <bb 270>;
  # SUCC: 269 (true) 270 (false)

  # BLOCK 269
  # PRED: 268 (true)
  D.6626 = (int) __a1;
  D.6623 = (int) __a0;
  D.6627 = __strspn_c2 (cp, D.6623, D.6626);
  iftmp.147 = D.6627;
  goto <bb 274>;
  # SUCC: 274 (fallthru)

  # BLOCK 270
  # PRED: 268 (false)
  D.6465 = &" \t"[3];
  D.6466 = *D.6465;
  if (D.6466 == 0)
    goto <bb 271>;
  else
    goto <bb 272>;
  # SUCC: 271 (true) 272 (false)

  # BLOCK 271
  # PRED: 270 (true)
  D.6629 = (int) __a2;
  D.6626 = (int) __a1;
  D.6623 = (int) __a0;
  D.6630 = __strspn_c3 (cp, D.6623, D.6626, D.6629);
  iftmp.148 = D.6630;
  goto <bb 273>;
  # SUCC: 273 (fallthru)

  # BLOCK 272
  # PRED: 270 (false)
  iftmp.148 = __builtin_strspn (cp, &" \t"[0]);
  # SUCC: 273 (fallthru)

  # BLOCK 273
  # PRED: 271 (fallthru) 272 (fallthru)
  iftmp.147 = iftmp.148;
  # SUCC: 274 (fallthru)

  # BLOCK 274
  # PRED: 269 (fallthru) 273 (fallthru)
  iftmp.146 = iftmp.147;
  # SUCC: 275 (fallthru)

  # BLOCK 275
  # PRED: 267 (fallthru) 274 (fallthru)
  iftmp.145 = iftmp.146;
  # SUCC: 276 (fallthru)

  # BLOCK 276
  # PRED: 265 (fallthru) 275 (fallthru)
  D.6325 = iftmp.145;
  cp = cp + D.6325;
  hc->authorization = cp;
  goto <bb 292>;
  # SUCC: 292 (fallthru)

  # BLOCK 277
  # PRED: 263 (false)
  D.6631 = strncasecmp (buf, &"Connection:"[0], 11);
  if (D.6631 == 0)
    goto <bb 278>;
  else
    goto <bb 292>;
  # SUCC: 278 (true) 292 (false)

  # BLOCK 278
  # PRED: 277 (true)
  cp = buf + 11;
  D.6455 = &" \t"[0];
  __a0 = *D.6455;
  if (__a0 == 0)
    goto <bb 279>;
  else
    goto <bb 280>;
  # SUCC: 279 (true) 280 (false)

  # BLOCK 279
  # PRED: 278 (true)
  iftmp.149 = 0;
  goto <bb 290>;
  # SUCC: 290 (fallthru)

  # BLOCK 280
  # PRED: 278 (false)
  D.6457 = &" \t"[1];
  __a1 = *D.6457;
  if (__a1 == 0)
    goto <bb 281>;
  else
    goto <bb 282>;
  # SUCC: 281 (true) 282 (false)

  # BLOCK 281
  # PRED: 280 (true)
  D.6634 = (int) __a0;
  D.6635 = __strspn_c1 (cp, D.6634);
  iftmp.150 = D.6635;
  goto <bb 289>;
  # SUCC: 289 (fallthru)

  # BLOCK 282
  # PRED: 280 (false)
  D.6461 = &" \t"[2];
  __a2 = *D.6461;
  if (__a2 == 0)
    goto <bb 283>;
  else
    goto <bb 284>;
  # SUCC: 283 (true) 284 (false)

  # BLOCK 283
  # PRED: 282 (true)
  D.6637 = (int) __a1;
  D.6634 = (int) __a0;
  D.6638 = __strspn_c2 (cp, D.6634, D.6637);
  iftmp.151 = D.6638;
  goto <bb 288>;
  # SUCC: 288 (fallthru)

  # BLOCK 284
  # PRED: 282 (false)
  D.6465 = &" \t"[3];
  D.6466 = *D.6465;
  if (D.6466 == 0)
    goto <bb 285>;
  else
    goto <bb 286>;
  # SUCC: 285 (true) 286 (false)

  # BLOCK 285
  # PRED: 284 (true)
  D.6640 = (int) __a2;
  D.6637 = (int) __a1;
  D.6634 = (int) __a0;
  D.6641 = __strspn_c3 (cp, D.6634, D.6637, D.6640);
  iftmp.152 = D.6641;
  goto <bb 287>;
  # SUCC: 287 (fallthru)

  # BLOCK 286
  # PRED: 284 (false)
  iftmp.152 = __builtin_strspn (cp, &" \t"[0]);
  # SUCC: 287 (fallthru)

  # BLOCK 287
  # PRED: 285 (fallthru) 286 (fallthru)
  iftmp.151 = iftmp.152;
  # SUCC: 288 (fallthru)

  # BLOCK 288
  # PRED: 283 (fallthru) 287 (fallthru)
  iftmp.150 = iftmp.151;
  # SUCC: 289 (fallthru)

  # BLOCK 289
  # PRED: 281 (fallthru) 288 (fallthru)
  iftmp.149 = iftmp.150;
  # SUCC: 290 (fallthru)

  # BLOCK 290
  # PRED: 279 (fallthru) 289 (fallthru)
  D.6329 = iftmp.149;
  cp = cp + D.6329;
  D.6642 = strcasecmp (cp, &"keep-alive"[0]);
  if (D.6642 == 0)
    goto <bb 291>;
  else
    goto <bb 292>;
  # SUCC: 291 (true) 292 (false)

  # BLOCK 291
  # PRED: 290 (true)
  hc->keep_alive = 1;
  # SUCC: 292 (fallthru)

  # BLOCK 292
  # PRED: 100 (fallthru) 115 (fallthru) 129 (fallthru) 148 (fallthru) 164 (fallthru) 167 (fallthru) 183 (fallthru) 186 (fallthru) 200 (fallthru) 204 (fallthru) 218 (fallthru) 241 (fallthru) 246 (fallthru) 260 (fallthru) 262 (fallthru) 276 (fallthru) 277 (false) 290 (false) 291 (fallthru)
  buf.153 = bufgets (hc);
  buf = buf.153;
  if (buf != 0B)
    goto <bb 101>;
  else
    goto <bb 293>;
  # SUCC: 101 (true) 293 (false)

  # BLOCK 293
  # PRED: 99 (false) 101 (true) 292 (false)
  D.6409 = hc->one_one;
  if (D.6409 != 0)
    goto <bb 294>;
  else
    goto <bb 299>;
  # SUCC: 294 (true) 299 (false)

  # BLOCK 294
  # PRED: 293 (true)
  D.6417 = hc->reqhost;
  D.6644 = *D.6417;
  if (D.6644 == 0)
    goto <bb 295>;
  else
    goto <bb 297>;
  # SUCC: 295 (true) 297 (false)

  # BLOCK 295
  # PRED: 294 (true)
  D.6491 = hc->hdrhost;
  D.6495 = *D.6491;
  if (D.6495 == 0)
    goto <bb 296>;
  else
    goto <bb 297>;
  # SUCC: 296 (true) 297 (false)

  # BLOCK 296
  # PRED: 295 (true)
  httpd_err400form.86 = httpd_err400form;
  httpd_err400title.87 = httpd_err400title;
  httpd_send_err (hc, 400, httpd_err400title.87, &""[0], httpd_err400form.86, &""[0]);
  D.6367 = -1;
  goto <bb 313>;
  # SUCC: 313 (fallthru)

  # BLOCK 297
  # PRED: 294 (false) 295 (false)
  D.6645 = hc->keep_alive;
  if (D.6645 != 0)
    goto <bb 298>;
  else
    goto <bb 299>;
  # SUCC: 298 (true) 299 (false)

  # BLOCK 298
  # PRED: 297 (true)
  hc->should_linger = 1;
  # SUCC: 299 (fallthru)

  # BLOCK 299
  # PRED: 293 (false) 297 (false) 298 (fallthru)
  D.6436 = hc->origfilename;
  D.6646 = strlen (D.6436);
  D.6647 = &hc->maxexpnfilename;
  D.6648 = &hc->expnfilename;
  httpd_realloc_str (D.6648, D.6647, D.6646);
  D.6436 = hc->origfilename;
  D.6649 = hc->expnfilename;
  strcpy (D.6649, D.6436);
  D.6649 = hc->expnfilename;
  D.6650 = *D.6649;
  D.6651 = hc->hs;
  D.6652 = D.6651->vhost;
  if (D.6652 != 0)
    goto <bb 300>;
  else
    goto <bb 302>;
  # SUCC: 300 (true) 302 (false)

  # BLOCK 300
  # PRED: 299 (true)
  D.6653 = vhost_map (hc);
  if (D.6653 == 0)
    goto <bb 301>;
  else
    goto <bb 302>;
  # SUCC: 301 (true) 302 (false)

  # BLOCK 301
  # PRED: 300 (true)
  D.6427 = hc->encodedurl;
  err500form.154 = err500form;
  err500title.155 = err500title;
  httpd_send_err (hc, 500, err500title.155, &""[0], err500form.154, D.6427);
  D.6367 = -1;
  goto <bb 313>;
  # SUCC: 313 (fallthru)

  # BLOCK 302
  # PRED: 299 (false) 300 (false)
  D.6656 = hc->tildemapped;
  D.6651 = hc->hs;
  D.6657 = D.6651->no_symlink_check;
  D.6649 = hc->expnfilename;
  cp.156 = expand_symlinks (D.6649, &pi, D.6657, D.6656);
  cp = cp.156;
  if (cp == 0B)
    goto <bb 303>;
  else
    goto <bb 304>;
  # SUCC: 303 (true) 304 (false)

  # BLOCK 303
  # PRED: 302 (true)
  D.6427 = hc->encodedurl;
  err500form.154 = err500form;
  err500title.155 = err500title;
  httpd_send_err (hc, 500, err500title.155, &""[0], err500form.154, D.6427);
  D.6367 = -1;
  goto <bb 313>;
  # SUCC: 313 (fallthru)

  # BLOCK 304
  # PRED: 302 (false)
  D.6659 = strlen (cp);
  D.6647 = &hc->maxexpnfilename;
  D.6648 = &hc->expnfilename;
  httpd_realloc_str (D.6648, D.6647, D.6659);
  D.6649 = hc->expnfilename;
  strcpy (D.6649, cp);
  pi.157 = pi;
  D.6661 = strlen (pi.157);
  D.6662 = &hc->maxpathinfo;
  D.6663 = &hc->pathinfo;
  httpd_realloc_str (D.6663, D.6662, D.6661);
  pi.157 = pi;
  D.6664 = hc->pathinfo;
  strcpy (D.6664, pi.157);
  D.6664 = hc->pathinfo;
  D.6665 = *D.6664;
  if (D.6665 != 0)
    goto <bb 305>;
  else
    goto <bb 308>;
  # SUCC: 305 (true) 308 (false)

  # BLOCK 305
  # PRED: 304 (true)
  D.6436 = hc->origfilename;
  D.6666 = strlen (D.6436);
  D.6667 = (unsigned int) D.6666;
  D.6664 = hc->pathinfo;
  D.6668 = strlen (D.6664);
  D.6669 = (unsigned int) D.6668;
  D.6670 = D.6667 - D.6669;
  i = (int) D.6670;
  if (i > 0)
    goto <bb 306>;
  else
    goto <bb 308>;
  # SUCC: 306 (true) 308 (false)

  # BLOCK 306
  # PRED: 305 (true)
  D.6664 = hc->pathinfo;
  D.6436 = hc->origfilename;
  D.6671 = (long unsigned int) i;
  D.6672 = D.6436 + D.6671;
  D.6340 = __builtin_strcmp (D.6672, D.6664);
  if (D.6340 == 0)
    goto <bb 307>;
  else
    goto <bb 308>;
  # SUCC: 307 (true) 308 (false)

  # BLOCK 307
  # PRED: 306 (true)
  D.6436 = hc->origfilename;
  D.6671 = (long unsigned int) i;
  D.6673 = D.6671 + -1;
  D.6674 = D.6436 + D.6673;
  *D.6674 = 0;
  # SUCC: 308 (fallthru)

  # BLOCK 308
  # PRED: 304 (false) 305 (false) 306 (false) 307 (fallthru)
  D.6649 = hc->expnfilename;
  D.6650 = *D.6649;
  if (D.6650 == 47)
    goto <bb 309>;
  else
    goto <bb 312>;
  # SUCC: 309 (true) 312 (false)

  # BLOCK 309
  # PRED: 308 (true)
  D.6651 = hc->hs;
  D.6675 = D.6651->cwd;
  D.6676 = strlen (D.6675);
  D.6651 = hc->hs;
  D.6675 = D.6651->cwd;
  D.6649 = hc->expnfilename;
  D.6677 = strncmp (D.6649, D.6675, D.6676);
  if (D.6677 == 0)
    goto <bb 310>;
  else
    goto <bb 311>;
  # SUCC: 310 (true) 311 (false)

  # BLOCK 310
  # PRED: 309 (true)
  D.6649 = hc->expnfilename;
  D.6651 = hc->hs;
  D.6675 = D.6651->cwd;
  D.6678 = strlen (D.6675);
  D.6679 = D.6649 + D.6678;
  D.6649 = hc->expnfilename;
  strcpy (D.6649, D.6679);
  goto <bb 312>;
  # SUCC: 312 (fallthru)

  # BLOCK 311
  # PRED: 309 (false)
  D.6427 = hc->encodedurl;
  D.6510 = &hc->client_addr;
  D.6680 = httpd_ntoa (D.6510);
  syslog (5, &"%.80s URL \"%.80s\" goes outside the web tree"[0], D.6680, D.6427);
  D.6427 = hc->encodedurl;
  err403title.158 = err403title;
  httpd_send_err (hc, 403, err403title.158, &""[0], &"The requested URL \'%.80s\' resolves to a file outside the permitted web server directory tree.\n"[0], D.6427);
  D.6367 = -1;
  goto <bb 313>;
  # SUCC: 313 (fallthru)

  # BLOCK 312
  # PRED: 308 (false) 310 (fallthru)
  D.6367 = 0;
  # SUCC: 313 (fallthru)

  # BLOCK 313
  # PRED: 15 (fallthru) 73 (fallthru) 75 (fallthru) 78 (fallthru) 81 (fallthru) 88 (fallthru) 98 (fallthru) 147 (fallthru) 296 (fallthru) 301 (fallthru) 303 (fallthru) 311 (fallthru) 312 (fallthru)
  return D.6367;
  # SUCC: EXIT

}


Removing basic block 100
Removing basic block 148
Removing basic block 204
Removing basic block 241
Removing basic block 246

;; Function de_dotdot (de_dotdot)

de_dotdot (file)
{
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  size_t __s1_len;
  int l;
  char * cp2;
  char * cp;
  int D.6805;
  unsigned char D.6804;
  const unsigned char * D.6803;
  int D.6802;
  unsigned char D.6801;
  const unsigned char * D.6800;
  _Bool D.6799;
  _Bool D.6798;
  int D.6797;
  unsigned char D.6796;
  const unsigned char * D.6795;
  int D.6794;
  unsigned char D.6793;
  const unsigned char * D.6792;
  _Bool D.6791;
  _Bool D.6790;
  int D.6789;
  unsigned char D.6788;
  const unsigned char * D.6787;
  int D.6786;
  unsigned char D.6785;
  const unsigned char * D.6784;
  _Bool D.6783;
  _Bool D.6782;
  _Bool D.6781;
  int D.6780;
  unsigned char D.6779;
  const unsigned char * D.6778;
  int D.6777;
  unsigned char D.6776;
  long unsigned int D.6775;
  long unsigned int D.6774;
  int D.6754;
  int iftmp.159;
  int D.6755;
  long unsigned int D.6772;
  char * D.6771;
  const char * D.6770;
  int D.6769;
  const char * D.6768;
  const char * D.6767;
  int D.6766;
  const char * D.6765;
  char * D.6764;
  char D.6763;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 3
  # PRED: 7 (true)
  cp2 = cp + 2;
  goto <bb 5>;
  # SUCC: 5 (fallthru)

  # BLOCK 4
  # PRED: 5 (true)
  cp2 = cp2 + 1;
  # SUCC: 5 (fallthru)

  # BLOCK 5
  # PRED: 3 (fallthru) 4 (fallthru)
  D.6763 = *cp2;
  if (D.6763 == 47)
    goto <bb 4>;
  else
    goto <bb 6>;
  # SUCC: 4 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  D.6764 = cp + 1;
  strcpy (D.6764, cp2);
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 2 (fallthru) 6 (fallthru)
  cp = strstr (file, &"//"[0]);
  if (cp != 0B)
    goto <bb 3>;
  else
    goto <bb 8>;
  # SUCC: 3 (true) 8 (false)

  # BLOCK 8
  # PRED: 7 (false)
  goto <bb 10>;
  # SUCC: 10 (fallthru)

  # BLOCK 9
  # PRED: 10 (true)
  D.6765 = file + 2;
  strcpy (file, D.6765);
  # SUCC: 10 (fallthru)

  # BLOCK 10
  # PRED: 8 (fallthru) 9 (fallthru)
  D.6766 = strncmp (file, &"./"[0], 2);
  if (D.6766 == 0)
    goto <bb 9>;
  else
    goto <bb 11>;
  # SUCC: 9 (true) 11 (false)

  # BLOCK 11
  # PRED: 10 (false)
  goto <bb 13>;
  # SUCC: 13 (fallthru)

  # BLOCK 12
  # PRED: 13 (true)
  D.6767 = cp + 2;
  strcpy (cp, D.6767);
  # SUCC: 13 (fallthru)

  # BLOCK 13
  # PRED: 11 (fallthru) 12 (fallthru)
  cp = strstr (file, &"/./"[0]);
  if (cp != 0B)
    goto <bb 12>;
  else
    goto <bb 14>;
  # SUCC: 12 (true) 14 (false)

  # BLOCK 14
  # PRED: 13 (false) 22 (fallthru)
  goto <bb 16>;
  # SUCC: 16 (fallthru)

  # BLOCK 15
  # PRED: 16 (true)
  D.6768 = file + 3;
  strcpy (file, D.6768);
  # SUCC: 16 (fallthru)

  # BLOCK 16
  # PRED: 14 (fallthru) 15 (fallthru)
  D.6769 = strncmp (file, &"../"[0], 3);
  if (D.6769 == 0)
    goto <bb 15>;
  else
    goto <bb 17>;
  # SUCC: 15 (true) 17 (false)

  # BLOCK 17
  # PRED: 16 (false)
  cp = strstr (file, &"/../"[0]);
  if (cp == 0B)
    goto <bb 23>;
  else
    goto <bb 18>;
  # SUCC: 23 (true) 18 (false)

  # BLOCK 18
  # PRED: 17 (false)
  cp2 = cp + -1;
  goto <bb 20>;
  # SUCC: 20 (fallthru)

  # BLOCK 19
  # PRED: 21 (true)
  cp2 = cp2 + -1;
  # SUCC: 20 (fallthru)

  # BLOCK 20
  # PRED: 18 (fallthru) 19 (fallthru)
  if (cp2 < file)
    goto <bb 22>;
  else
    goto <bb 21>;
  # SUCC: 22 (true) 21 (false)

  # BLOCK 21
  # PRED: 20 (false)
  D.6763 = *cp2;
  if (D.6763 != 47)
    goto <bb 19>;
  else
    goto <bb 22>;
  # SUCC: 19 (true) 22 (false)

  # BLOCK 22
  # PRED: 20 (true) 21 (false)
  D.6770 = cp + 4;
  D.6771 = cp2 + 1;
  strcpy (D.6771, D.6770);
  goto <bb 14>;
  # SUCC: 14 (fallthru)

  # BLOCK 23
  # PRED: 17 (true)
  goto <bb 30>;
  # SUCC: 30 (fallthru)

  # BLOCK 24
  # PRED: 38 (true)
  cp2 = cp + -1;
  goto <bb 26>;
  # SUCC: 26 (fallthru)

  # BLOCK 25
  # PRED: 27 (true)
  cp2 = cp2 + -1;
  # SUCC: 26 (fallthru)

  # BLOCK 26
  # PRED: 24 (fallthru) 25 (fallthru)
  if (cp2 < file)
    goto <bb 28>;
  else
    goto <bb 27>;
  # SUCC: 28 (true) 27 (false)

  # BLOCK 27
  # PRED: 26 (false)
  D.6763 = *cp2;
  if (D.6763 != 47)
    goto <bb 25>;
  else
    goto <bb 28>;
  # SUCC: 25 (true) 28 (false)

  # BLOCK 28
  # PRED: 26 (true) 27 (false)
  if (cp2 < file)
    goto <bb 39>;
  else
    goto <bb 29>;
  # SUCC: 39 (true) 29 (false)

  # BLOCK 29
  # PRED: 28 (false)
  *cp2 = 0;
  # SUCC: 30 (fallthru)

  # BLOCK 30
  # PRED: 23 (fallthru) 29 (fallthru)
  D.6772 = strlen (file);
  l = (int) D.6772;
  if (l <= 3)
    goto <bb 39>;
  else
    goto <bb 31>;
  # SUCC: 39 (true) 31 (false)

  # BLOCK 31
  # PRED: 30 (false)
  __s2_len = 3;
  if (__s2_len <= 3)
    goto <bb 32>;
  else
    goto <bb 37>;
  # SUCC: 32 (true) 37 (false)

  # BLOCK 32
  # PRED: 31 (true)
  D.6774 = (long unsigned int) l;
  D.6775 = D.6774 + -3;
  cp = file + D.6775;
  __s1 = (const unsigned char *) cp;
  D.6776 = *__s1;
  D.6777 = (int) D.6776;
  D.6778 = (const unsigned char *) "/..";
  D.6779 = *D.6778;
  D.6780 = (int) D.6779;
  __result = D.6777 - D.6780;
  D.6781 = __s2_len != 0;
  D.6782 = __result == 0;
  D.6783 = D.6781 && D.6782;
  if (D.6783)
    goto <bb 33>;
  else
    goto <bb 36>;
  # SUCC: 33 (true) 36 (false)

  # BLOCK 33
  # PRED: 32 (true)
  D.6784 = __s1 + 1;
  D.6785 = *D.6784;
  D.6786 = (int) D.6785;
  D.6787 = (const unsigned char *) &"/.."[1];
  D.6788 = *D.6787;
  D.6789 = (int) D.6788;
  __result = D.6786 - D.6789;
  D.6790 = __s2_len > 1;
  D.6782 = __result == 0;
  D.6791 = D.6790 && D.6782;
  if (D.6791)
    goto <bb 34>;
  else
    goto <bb 36>;
  # SUCC: 34 (true) 36 (false)

  # BLOCK 34
  # PRED: 33 (true)
  D.6792 = __s1 + 2;
  D.6793 = *D.6792;
  D.6794 = (int) D.6793;
  D.6795 = (const unsigned char *) &"/.."[2];
  D.6796 = *D.6795;
  D.6797 = (int) D.6796;
  __result = D.6794 - D.6797;
  D.6798 = __s2_len > 2;
  D.6782 = __result == 0;
  D.6799 = D.6798 && D.6782;
  if (D.6799)
    goto <bb 35>;
  else
    goto <bb 36>;
  # SUCC: 35 (true) 36 (false)

  # BLOCK 35
  # PRED: 34 (true)
  D.6800 = __s1 + 3;
  D.6801 = *D.6800;
  D.6802 = (int) D.6801;
  D.6803 = (const unsigned char *) &"/.."[3];
  D.6804 = *D.6803;
  D.6805 = (int) D.6804;
  __result = D.6802 - D.6805;
  # SUCC: 36 (fallthru)

  # BLOCK 36
  # PRED: 32 (false) 33 (false) 34 (false) 35 (fallthru)
  D.6754 = __result;
  iftmp.159 = D.6754;
  goto <bb 38>;
  # SUCC: 38 (fallthru)

  # BLOCK 37
  # PRED: 31 (false)
  D.6774 = (long unsigned int) l;
  D.6775 = D.6774 + -3;
  cp = file + D.6775;
  iftmp.159 = __builtin_strcmp (cp, &"/.."[0]);
  # SUCC: 38 (fallthru)

  # BLOCK 38
  # PRED: 36 (fallthru) 37 (fallthru)
  D.6755 = iftmp.159;
  if (D.6755 == 0)
    goto <bb 24>;
  else
    goto <bb 39>;
  # SUCC: 24 (true) 39 (false)

  # BLOCK 39
  # PRED: 28 (true) 30 (true) 38 (false)
  return;
  # SUCC: EXIT

}


Removing basic block 8
Removing basic block 11
Removing basic block 14
Removing basic block 23

;; Function __strpbrk_c2 (__strpbrk_c2)

__strpbrk_c2 (__s, __accept1, __accept2)
{
  char * iftmp.4;
  char * D.2339;
  int D.2338;
  char D.2337;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  goto <bb 4>;
  # SUCC: 4 (fallthru)

  # BLOCK 3
  # PRED: 6 (true)
  __s = __s + 1;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (fallthru) 3 (fallthru)
  D.2337 = *__s;
  if (D.2337 == 0)
    goto <bb 7>;
  else
    goto <bb 5>;
  # SUCC: 7 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  D.2337 = *__s;
  D.2338 = (int) D.2337;
  if (D.2338 == __accept1)
    goto <bb 7>;
  else
    goto <bb 6>;
  # SUCC: 7 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  D.2337 = *__s;
  D.2338 = (int) D.2337;
  if (D.2338 != __accept2)
    goto <bb 3>;
  else
    goto <bb 7>;
  # SUCC: 3 (true) 7 (false)

  # BLOCK 7
  # PRED: 4 (true) 5 (true) 6 (false)
  D.2337 = *__s;
  if (D.2337 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;
  # SUCC: 8 (true) 9 (false)

  # BLOCK 8
  # PRED: 7 (true)
  iftmp.4 = (char *) __s;
  goto <bb 10>;
  # SUCC: 10 (fallthru)

  # BLOCK 9
  # PRED: 7 (false)
  iftmp.4 = 0B;
  # SUCC: 10 (fallthru)

  # BLOCK 10
  # PRED: 8 (fallthru) 9 (fallthru)
  D.2339 = iftmp.4;
  # SUCC: 11 (fallthru)

  # BLOCK 11
  # PRED: 10 (fallthru)
  return D.2339;
  # SUCC: EXIT

}


Merging blocks 10 and 11

;; Function __strpbrk_c3 (__strpbrk_c3)

__strpbrk_c3 (__s, __accept1, __accept2, __accept3)
{
  char * iftmp.5;
  char * D.2357;
  int D.2356;
  char D.2355;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  goto <bb 4>;
  # SUCC: 4 (fallthru)

  # BLOCK 3
  # PRED: 7 (true)
  __s = __s + 1;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (fallthru) 3 (fallthru)
  D.2355 = *__s;
  if (D.2355 == 0)
    goto <bb 8>;
  else
    goto <bb 5>;
  # SUCC: 8 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  D.2355 = *__s;
  D.2356 = (int) D.2355;
  if (D.2356 == __accept1)
    goto <bb 8>;
  else
    goto <bb 6>;
  # SUCC: 8 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  D.2355 = *__s;
  D.2356 = (int) D.2355;
  if (D.2356 == __accept2)
    goto <bb 8>;
  else
    goto <bb 7>;
  # SUCC: 8 (true) 7 (false)

  # BLOCK 7
  # PRED: 6 (false)
  D.2355 = *__s;
  D.2356 = (int) D.2355;
  if (D.2356 != __accept3)
    goto <bb 3>;
  else
    goto <bb 8>;
  # SUCC: 3 (true) 8 (false)

  # BLOCK 8
  # PRED: 4 (true) 5 (true) 6 (true) 7 (false)
  D.2355 = *__s;
  if (D.2355 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;
  # SUCC: 9 (true) 10 (false)

  # BLOCK 9
  # PRED: 8 (true)
  iftmp.5 = (char *) __s;
  goto <bb 11>;
  # SUCC: 11 (fallthru)

  # BLOCK 10
  # PRED: 8 (false)
  iftmp.5 = 0B;
  # SUCC: 11 (fallthru)

  # BLOCK 11
  # PRED: 9 (fallthru) 10 (fallthru)
  D.2357 = iftmp.5;
  # SUCC: 12 (fallthru)

  # BLOCK 12
  # PRED: 11 (fallthru)
  return D.2357;
  # SUCC: EXIT

}


Merging blocks 11 and 12

;; Function atoll (atoll)

atoll (__nptr)
{
  long long int D.3355;
  long long int D.3354;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.3355 = strtoll (__nptr, 0B, 10);
  D.3354 = D.3355;
  # SUCC: 3 (fallthru)

  # BLOCK 3
  # PRED: 2 (fallthru)
  return D.3354;
  # SUCC: EXIT

}


Merging blocks 2 and 3

;; Function atol (atol)

atol (__nptr)
{
  long int D.3350;
  long int D.3349;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.3350 = strtol (__nptr, 0B, 10);
  D.3349 = D.3350;
  # SUCC: 3 (fallthru)

  # BLOCK 3
  # PRED: 2 (fallthru)
  return D.3349;
  # SUCC: EXIT

}


Merging blocks 2 and 3

;; Function bufgets (bufgets)

bufgets (hc)
{
  char c;
  int i;
  long unsigned int D.6700;
  char * D.6699;
  char D.6698;
  long unsigned int D.6697;
  long unsigned int D.6696;
  _Bool D.6695;
  _Bool D.6694;
  _Bool D.6693;
  char * D.6692;
  char * D.6691;
  long unsigned int D.6690;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.6690 = hc->checked_idx;
  i = (int) D.6690;
  goto <bb 10>;
  # SUCC: 10 (fallthru)

  # BLOCK 3
  # PRED: 10 (true)
  D.6691 = hc->read_buf;
  D.6690 = hc->checked_idx;
  D.6692 = D.6691 + D.6690;
  c = *D.6692;
  D.6693 = c == 10;
  D.6694 = c == 13;
  D.6695 = D.6693 || D.6694;
  if (D.6695)
    goto <bb 4>;
  else
    goto <bb 9>;
  # SUCC: 4 (true) 9 (false)

  # BLOCK 4
  # PRED: 3 (true)
  D.6691 = hc->read_buf;
  D.6690 = hc->checked_idx;
  D.6692 = D.6691 + D.6690;
  *D.6692 = 0;
  D.6690 = hc->checked_idx;
  D.6696 = D.6690 + 1;
  hc->checked_idx = D.6696;
  if (c == 13)
    goto <bb 5>;
  else
    goto <bb 8>;
  # SUCC: 5 (true) 8 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.6690 = hc->checked_idx;
  D.6697 = hc->read_idx;
  if (D.6690 < D.6697)
    goto <bb 6>;
  else
    goto <bb 8>;
  # SUCC: 6 (true) 8 (false)

  # BLOCK 6
  # PRED: 5 (true)
  D.6691 = hc->read_buf;
  D.6690 = hc->checked_idx;
  D.6692 = D.6691 + D.6690;
  D.6698 = *D.6692;
  if (D.6698 == 10)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  D.6691 = hc->read_buf;
  D.6690 = hc->checked_idx;
  D.6692 = D.6691 + D.6690;
  *D.6692 = 0;
  D.6690 = hc->checked_idx;
  D.6696 = D.6690 + 1;
  hc->checked_idx = D.6696;
  # SUCC: 8 (fallthru)

  # BLOCK 8
  # PRED: 4 (false) 5 (false) 6 (false) 7 (fallthru)
  D.6691 = hc->read_buf;
  D.6700 = (long unsigned int) i;
  D.6699 = D.6691 + D.6700;
  goto <bb 12>;
  # SUCC: 12 (fallthru)

  # BLOCK 9
  # PRED: 3 (false)
  D.6690 = hc->checked_idx;
  D.6696 = D.6690 + 1;
  hc->checked_idx = D.6696;
  # SUCC: 10 (fallthru)

  # BLOCK 10
  # PRED: 2 (fallthru) 9 (fallthru)
  D.6690 = hc->checked_idx;
  D.6697 = hc->read_idx;
  if (D.6690 < D.6697)
    goto <bb 3>;
  else
    goto <bb 11>;
  # SUCC: 3 (true) 11 (false)

  # BLOCK 11
  # PRED: 10 (false)
  D.6699 = 0B;
  # SUCC: 12 (fallthru)

  # BLOCK 12
  # PRED: 8 (fallthru) 11 (fallthru)
  return D.6699;
  # SUCC: EXIT

}



;; Function vhost_map (vhost_map)

vhost_map (hc)
{
  int __res;
  int len;
  char * cp1;
  static size_t maxtempfilename = 0;
  static char * tempfilename;
  socklen_t sz;
  union httpd_sockaddr sa;
  char * * D.5935;
  size_t * D.5934;
  long unsigned int D.5933;
  long unsigned int D.5932;
  long unsigned int D.5931;
  char * tempfilename.69;
  long unsigned int D.5929;
  long unsigned int D.5928;
  char * D.5927;
  char * D.5926;
  char * * D.5925;
  size_t * D.5924;
  long unsigned int D.5923;
  char * D.5922;
  int D.5921;
  char D.5920;
  const __int32_t * D.5919;
  long unsigned int D.5918;
  const __int32_t * D.5917;
  long unsigned int D.5916;
  long unsigned int D.5915;
  const __int32_t * D.5914;
  const __int32_t * * D.5913;
  unsigned int D.5912;
  unsigned int __c.68;
  const int iftmp.67;
  int D.5909;
  int D.5908;
  int D.5887;
  int D.5907;
  int D.5906;
  short unsigned int D.5905;
  const short unsigned int * D.5904;
  long unsigned int D.5903;
  long unsigned int D.5902;
  char D.5901;
  const short unsigned int * D.5900;
  const short unsigned int * * D.5899;
  char * D.5898;
  int D.5897;
  int D.5896;
  int D.5895;
  char D.5894;
  char * D.5893;
  char D.5892;
  char * D.5891;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.5891 = hc->reqhost;
  D.5892 = *D.5891;
  if (D.5892 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5891 = hc->reqhost;
  hc->hostname = D.5891;
  goto <bb 9>;
  # SUCC: 9 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  D.5893 = hc->hdrhost;
  D.5894 = *D.5893;
  if (D.5894 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.5893 = hc->hdrhost;
  hc->hostname = D.5893;
  goto <bb 9>;
  # SUCC: 9 (fallthru)

  # BLOCK 6
  # PRED: 4 (false)
  sz = 128;
  D.5895 = hc->conn_fd;
  D.5896 = getsockname (D.5895, &sa.sa, &sz);
  if (D.5896 < 0)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  syslog (3, &"getsockname - %m"[0]);
  D.5897 = 0;
  goto <bb 17>;
  # SUCC: 17 (fallthru)

  # BLOCK 8
  # PRED: 6 (false)
  D.5898 = httpd_ntoa (&sa);
  hc->hostname = D.5898;
  # SUCC: 9 (fallthru)

  # BLOCK 9
  # PRED: 3 (fallthru) 5 (fallthru) 8 (fallthru)
  cp1 = hc->hostname;
  goto <bb 13>;
  # SUCC: 13 (fallthru)

  # BLOCK 10
  # PRED: 13 (true)
  D.5899 = __ctype_b_loc ();
  D.5900 = *D.5899;
  D.5901 = *cp1;
  D.5902 = (long unsigned int) D.5901;
  D.5903 = D.5902 * 2;
  D.5904 = D.5900 + D.5903;
  D.5905 = *D.5904;
  D.5906 = (int) D.5905;
  D.5907 = D.5906 & 256;
  if (D.5907 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;
  # SUCC: 11 (true) 12 (false)

  # BLOCK 11
  # PRED: 10 (true)
  D.5913 = __ctype_tolower_loc ();
  D.5914 = *D.5913;
  D.5901 = *cp1;
  D.5902 = (long unsigned int) D.5901;
  D.5918 = D.5902 * 4;
  D.5919 = D.5914 + D.5918;
  __res = *D.5919;
  D.5887 = __res;
  D.5920 = (char) D.5887;
  *cp1 = D.5920;
  # SUCC: 12 (fallthru)

  # BLOCK 12
  # PRED: 10 (false) 11 (fallthru)
  cp1 = cp1 + 1;
  # SUCC: 13 (fallthru)

  # BLOCK 13
  # PRED: 9 (fallthru) 12 (fallthru)
  D.5901 = *cp1;
  if (D.5901 != 0)
    goto <bb 10>;
  else
    goto <bb 14>;
  # SUCC: 10 (true) 14 (false)

  # BLOCK 14
  # PRED: 13 (false)
  D.5921 = hc->tildemapped;
  if (D.5921 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;
  # SUCC: 15 (true) 16 (false)

  # BLOCK 15
  # PRED: 14 (true)
  D.5897 = 1;
  goto <bb 17>;
  # SUCC: 17 (fallthru)

  # BLOCK 16
  # PRED: 14 (false)
  D.5922 = hc->hostname;
  D.5923 = strlen (D.5922);
  D.5924 = &hc->maxhostdir;
  D.5925 = &hc->hostdir;
  httpd_realloc_str (D.5925, D.5924, D.5923);
  D.5922 = hc->hostname;
  D.5926 = hc->hostdir;
  strcpy (D.5926, D.5922);
  D.5927 = hc->expnfilename;
  D.5928 = strlen (D.5927);
  len = (int) D.5928;
  D.5929 = (size_t) len;
  httpd_realloc_str (&tempfilename, &maxtempfilename, D.5929);
  D.5927 = hc->expnfilename;
  tempfilename.69 = tempfilename;
  strcpy (tempfilename.69, D.5927);
  D.5926 = hc->hostdir;
  D.5931 = strlen (D.5926);
  D.5929 = (size_t) len;
  D.5932 = D.5931 + D.5929;
  D.5933 = D.5932 + 1;
  D.5934 = &hc->maxexpnfilename;
  D.5935 = &hc->expnfilename;
  httpd_realloc_str (D.5935, D.5934, D.5933);
  D.5926 = hc->hostdir;
  D.5927 = hc->expnfilename;
  strcpy (D.5927, D.5926);
  D.5927 = hc->expnfilename;
  strcat (D.5927, &"/"[0]);
  tempfilename.69 = tempfilename;
  D.5927 = hc->expnfilename;
  strcat (D.5927, tempfilename.69);
  D.5897 = 1;
  # SUCC: 17 (fallthru)

  # BLOCK 17
  # PRED: 7 (fallthru) 15 (fallthru) 16 (fallthru)
  return D.5897;
  # SUCC: EXIT

}



;; Function httpd_got_request (httpd_got_request)

httpd_got_request (hc)
{
  char c;
  long unsigned int D.6251;
  long unsigned int D.6250;
  int D.6244;
  int D.6243;
  int D.6242;
  char * D.6241;
  long unsigned int D.6240;
  char * D.6239;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  goto <bb 58>;
  # SUCC: 58 (fallthru)

  # BLOCK 3
  # PRED: 58 (true)
  D.6239 = hc->read_buf;
  D.6240 = hc->checked_idx;
  D.6241 = D.6239 + D.6240;
  c = *D.6241;
  D.6242 = hc->checked_state;
  switch (D.6242)
    {
      case 0: goto <L1>;
      case 1: goto <L8>;
      case 2: goto <L15>;
      case 3: goto <L22>;
      case 4: goto <L29>;
      case 5: goto <L36>;
      case 6: goto <L43>;
      case 7: goto <L48>;
      case 8: goto <L53>;
      case 9: goto <L58>;
      case 10: goto <L63>;
      case 11: goto <L68>;
      default : goto <L69>;
    }
  # SUCC: 4 8 13 17 22 27 33 37 42 47 52 56 57

  # BLOCK 4
  # PRED: 3
<L1>:;
  D.6243 = (int) c;
  switch (D.6243)
    {
      case 9: goto <L2>;
      case 10: goto <L4>;
      case 13: goto <L4>;
      case 32: goto <L2>;
      default : goto <L6>;
    }
  # SUCC: 5 6 7

  # BLOCK 5
  # PRED: 4
<L2>:;
  hc->checked_state = 1;
  goto <bb 7> (<L6>);
  # SUCC: 7 (fallthru)

  # BLOCK 6
  # PRED: 4
<L4>:;
  hc->checked_state = 11;
  D.6244 = 2;
  goto <bb 60>;
  # SUCC: 60 (fallthru)

  # BLOCK 7
  # PRED: 4 5 (fallthru)
<L6>:;
  goto <bb 57> (<L69>);
  # SUCC: 57 (fallthru)

  # BLOCK 8
  # PRED: 3
<L8>:;
  D.6243 = (int) c;
  switch (D.6243)
    {
      case 9: goto <L9>;
      case 10: goto <L11>;
      case 13: goto <L11>;
      case 32: goto <L9>;
      default : goto <L13>;
    }
  # SUCC: 9 10 11

  # BLOCK 9
  # PRED: 8
<L9>:;
  goto <bb 12>;
  # SUCC: 12 (fallthru)

  # BLOCK 10
  # PRED: 8
<L11>:;
  hc->checked_state = 11;
  D.6244 = 2;
  goto <bb 60>;
  # SUCC: 60 (fallthru)

  # BLOCK 11
  # PRED: 8
<L13>:;
  hc->checked_state = 2;
  # SUCC: 12 (fallthru)

  # BLOCK 12
  # PRED: 9 (fallthru) 11 (fallthru)
  goto <bb 57> (<L69>);
  # SUCC: 57 (fallthru)

  # BLOCK 13
  # PRED: 3
<L15>:;
  D.6243 = (int) c;
  switch (D.6243)
    {
      case 9: goto <L16>;
      case 10: goto <L18>;
      case 13: goto <L18>;
      case 32: goto <L16>;
      default : goto <L20>;
    }
  # SUCC: 14 15 16

  # BLOCK 14
  # PRED: 13
<L16>:;
  hc->checked_state = 3;
  goto <bb 16> (<L20>);
  # SUCC: 16 (fallthru)

  # BLOCK 15
  # PRED: 13
<L18>:;
  D.6244 = 1;
  goto <bb 60>;
  # SUCC: 60 (fallthru)

  # BLOCK 16
  # PRED: 13 14 (fallthru)
<L20>:;
  goto <bb 57> (<L69>);
  # SUCC: 57 (fallthru)

  # BLOCK 17
  # PRED: 3
<L22>:;
  D.6243 = (int) c;
  switch (D.6243)
    {
      case 9: goto <L23>;
      case 10: goto <L25>;
      case 13: goto <L25>;
      case 32: goto <L23>;
      default : goto <L27>;
    }
  # SUCC: 18 19 20

  # BLOCK 18
  # PRED: 17
<L23>:;
  goto <bb 21>;
  # SUCC: 21 (fallthru)

  # BLOCK 19
  # PRED: 17
<L25>:;
  hc->checked_state = 11;
  D.6244 = 2;
  goto <bb 60>;
  # SUCC: 60 (fallthru)

  # BLOCK 20
  # PRED: 17
<L27>:;
  hc->checked_state = 4;
  # SUCC: 21 (fallthru)

  # BLOCK 21
  # PRED: 18 (fallthru) 20 (fallthru)
  goto <bb 57> (<L69>);
  # SUCC: 57 (fallthru)

  # BLOCK 22
  # PRED: 3
<L29>:;
  D.6243 = (int) c;
  switch (D.6243)
    {
      case 9: goto <L30>;
      case 10: goto <L32>;
      case 13: goto <L33>;
      case 32: goto <L30>;
      default : goto <L34>;
    }
  # SUCC: 23 24 25 26

  # BLOCK 23
  # PRED: 22
<L30>:;
  hc->checked_state = 5;
  goto <bb 26> (<L34>);
  # SUCC: 26 (fallthru)

  # BLOCK 24
  # PRED: 22
<L32>:;
  hc->checked_state = 7;
  goto <bb 26> (<L34>);
  # SUCC: 26 (fallthru)

  # BLOCK 25
  # PRED: 22
<L33>:;
  hc->checked_state = 8;
  # SUCC: 26 (fallthru)

  # BLOCK 26
  # PRED: 22 23 (fallthru) 24 (fallthru) 25 (fallthru)
<L34>:;
  goto <bb 57> (<L69>);
  # SUCC: 57 (fallthru)

  # BLOCK 27
  # PRED: 3
<L36>:;
  D.6243 = (int) c;
  switch (D.6243)
    {
      case 9: goto <L37>;
      case 10: goto <L39>;
      case 13: goto <L40>;
      case 32: goto <L37>;
      default : goto <L41>;
    }
  # SUCC: 28 29 30 31

  # BLOCK 28
  # PRED: 27
<L37>:;
  goto <bb 32>;
  # SUCC: 32 (fallthru)

  # BLOCK 29
  # PRED: 27
<L39>:;
  hc->checked_state = 7;
  goto <bb 32>;
  # SUCC: 32 (fallthru)

  # BLOCK 30
  # PRED: 27
<L40>:;
  hc->checked_state = 8;
  goto <bb 32>;
  # SUCC: 32 (fallthru)

  # BLOCK 31
  # PRED: 27
<L41>:;
  hc->checked_state = 11;
  D.6244 = 2;
  goto <bb 60>;
  # SUCC: 60 (fallthru)

  # BLOCK 32
  # PRED: 28 (fallthru) 29 (fallthru) 30 (fallthru)
  goto <bb 57> (<L69>);
  # SUCC: 57 (fallthru)

  # BLOCK 33
  # PRED: 3
<L43>:;
  D.6243 = (int) c;
  switch (D.6243)
    {
      case 10: goto <L44>;
      case 13: goto <L45>;
      default : goto <L46>;
    }
  # SUCC: 34 35 36

  # BLOCK 34
  # PRED: 33
<L44>:;
  hc->checked_state = 7;
  goto <bb 36> (<L46>);
  # SUCC: 36 (fallthru)

  # BLOCK 35
  # PRED: 33
<L45>:;
  hc->checked_state = 8;
  # SUCC: 36 (fallthru)

  # BLOCK 36
  # PRED: 33 34 (fallthru) 35 (fallthru)
<L46>:;
  goto <bb 57> (<L69>);
  # SUCC: 57 (fallthru)

  # BLOCK 37
  # PRED: 3
<L48>:;
  D.6243 = (int) c;
  switch (D.6243)
    {
      case 10: goto <L49>;
      case 13: goto <L50>;
      default : goto <L51>;
    }
  # SUCC: 38 39 40

  # BLOCK 38
  # PRED: 37
<L49>:;
  D.6244 = 1;
  goto <bb 60>;
  # SUCC: 60 (fallthru)

  # BLOCK 39
  # PRED: 37
<L50>:;
  hc->checked_state = 8;
  goto <bb 41>;
  # SUCC: 41 (fallthru)

  # BLOCK 40
  # PRED: 37
<L51>:;
  hc->checked_state = 6;
  # SUCC: 41 (fallthru)

  # BLOCK 41
  # PRED: 39 (fallthru) 40 (fallthru)
  goto <bb 57> (<L69>);
  # SUCC: 57 (fallthru)

  # BLOCK 42
  # PRED: 3
<L53>:;
  D.6243 = (int) c;
  switch (D.6243)
    {
      case 10: goto <L54>;
      case 13: goto <L55>;
      default : goto <L56>;
    }
  # SUCC: 43 44 45

  # BLOCK 43
  # PRED: 42
<L54>:;
  hc->checked_state = 9;
  goto <bb 46>;
  # SUCC: 46 (fallthru)

  # BLOCK 44
  # PRED: 42
<L55>:;
  D.6244 = 1;
  goto <bb 60>;
  # SUCC: 60 (fallthru)

  # BLOCK 45
  # PRED: 42
<L56>:;
  hc->checked_state = 6;
  # SUCC: 46 (fallthru)

  # BLOCK 46
  # PRED: 43 (fallthru) 45 (fallthru)
  goto <bb 57> (<L69>);
  # SUCC: 57 (fallthru)

  # BLOCK 47
  # PRED: 3
<L58>:;
  D.6243 = (int) c;
  switch (D.6243)
    {
      case 10: goto <L59>;
      case 13: goto <L60>;
      default : goto <L61>;
    }
  # SUCC: 48 49 50

  # BLOCK 48
  # PRED: 47
<L59>:;
  D.6244 = 1;
  goto <bb 60>;
  # SUCC: 60 (fallthru)

  # BLOCK 49
  # PRED: 47
<L60>:;
  hc->checked_state = 10;
  goto <bb 51>;
  # SUCC: 51 (fallthru)

  # BLOCK 50
  # PRED: 47
<L61>:;
  hc->checked_state = 6;
  # SUCC: 51 (fallthru)

  # BLOCK 51
  # PRED: 49 (fallthru) 50 (fallthru)
  goto <bb 57> (<L69>);
  # SUCC: 57 (fallthru)

  # BLOCK 52
  # PRED: 3
<L63>:;
  D.6243 = (int) c;
  switch (D.6243)
    {
      case 10: goto <L64>;
      case 13: goto <L64>;
      default : goto <L66>;
    }
  # SUCC: 53 54

  # BLOCK 53
  # PRED: 52
<L64>:;
  D.6244 = 1;
  goto <bb 60>;
  # SUCC: 60 (fallthru)

  # BLOCK 54
  # PRED: 52
<L66>:;
  hc->checked_state = 6;
  # SUCC: 55 (fallthru)

  # BLOCK 55
  # PRED: 54 (fallthru)
  goto <bb 57> (<L69>);
  # SUCC: 57 (fallthru)

  # BLOCK 56
  # PRED: 3
<L68>:;
  D.6244 = 2;
  goto <bb 60>;
  # SUCC: 60 (fallthru)

  # BLOCK 57
  # PRED: 3 7 (fallthru) 12 (fallthru) 16 (fallthru) 21 (fallthru) 26 (fallthru) 32 (fallthru) 36 (fallthru) 41 (fallthru) 46 (fallthru) 51 (fallthru) 55 (fallthru)
<L69>:;
  D.6240 = hc->checked_idx;
  D.6250 = D.6240 + 1;
  hc->checked_idx = D.6250;
  # SUCC: 58 (fallthru)

  # BLOCK 58
  # PRED: 2 (fallthru) 57 (fallthru)
  D.6240 = hc->checked_idx;
  D.6251 = hc->read_idx;
  if (D.6240 < D.6251)
    goto <bb 3>;
  else
    goto <bb 59>;
  # SUCC: 3 (true) 59 (false)

  # BLOCK 59
  # PRED: 58 (false)
  D.6244 = 0;
  # SUCC: 60 (fallthru)

  # BLOCK 60
  # PRED: 6 (fallthru) 10 (fallthru) 15 (fallthru) 19 (fallthru) 31 (fallthru) 38 (fallthru) 44 (fallthru) 48 (fallthru) 53 (fallthru) 56 (fallthru) 59 (fallthru)
  return D.6244;
  # SUCC: EXIT

}


Removing basic block 7
Removing basic block 9
Removing basic block 12
Removing basic block 16
Removing basic block 18
Removing basic block 21
Removing basic block 26
Removing basic block 28
Removing basic block 32
Removing basic block 36
Removing basic block 41
Removing basic block 46
Removing basic block 51
Merging blocks 54 and 55

;; Function httpd_get_conn (httpd_get_conn)

httpd_get_conn (hs, listen_fd, hc)
{
  socklen_t sz;
  union httpd_sockaddr sa;
  char * D.6166;
  char * D.6165;
  char * D.6164;
  char * D.6163;
  char * D.6162;
  char * D.6161;
  char * D.6160;
  char * D.6159;
  char * D.6158;
  char * D.6157;
  char * D.6156;
  char * D.6155;
  long unsigned int D.6154;
  union httpd_sockaddr * D.6153;
  int D.6152;
  int D.6151;
  int D.6150;
  int * D.6149;
  int D.6148;
  int D.6147;
  char * * D.6146;
  size_t * D.6145;
  char * * D.6144;
  size_t * D.6143;
  char * * D.6142;
  size_t * D.6141;
  char * * D.6140;
  size_t * D.6139;
  char * * D.6138;
  size_t * D.6137;
  char * * D.6136;
  size_t * D.6135;
  char * * D.6134;
  size_t * D.6133;
  char * * D.6132;
  size_t * D.6131;
  char * * D.6130;
  size_t * D.6129;
  char * * D.6128;
  size_t * D.6127;
  char * * D.6126;
  size_t * D.6125;
  char * * D.6124;
  size_t * D.6123;
  long unsigned int D.6122;
  long unsigned int D.6121;
  long unsigned int D.6120;
  long unsigned int D.6119;
  long unsigned int D.6118;
  long unsigned int D.6117;
  long unsigned int D.6116;
  long unsigned int D.6115;
  long unsigned int D.6114;
  long unsigned int D.6113;
  long unsigned int D.6112;
  char * * D.6111;
  size_t * D.6110;
  int D.6109;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.6109 = hc->initialized;
  if (D.6109 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  hc->read_size = 0;
  D.6110 = &hc->read_size;
  D.6111 = &hc->read_buf;
  httpd_realloc_str (D.6111, D.6110, 500);
  hc->maxresponse = 0;
  D.6112 = hc->maxresponse;
  hc->maxremoteuser = D.6112;
  D.6113 = hc->maxremoteuser;
  hc->maxhostdir = D.6113;
  D.6114 = hc->maxhostdir;
  hc->maxreqhost = D.6114;
  D.6115 = hc->maxreqhost;
  hc->maxaccepte = D.6115;
  D.6116 = hc->maxaccepte;
  hc->maxaccept = D.6116;
  D.6117 = hc->maxaccept;
  hc->maxquery = D.6117;
  D.6118 = hc->maxquery;
  hc->maxpathinfo = D.6118;
  D.6119 = hc->maxpathinfo;
  hc->maxencodings = D.6119;
  D.6120 = hc->maxencodings;
  hc->maxexpnfilename = D.6120;
  D.6121 = hc->maxexpnfilename;
  hc->maxorigfilename = D.6121;
  D.6122 = hc->maxorigfilename;
  hc->maxdecodedurl = D.6122;
  D.6123 = &hc->maxdecodedurl;
  D.6124 = &hc->decodedurl;
  httpd_realloc_str (D.6124, D.6123, 1);
  D.6125 = &hc->maxorigfilename;
  D.6126 = &hc->origfilename;
  httpd_realloc_str (D.6126, D.6125, 1);
  D.6127 = &hc->maxexpnfilename;
  D.6128 = &hc->expnfilename;
  httpd_realloc_str (D.6128, D.6127, 0);
  D.6129 = &hc->maxencodings;
  D.6130 = &hc->encodings;
  httpd_realloc_str (D.6130, D.6129, 0);
  D.6131 = &hc->maxpathinfo;
  D.6132 = &hc->pathinfo;
  httpd_realloc_str (D.6132, D.6131, 0);
  D.6133 = &hc->maxquery;
  D.6134 = &hc->query;
  httpd_realloc_str (D.6134, D.6133, 0);
  D.6135 = &hc->maxaccept;
  D.6136 = &hc->accept;
  httpd_realloc_str (D.6136, D.6135, 0);
  D.6137 = &hc->maxaccepte;
  D.6138 = &hc->accepte;
  httpd_realloc_str (D.6138, D.6137, 0);
  D.6139 = &hc->maxreqhost;
  D.6140 = &hc->reqhost;
  httpd_realloc_str (D.6140, D.6139, 0);
  D.6141 = &hc->maxhostdir;
  D.6142 = &hc->hostdir;
  httpd_realloc_str (D.6142, D.6141, 0);
  D.6143 = &hc->maxremoteuser;
  D.6144 = &hc->remoteuser;
  httpd_realloc_str (D.6144, D.6143, 0);
  D.6145 = &hc->maxresponse;
  D.6146 = &hc->response;
  httpd_realloc_str (D.6146, D.6145, 0);
  hc->initialized = 1;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (false) 3 (fallthru)
  sz = 128;
  D.6147 = accept (listen_fd, &sa.sa, &sz);
  hc->conn_fd = D.6147;
  D.6148 = hc->conn_fd;
  if (D.6148 < 0)
    goto <bb 5>;
  else
    goto <bb 8>;
  # SUCC: 5 (true) 8 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.6149 = __errno_location ();
  D.6150 = *D.6149;
  if (D.6150 == 11)
    goto <bb 6>;
  else
    goto <bb 7>;
  # SUCC: 6 (true) 7 (false)

  # BLOCK 6
  # PRED: 5 (true)
  D.6151 = 2;
  goto <bb 11>;
  # SUCC: 11 (fallthru)

  # BLOCK 7
  # PRED: 5 (false)
  syslog (3, &"accept - %m"[0]);
  D.6151 = 0;
  goto <bb 11>;
  # SUCC: 11 (fallthru)

  # BLOCK 8
  # PRED: 4 (false)
  D.6152 = sockaddr_check (&sa);
  if (D.6152 == 0)
    goto <bb 9>;
  else
    goto <bb 10>;
  # SUCC: 9 (true) 10 (false)

  # BLOCK 9
  # PRED: 8 (true)
  syslog (3, &"unknown sockaddr family"[0]);
  D.6148 = hc->conn_fd;
  close (D.6148);
  hc->conn_fd = -1;
  D.6151 = 0;
  goto <bb 11>;
  # SUCC: 11 (fallthru)

  # BLOCK 10
  # PRED: 8 (false)
  D.6148 = hc->conn_fd;
  fcntl (D.6148, 2, 1);
  hc->hs = hs;
  D.6153 = &hc->client_addr;
  memset (D.6153, 0, 128);
  D.6154 = sockaddr_len (&sa);
  D.6153 = &hc->client_addr;
  memmove (D.6153, &sa, D.6154);
  hc->read_idx = 0;
  hc->checked_idx = 0;
  hc->checked_state = 0;
  hc->method = 0;
  hc->status = 0;
  hc->bytes_to_send = 0;
  hc->bytes_sent = 0;
  hc->encodedurl = &""[0];
  D.6155 = hc->decodedurl;
  *D.6155 = 0;
  hc->protocol = &"UNKNOWN"[0];
  D.6156 = hc->origfilename;
  *D.6156 = 0;
  D.6157 = hc->expnfilename;
  *D.6157 = 0;
  D.6158 = hc->encodings;
  *D.6158 = 0;
  D.6159 = hc->pathinfo;
  *D.6159 = 0;
  D.6160 = hc->query;
  *D.6160 = 0;
  hc->referer = &""[0];
  hc->useragent = &""[0];
  D.6161 = hc->accept;
  *D.6161 = 0;
  D.6162 = hc->accepte;
  *D.6162 = 0;
  hc->acceptl = &""[0];
  hc->cookie = &""[0];
  hc->contenttype = &""[0];
  D.6163 = hc->reqhost;
  *D.6163 = 0;
  hc->hdrhost = &""[0];
  D.6164 = hc->hostdir;
  *D.6164 = 0;
  hc->authorization = &""[0];
  D.6165 = hc->remoteuser;
  *D.6165 = 0;
  D.6166 = hc->response;
  *D.6166 = 0;
  hc->responselen = 0;
  hc->if_modified_since = -1;
  hc->range_if = -1;
  hc->contentlength = 0x0ffffffffffffffff;
  hc->type = &""[0];
  hc->hostname = 0B;
  hc->mime_flag = 1;
  hc->one_one = 0;
  hc->got_range = 0;
  hc->tildemapped = 0;
  hc->first_byte_index = 0;
  hc->last_byte_index = -1;
  hc->keep_alive = 0;
  hc->should_linger = 0;
  hc->file_address = 0B;
  D.6151 = 1;
  # SUCC: 11 (fallthru)

  # BLOCK 11
  # PRED: 6 (fallthru) 7 (fallthru) 9 (fallthru) 10 (fallthru)
  return D.6151;
  # SUCC: EXIT

}



;; Function sockaddr_check (sockaddr_check)

sockaddr_check (saP)
{
  int D.8090;
  int D.8089;
  short unsigned int D.8088;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.8088 = saP->sa.sa_family;
  D.8089 = (int) D.8088;
  switch (D.8089)
    {
      case 2: goto <L0>;
      case 10: goto <L1>;
      default : goto <L2>;
    }
  # SUCC: 3 4 5

  # BLOCK 3
  # PRED: 2
<L0>:;
  D.8090 = 1;
  goto <bb 6>;
  # SUCC: 6 (fallthru)

  # BLOCK 4
  # PRED: 2
<L1>:;
  D.8090 = 1;
  goto <bb 6>;
  # SUCC: 6 (fallthru)

  # BLOCK 5
  # PRED: 2
<L2>:;
  D.8090 = 0;
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 3 (fallthru) 4 (fallthru) 5 (fallthru)
  return D.8090;
  # SUCC: EXIT

}



;; Function httpd_method_str (httpd_method_str)

httpd_method_str (method)
{
  char * D.5804;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  switch (method)
    {
      case 1: goto <L0>;
      case 2: goto <L1>;
      case 3: goto <L2>;
      default : goto <L3>;
    }
  # SUCC: 3 4 5 6

  # BLOCK 3
  # PRED: 2
<L0>:;
  D.5804 = &"GET"[0];
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 4
  # PRED: 2
<L1>:;
  D.5804 = &"HEAD"[0];
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 5
  # PRED: 2
<L2>:;
  D.5804 = &"POST"[0];
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 6
  # PRED: 2
<L3>:;
  D.5804 = &"UNKNOWN"[0];
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 3 (fallthru) 4 (fallthru) 5 (fallthru) 6 (fallthru)
  return D.5804;
  # SUCC: EXIT

}



;; Function httpd_send_err (httpd_send_err)

httpd_send_err (hc, status, title, extraheads, form, arg)
{
  char filename[1000];
  int D.5561;
  int D.5560;
  char D.5559;
  char * D.5558;
  int D.5557;
  struct httpd_server * D.5556;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.5556 = hc->hs;
  D.5557 = D.5556->vhost;
  if (D.5557 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;
  # SUCC: 3 (true) 5 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5558 = hc->hostdir;
  D.5559 = *D.5558;
  if (D.5559 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;
  # SUCC: 4 (true) 5 (false)

  # BLOCK 4
  # PRED: 3 (true)
  D.5558 = hc->hostdir;
  my_snprintf (&filename, 1000, &"%s/%s/err%d.html"[0], D.5558, &"errors"[0], status);
  D.5560 = send_err_file (hc, status, title, extraheads, &filename);
  if (D.5560 != 0)
    goto <bb 7>;
  else
    goto <bb 5>;
  # SUCC: 7 (true) 5 (false)

  # BLOCK 5
  # PRED: 2 (false) 3 (false) 4 (false)
  my_snprintf (&filename, 1000, &"%s/err%d.html"[0], &"errors"[0], status);
  D.5561 = send_err_file (hc, status, title, extraheads, &filename);
  if (D.5561 != 0)
    goto <bb 7>;
  else
    goto <bb 6>;
  # SUCC: 7 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  send_response (hc, status, title, extraheads, form, arg);
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 4 (true) 5 (true) 6 (fallthru)
  return;
  # SUCC: EXIT

}



;; Function send_err_file (send_err_file)

send_err_file (hc, status, title, extraheads, filename)
{
  size_t r;
  char buf[1000];
  struct FILE * fp;
  long unsigned int r.42;
  long unsigned int r.41;
  int D.5575;
  struct FILE * fp.40;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  fp.40 = fopen (filename, &"r"[0]);
  fp = fp.40;
  if (fp == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5575 = 0;
  goto <bb 8>;
  # SUCC: 8 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  send_mime (hc, status, title, &""[0], extraheads, &"text/html; charset=%s"[0], -1, 0);
  # SUCC: 5 (fallthru)

  # BLOCK 5
  # PRED: 4 (fallthru) 6 (fallthru)
  r.41 = fread (&buf, 1, 999, fp);
  r = r.41;
  if (r == 0)
    goto <bb 7>;
  else
    goto <bb 6>;
  # SUCC: 7 (true) 6 (false)

  # BLOCK 6
  # PRED: 5 (false)
  r.42 = r;
  buf[r.42] = 0;
  add_response (hc, &buf);
  goto <bb 5>;
  # SUCC: 5 (fallthru)

  # BLOCK 7
  # PRED: 5 (true)
  fclose (fp);
  send_response_tail (hc);
  D.5575 = 1;
  # SUCC: 8 (fallthru)

  # BLOCK 8
  # PRED: 3 (fallthru) 7 (fallthru)
  return D.5575;
  # SUCC: EXIT

}



;; Function httpd_realloc_str (httpd_realloc_str)

httpd_realloc_str (strP, maxsizeP, size)
{
  char * D.5505;
  void * D.5504;
  char * D.5503;
  long unsigned int D.5502;
  long unsigned int D.5501;
  long unsigned int D.5500;
  long unsigned int D.5499;
  long unsigned int str_alloc_size.37;
  long unsigned int str_alloc_size.36;
  long unsigned int str_alloc_size.35;
  int str_alloc_count.34;
  int str_alloc_count.33;
  char * D.5493;
  void * D.5492;
  long unsigned int D.5491;
  long unsigned int D.5490;
  long unsigned int D.5489;
  long unsigned int D.5488;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.5488 = *maxsizeP;
  if (D.5488 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5489 = size + 100;
  D.5490 = MAX_EXPR <D.5489, 200>;
  *maxsizeP = D.5490;
  D.5488 = *maxsizeP;
  D.5491 = D.5488 + 1;
  D.5492 = malloc (D.5491);
  D.5493 = (char *) D.5492;
  *strP = D.5493;
  str_alloc_count.33 = str_alloc_count;
  str_alloc_count.34 = str_alloc_count.33 + 1;
  str_alloc_count = str_alloc_count.34;
  D.5488 = *maxsizeP;
  str_alloc_size.35 = str_alloc_size;
  str_alloc_size.36 = D.5488 + str_alloc_size.35;
  str_alloc_size = str_alloc_size.36;
  goto <bb 6>;
  # SUCC: 6 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  D.5488 = *maxsizeP;
  if (D.5488 < size)
    goto <bb 5>;
  else
    goto <bb 8>;
  # SUCC: 5 (true) 8 (false)

  # BLOCK 5
  # PRED: 4 (true)
  str_alloc_size.35 = str_alloc_size;
  D.5488 = *maxsizeP;
  str_alloc_size.37 = str_alloc_size.35 - D.5488;
  str_alloc_size = str_alloc_size.37;
  D.5499 = size * 5;
  D.5500 = D.5499 / 4;
  D.5488 = *maxsizeP;
  D.5501 = D.5488 * 2;
  D.5502 = MAX_EXPR <D.5500, D.5501>;
  *maxsizeP = D.5502;
  D.5488 = *maxsizeP;
  D.5491 = D.5488 + 1;
  D.5503 = *strP;
  D.5504 = realloc (D.5503, D.5491);
  D.5505 = (char *) D.5504;
  *strP = D.5505;
  D.5488 = *maxsizeP;
  str_alloc_size.35 = str_alloc_size;
  str_alloc_size.36 = D.5488 + str_alloc_size.35;
  str_alloc_size = str_alloc_size.36;
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 3 (fallthru) 5 (fallthru)
  D.5503 = *strP;
  if (D.5503 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  D.5488 = *maxsizeP;
  syslog (3, &"out of memory reallocating a string to %d bytes"[0], D.5488);
  exit (1);
  # SUCC:

  # BLOCK 8
  # PRED: 4 (false) 6 (false)
  return;
  # SUCC: EXIT

}



;; Function httpd_clear_ndelay (httpd_clear_ndelay)

httpd_clear_ndelay (fd)
{
  int newflags;
  int flags;
  int flags.27;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  flags.27 = fcntl (fd, 3, 0);
  flags = flags.27;
  if (flags != -1)
    goto <bb 3>;
  else
    goto <bb 5>;
  # SUCC: 3 (true) 5 (false)

  # BLOCK 3
  # PRED: 2 (true)
  newflags = flags & -2049;
  if (newflags != flags)
    goto <bb 4>;
  else
    goto <bb 5>;
  # SUCC: 4 (true) 5 (false)

  # BLOCK 4
  # PRED: 3 (true)
  fcntl (fd, 4, newflags);
  # SUCC: 5 (fallthru)

  # BLOCK 5
  # PRED: 2 (false) 3 (false) 4 (fallthru)
  return;
  # SUCC: EXIT

}



;; Function httpd_set_ndelay (httpd_set_ndelay)

httpd_set_ndelay (fd)
{
  int newflags;
  int flags;
  int flags.26;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  flags.26 = fcntl (fd, 3, 0);
  flags = flags.26;
  if (flags != -1)
    goto <bb 3>;
  else
    goto <bb 5>;
  # SUCC: 3 (true) 5 (false)

  # BLOCK 3
  # PRED: 2 (true)
  newflags = flags | 2048;
  if (newflags != flags)
    goto <bb 4>;
  else
    goto <bb 5>;
  # SUCC: 4 (true) 5 (false)

  # BLOCK 4
  # PRED: 3 (true)
  fcntl (fd, 4, newflags);
  # SUCC: 5 (fallthru)

  # BLOCK 5
  # PRED: 2 (false) 3 (false) 4 (fallthru)
  return;
  # SUCC: EXIT

}



;; Function httpd_write_response (httpd_write_response)

httpd_write_response (hc)
{
  char * D.5417;
  long unsigned int D.5416;
  int D.5415;
  int sub_process.25;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  sub_process.25 = sub_process;
  if (sub_process.25 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5415 = hc->conn_fd;
  httpd_clear_ndelay (D.5415);
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (false) 3 (fallthru)
  D.5416 = hc->responselen;
  if (D.5416 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.5416 = hc->responselen;
  D.5417 = hc->response;
  D.5415 = hc->conn_fd;
  httpd_write_fully (D.5415, D.5417, D.5416);
  hc->responselen = 0;
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 4 (false) 5 (fallthru)
  return;
  # SUCC: EXIT

}



;; Function httpd_unlisten (httpd_unlisten)

httpd_unlisten (hs)
{
  int D.5379;
  int D.5378;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.5378 = hs->listen4_fd;
  if (D.5378 != -1)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5378 = hs->listen4_fd;
  close (D.5378);
  hs->listen4_fd = -1;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (false) 3 (fallthru)
  D.5379 = hs->listen6_fd;
  if (D.5379 != -1)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.5379 = hs->listen6_fd;
  close (D.5379);
  hs->listen6_fd = -1;
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 4 (false) 5 (fallthru)
  return;
  # SUCC: EXIT

}



;; Function httpd_terminate (httpd_terminate)

httpd_terminate (hs)
{
  struct FILE * D.5374;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  httpd_unlisten (hs);
  D.5374 = hs->logfp;
  if (D.5374 != 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5374 = hs->logfp;
  fclose (D.5374);
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (false) 3 (fallthru)
  free_httpd_server (hs);
  return;
  # SUCC: EXIT

}



;; Function free_httpd_server (free_httpd_server)

free_httpd_server (hs)
{
  char * D.5268;
  char * D.5267;
  char * D.5266;
  char * D.5265;
  char * D.5264;
  char * D.5263;
  char * D.5262;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.5262 = hs->binding_hostname;
  if (D.5262 != 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5262 = hs->binding_hostname;
  free (D.5262);
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (false) 3 (fallthru)
  D.5263 = hs->cwd;
  if (D.5263 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.5263 = hs->cwd;
  free (D.5263);
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 4 (false) 5 (fallthru)
  D.5264 = hs->cgi_pattern;
  if (D.5264 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  D.5264 = hs->cgi_pattern;
  free (D.5264);
  # SUCC: 8 (fallthru)

  # BLOCK 8
  # PRED: 6 (false) 7 (fallthru)
  D.5265 = hs->charset;
  if (D.5265 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
  # SUCC: 9 (true) 10 (false)

  # BLOCK 9
  # PRED: 8 (true)
  D.5265 = hs->charset;
  free (D.5265);
  # SUCC: 10 (fallthru)

  # BLOCK 10
  # PRED: 8 (false) 9 (fallthru)
  D.5266 = hs->p3p;
  if (D.5266 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;
  # SUCC: 11 (true) 12 (false)

  # BLOCK 11
  # PRED: 10 (true)
  D.5266 = hs->p3p;
  free (D.5266);
  # SUCC: 12 (fallthru)

  # BLOCK 12
  # PRED: 10 (false) 11 (fallthru)
  D.5267 = hs->url_pattern;
  if (D.5267 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;
  # SUCC: 13 (true) 14 (false)

  # BLOCK 13
  # PRED: 12 (true)
  D.5267 = hs->url_pattern;
  free (D.5267);
  # SUCC: 14 (fallthru)

  # BLOCK 14
  # PRED: 12 (false) 13 (fallthru)
  D.5268 = hs->local_pattern;
  if (D.5268 != 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
  # SUCC: 15 (true) 16 (false)

  # BLOCK 15
  # PRED: 14 (true)
  D.5268 = hs->local_pattern;
  free (D.5268);
  # SUCC: 16 (fallthru)

  # BLOCK 16
  # PRED: 14 (false) 15 (fallthru)
  free (hs);
  return;
  # SUCC: EXIT

}



;; Function httpd_set_logfp (httpd_set_logfp)

httpd_set_logfp (hs, logfp)
{
  struct FILE * D.5370;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.5370 = hs->logfp;
  if (D.5370 != 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  D.5370 = hs->logfp;
  fclose (D.5370);
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (false) 3 (fallthru)
  hs->logfp = logfp;
  return;
  # SUCC: EXIT

}



;; Function httpd_initialize (httpd_initialize)

httpd_initialize (hostname, sa4P, sa6P, port, cgi_pattern, cgi_limit, charset, p3p, max_age, cwd, no_log, logfp, no_symlink_check, vhost, global_passwd, url_pattern, local_pattern, no_empty_referers)
{
  char * cp;
  static char ghnbuf[256];
  struct httpd_server * hs;
  char * D.5343;
  union httpd_sockaddr * iftmp.22;
  int D.5341;
  short unsigned int D.5340;
  int D.5339;
  int D.5338;
  int D.5337;
  int D.5336;
  char * D.5335;
  char * D.5334;
  char * D.5333;
  char * D.5332;
  char * D.5331;
  char * D.5330;
  char * D.5329;
  char * D.5328;
  char * D.5327;
  const char * D.5326;
  char * D.5325;
  char * D.5324;
  char D.5323;
  char D.5322;
  char * D.5321;
  int D.5320;
  char * D.5319;
  char * D.5318;
  struct httpd_server * D.5317;
  void * D.5316;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  check_options ();
  D.5316 = malloc (136);
  hs = (struct httpd_server *) D.5316;
  if (hs == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  syslog (2, &"out of memory allocating an httpd_server"[0]);
  D.5317 = 0B;
  goto <bb 48>;
  # SUCC: 48 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  if (hostname != 0B)
    goto <bb 5>;
  else
    goto <bb 8>;
  # SUCC: 5 (true) 8 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.5318 = __strdup (hostname);
  hs->binding_hostname = D.5318;
  D.5319 = hs->binding_hostname;
  if (D.5319 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
  # SUCC: 6 (true) 7 (false)

  # BLOCK 6
  # PRED: 5 (true)
  syslog (2, &"out of memory copying hostname"[0]);
  D.5317 = 0B;
  goto <bb 48>;
  # SUCC: 48 (fallthru)

  # BLOCK 7
  # PRED: 5 (false)
  D.5319 = hs->binding_hostname;
  hs->server_hostname = D.5319;
  goto <bb 13>;
  # SUCC: 13 (fallthru)

  # BLOCK 8
  # PRED: 4 (false)
  hs->binding_hostname = 0B;
  hs->server_hostname = 0B;
  D.5320 = gethostname (&ghnbuf, 256);
  if (D.5320 < 0)
    goto <bb 9>;
  else
    goto <bb 10>;
  # SUCC: 9 (true) 10 (false)

  # BLOCK 9
  # PRED: 8 (true)
  ghnbuf[0] = 0;
  # SUCC: 10 (fallthru)

  # BLOCK 10
  # PRED: 8 (false) 9 (fallthru)
  D.5321 = hs->server_hostname;
  if (D.5321 == 0B)
    goto <bb 11>;
  else
    goto <bb 13>;
  # SUCC: 11 (true) 13 (false)

  # BLOCK 11
  # PRED: 10 (true)
  D.5322 = ghnbuf[0];
  if (D.5322 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;
  # SUCC: 12 (true) 13 (false)

  # BLOCK 12
  # PRED: 11 (true)
  hs->server_hostname = &ghnbuf;
  # SUCC: 13 (fallthru)

  # BLOCK 13
  # PRED: 7 (fallthru) 10 (false) 11 (false) 12 (fallthru)
  hs->port = port;
  if (cgi_pattern == 0B)
    goto <bb 14>;
  else
    goto <bb 15>;
  # SUCC: 14 (true) 15 (false)

  # BLOCK 14
  # PRED: 13 (true)
  hs->cgi_pattern = 0B;
  goto <bb 22>;
  # SUCC: 22 (fallthru)

  # BLOCK 15
  # PRED: 13 (false)
  D.5323 = *cgi_pattern;
  if (D.5323 == 47)
    goto <bb 16>;
  else
    goto <bb 17>;
  # SUCC: 16 (true) 17 (false)

  # BLOCK 16
  # PRED: 15 (true)
  cgi_pattern = cgi_pattern + 1;
  # SUCC: 17 (fallthru)

  # BLOCK 17
  # PRED: 15 (false) 16 (fallthru)
  D.5324 = __strdup (cgi_pattern);
  hs->cgi_pattern = D.5324;
  D.5325 = hs->cgi_pattern;
  if (D.5325 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;
  # SUCC: 18 (true) 19 (false)

  # BLOCK 18
  # PRED: 17 (true)
  syslog (2, &"out of memory copying cgi_pattern"[0]);
  D.5317 = 0B;
  goto <bb 48>;
  # SUCC: 48 (fallthru)

  # BLOCK 19
  # PRED: 17 (false)
  goto <bb 21>;
  # SUCC: 21 (fallthru)

  # BLOCK 20
  # PRED: 21 (true)
  D.5326 = cp + 2;
  D.5327 = cp + 1;
  strcpy (D.5327, D.5326);
  # SUCC: 21 (fallthru)

  # BLOCK 21
  # PRED: 19 (fallthru) 20 (fallthru)
  D.5325 = hs->cgi_pattern;
  cp = strstr (D.5325, &"|/"[0]);
  if (cp != 0B)
    goto <bb 20>;
  else
    goto <bb 22>;
  # SUCC: 20 (true) 22 (false)

  # BLOCK 22
  # PRED: 14 (fallthru) 21 (false)
  hs->cgi_limit = cgi_limit;
  hs->cgi_count = 0;
  D.5328 = __strdup (charset);
  hs->charset = D.5328;
  D.5329 = __strdup (p3p);
  hs->p3p = D.5329;
  hs->max_age = max_age;
  D.5330 = __strdup (cwd);
  hs->cwd = D.5330;
  D.5331 = hs->cwd;
  if (D.5331 == 0B)
    goto <bb 23>;
  else
    goto <bb 24>;
  # SUCC: 23 (true) 24 (false)

  # BLOCK 23
  # PRED: 22 (true)
  syslog (2, &"out of memory copying cwd"[0]);
  D.5317 = 0B;
  goto <bb 48>;
  # SUCC: 48 (fallthru)

  # BLOCK 24
  # PRED: 22 (false)
  if (url_pattern == 0B)
    goto <bb 25>;
  else
    goto <bb 26>;
  # SUCC: 25 (true) 26 (false)

  # BLOCK 25
  # PRED: 24 (true)
  hs->url_pattern = 0B;
  goto <bb 28>;
  # SUCC: 28 (fallthru)

  # BLOCK 26
  # PRED: 24 (false)
  D.5332 = __strdup (url_pattern);
  hs->url_pattern = D.5332;
  D.5333 = hs->url_pattern;
  if (D.5333 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;
  # SUCC: 27 (true) 28 (false)

  # BLOCK 27
  # PRED: 26 (true)
  syslog (2, &"out of memory copying url_pattern"[0]);
  D.5317 = 0B;
  goto <bb 48>;
  # SUCC: 48 (fallthru)

  # BLOCK 28
  # PRED: 25 (fallthru) 26 (false)
  if (local_pattern == 0B)
    goto <bb 29>;
  else
    goto <bb 30>;
  # SUCC: 29 (true) 30 (false)

  # BLOCK 29
  # PRED: 28 (true)
  hs->local_pattern = 0B;
  goto <bb 32>;
  # SUCC: 32 (fallthru)

  # BLOCK 30
  # PRED: 28 (false)
  D.5334 = __strdup (local_pattern);
  hs->local_pattern = D.5334;
  D.5335 = hs->local_pattern;
  if (D.5335 == 0B)
    goto <bb 31>;
  else
    goto <bb 32>;
  # SUCC: 31 (true) 32 (false)

  # BLOCK 31
  # PRED: 30 (true)
  syslog (2, &"out of memory copying local_pattern"[0]);
  D.5317 = 0B;
  goto <bb 48>;
  # SUCC: 48 (fallthru)

  # BLOCK 32
  # PRED: 29 (fallthru) 30 (false)
  hs->no_log = no_log;
  hs->logfp = 0B;
  httpd_set_logfp (hs, logfp);
  hs->no_symlink_check = no_symlink_check;
  hs->vhost = vhost;
  hs->global_passwd = global_passwd;
  hs->no_empty_referers = no_empty_referers;
  if (sa6P == 0B)
    goto <bb 33>;
  else
    goto <bb 34>;
  # SUCC: 33 (true) 34 (false)

  # BLOCK 33
  # PRED: 32 (true)
  hs->listen6_fd = -1;
  goto <bb 35>;
  # SUCC: 35 (fallthru)

  # BLOCK 34
  # PRED: 32 (false)
  D.5336 = initialize_listen_socket (sa6P);
  hs->listen6_fd = D.5336;
  # SUCC: 35 (fallthru)

  # BLOCK 35
  # PRED: 33 (fallthru) 34 (fallthru)
  if (sa4P == 0B)
    goto <bb 36>;
  else
    goto <bb 37>;
  # SUCC: 36 (true) 37 (false)

  # BLOCK 36
  # PRED: 35 (true)
  hs->listen4_fd = -1;
  goto <bb 38>;
  # SUCC: 38 (fallthru)

  # BLOCK 37
  # PRED: 35 (false)
  D.5337 = initialize_listen_socket (sa4P);
  hs->listen4_fd = D.5337;
  # SUCC: 38 (fallthru)

  # BLOCK 38
  # PRED: 36 (fallthru) 37 (fallthru)
  D.5338 = hs->listen4_fd;
  if (D.5338 == -1)
    goto <bb 39>;
  else
    goto <bb 41>;
  # SUCC: 39 (true) 41 (false)

  # BLOCK 39
  # PRED: 38 (true)
  D.5339 = hs->listen6_fd;
  if (D.5339 == -1)
    goto <bb 40>;
  else
    goto <bb 41>;
  # SUCC: 40 (true) 41 (false)

  # BLOCK 40
  # PRED: 39 (true)
  free_httpd_server (hs);
  D.5317 = 0B;
  goto <bb 48>;
  # SUCC: 48 (fallthru)

  # BLOCK 41
  # PRED: 38 (false) 39 (false)
  init_mime ();
  D.5319 = hs->binding_hostname;
  if (D.5319 == 0B)
    goto <bb 42>;
  else
    goto <bb 43>;
  # SUCC: 42 (true) 43 (false)

  # BLOCK 42
  # PRED: 41 (true)
  D.5340 = hs->port;
  D.5341 = (int) D.5340;
  syslog (5, &"%.80s starting on port %d"[0], &"thttpd/2.25b 29dec2003"[0], D.5341);
  goto <bb 47>;
  # SUCC: 47 (fallthru)

  # BLOCK 43
  # PRED: 41 (false)
  D.5340 = hs->port;
  D.5341 = (int) D.5340;
  D.5338 = hs->listen4_fd;
  if (D.5338 != -1)
    goto <bb 44>;
  else
    goto <bb 45>;
  # SUCC: 44 (true) 45 (false)

  # BLOCK 44
  # PRED: 43 (true)
  iftmp.22 = sa4P;
  goto <bb 46>;
  # SUCC: 46 (fallthru)

  # BLOCK 45
  # PRED: 43 (false)
  iftmp.22 = sa6P;
  # SUCC: 46 (fallthru)

  # BLOCK 46
  # PRED: 44 (fallthru) 45 (fallthru)
  D.5343 = httpd_ntoa (iftmp.22);
  syslog (5, &"%.80s starting on %.80s, port %d"[0], &"thttpd/2.25b 29dec2003"[0], D.5343, D.5341);
  # SUCC: 47 (fallthru)

  # BLOCK 47
  # PRED: 42 (fallthru) 46 (fallthru)
  D.5317 = hs;
  # SUCC: 48 (fallthru)

  # BLOCK 48
  # PRED: 3 (fallthru) 6 (fallthru) 18 (fallthru) 23 (fallthru) 27 (fallthru) 31 (fallthru) 40 (fallthru) 47 (fallthru)
  return D.5317;
  # SUCC: EXIT

}


Removing basic block 19

;; Function check_options (check_options)

check_options ()
{
  # BLOCK 2
  # PRED: ENTRY (fallthru)
  return;
  # SUCC: EXIT

}



;; Function initialize_listen_socket (initialize_listen_socket)

initialize_listen_socket (saP)
{
  int flags;
  int on;
  int listen_fd;
  int D.5365;
  int D.5364;
  int D.5363;
  int flags.24;
  char * D.5361;
  int D.5360;
  struct sockaddr * D.5359;
  unsigned int D.5358;
  long unsigned int D.5357;
  int D.5356;
  char * D.5355;
  int listen_fd.23;
  int D.5353;
  short unsigned int D.5352;
  int D.5351;
  int D.5350;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.5350 = sockaddr_check (saP);
  if (D.5350 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  syslog (2, &"unknown sockaddr family on listen socket"[0]);
  D.5351 = -1;
  goto <bb 17>;
  # SUCC: 17 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  D.5352 = saP->sa.sa_family;
  D.5353 = (int) D.5352;
  listen_fd.23 = socket (D.5353, 1, 0);
  listen_fd = listen_fd.23;
  if (listen_fd < 0)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  D.5355 = httpd_ntoa (saP);
  syslog (2, &"socket %.80s - %m"[0], D.5355);
  D.5351 = -1;
  goto <bb 17>;
  # SUCC: 17 (fallthru)

  # BLOCK 6
  # PRED: 4 (false)
  fcntl (listen_fd, 2, 1);
  on = 1;
  D.5356 = setsockopt (listen_fd, 1, 2, &on, 4);
  if (D.5356 < 0)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  syslog (2, &"setsockopt SO_REUSEADDR - %m"[0]);
  # SUCC: 8 (fallthru)

  # BLOCK 8
  # PRED: 6 (false) 7 (fallthru)
  D.5357 = sockaddr_len (saP);
  D.5358 = (socklen_t) D.5357;
  D.5359 = &saP->sa;
  D.5360 = bind (listen_fd, D.5359, D.5358);
  if (D.5360 < 0)
    goto <bb 9>;
  else
    goto <bb 10>;
  # SUCC: 9 (true) 10 (false)

  # BLOCK 9
  # PRED: 8 (true)
  D.5361 = httpd_ntoa (saP);
  syslog (2, &"bind %.80s - %m"[0], D.5361);
  close (listen_fd);
  D.5351 = -1;
  goto <bb 17>;
  # SUCC: 17 (fallthru)

  # BLOCK 10
  # PRED: 8 (false)
  flags.24 = fcntl (listen_fd, 3, 0);
  flags = flags.24;
  if (flags == -1)
    goto <bb 11>;
  else
    goto <bb 12>;
  # SUCC: 11 (true) 12 (false)

  # BLOCK 11
  # PRED: 10 (true)
  syslog (2, &"fcntl F_GETFL - %m"[0]);
  close (listen_fd);
  D.5351 = -1;
  goto <bb 17>;
  # SUCC: 17 (fallthru)

  # BLOCK 12
  # PRED: 10 (false)
  D.5363 = flags | 2048;
  D.5364 = fcntl (listen_fd, 4, D.5363);
  if (D.5364 < 0)
    goto <bb 13>;
  else
    goto <bb 14>;
  # SUCC: 13 (true) 14 (false)

  # BLOCK 13
  # PRED: 12 (true)
  syslog (2, &"fcntl O_NDELAY - %m"[0]);
  close (listen_fd);
  D.5351 = -1;
  goto <bb 17>;
  # SUCC: 17 (fallthru)

  # BLOCK 14
  # PRED: 12 (false)
  D.5365 = listen (listen_fd, 1024);
  if (D.5365 < 0)
    goto <bb 15>;
  else
    goto <bb 16>;
  # SUCC: 15 (true) 16 (false)

  # BLOCK 15
  # PRED: 14 (true)
  syslog (2, &"listen - %m"[0]);
  close (listen_fd);
  D.5351 = -1;
  goto <bb 17>;
  # SUCC: 17 (fallthru)

  # BLOCK 16
  # PRED: 14 (false)
  D.5351 = listen_fd;
  # SUCC: 17 (fallthru)

  # BLOCK 17
  # PRED: 3 (fallthru) 5 (fallthru) 9 (fallthru) 11 (fallthru) 13 (fallthru) 15 (fallthru) 16 (fallthru)
  return D.5351;
  # SUCC: EXIT

}



;; Function init_mime (init_mime)

init_mime ()
{
  int i;
  long unsigned int D.6874;
  char * D.6873;
  long unsigned int D.6872;
  char * D.6871;
  long unsigned int D.6870;
  char * D.6869;
  long unsigned int D.6868;
  char * D.6867;
  int i.161;
  int (*<T92d>) (const void *, const void *) ext_compare.160;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  ext_compare.160 = (int (*__compar_fn_t) (const void *, const void *)) ext_compare;
  qsort (&enc_tab, 3, 32, ext_compare.160);
  ext_compare.160 = (int (*__compar_fn_t) (const void *, const void *)) ext_compare;
  qsort (&typ_tab, 190, 32, ext_compare.160);
  i = 0;
  goto <bb 4>;
  # SUCC: 4 (fallthru)

  # BLOCK 3
  # PRED: 4 (true)
  i.161 = i;
  i.161 = i;
  D.6867 = enc_tab[i.161].ext;
  D.6868 = strlen (D.6867);
  enc_tab[i.161].ext_len = D.6868;
  i.161 = i;
  i.161 = i;
  D.6869 = enc_tab[i.161].val;
  D.6870 = strlen (D.6869);
  enc_tab[i.161].val_len = D.6870;
  i = i + 1;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (fallthru) 3 (fallthru)
  if (i <= 2)
    goto <bb 3>;
  else
    goto <bb 5>;
  # SUCC: 3 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  i = 0;
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 6
  # PRED: 7 (true)
  i.161 = i;
  i.161 = i;
  D.6871 = typ_tab[i.161].ext;
  D.6872 = strlen (D.6871);
  typ_tab[i.161].ext_len = D.6872;
  i.161 = i;
  i.161 = i;
  D.6873 = typ_tab[i.161].val;
  D.6874 = strlen (D.6873);
  typ_tab[i.161].val_len = D.6874;
  i = i + 1;
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 5 (fallthru) 6 (fallthru)
  if (i <= 189)
    goto <bb 6>;
  else
    goto <bb 8>;
  # SUCC: 6 (true) 8 (false)

  # BLOCK 8
  # PRED: 7 (false)
  return;
  # SUCC: EXIT

}



;; Function ext_compare (ext_compare)

ext_compare (a, b)
{
  size_t __s2_len;
  size_t __s1_len;
  char * D.6854;
  char * D.6853;
  int D.6851;
  int D.6852;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  D.6853 = b->ext;
  D.6854 = a->ext;
  D.6851 = __builtin_strcmp (D.6854, D.6853);
  D.6852 = D.6851;
  # SUCC: 3 (fallthru)

  # BLOCK 3
  # PRED: 2 (fallthru)
  return D.6852;
  # SUCC: EXIT

}


Merging blocks 2 and 3
